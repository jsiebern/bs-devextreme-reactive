// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var DxReactGrid = require("@devexpress/dx-react-grid");

function unwrapValue(param) {
  var variant = param[0];
  if (variant !== -908856609) {
    if (variant !== 770676513) {
      if (variant >= 1034997432) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "Grid.re",
                21,
                21
              ]
            ];
      } else {
        return param[1];
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "Grid.re",
              20,
              16
            ]
          ];
    }
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "Grid.re",
            19,
            18
          ]
        ];
  }
}

function make(prim, _) {
  var tmp = { };
  if (prim) {
    tmp.showColumnChooser = prim[0];
  }
  return tmp;
}

function unwrap(obj) {
  if (obj) {
    var unwrappedMap = { };
    var match = obj[0].showColumnChooser;
    if (match !== undefined) {
      unwrappedMap["showColumnChooser"] = match;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages = /* module */[
  /* make */make,
  /* unwrap */unwrap
];

function make$1(overlayComponent, containerComponent, itemComponent, toggleButtonComponent, messages, children) {
  var tmp = { };
  if (overlayComponent) {
    tmp.overlayComponent = overlayComponent[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (itemComponent) {
    tmp.itemComponent = itemComponent[0];
  }
  if (toggleButtonComponent) {
    tmp.toggleButtonComponent = toggleButtonComponent[0];
  }
  var tmp$1 = unwrap(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.ColumnChooser, tmp, children);
}

var ColumnChooser = /* module */[
  /* Messages */Messages,
  /* make */make$1
];

function make$2(prim) {
  return {
          columnName: prim
        };
}

function unwrap$1(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  return unwrappedMap;
}

var Grouping = /* module */[
  /* make */make$2,
  /* unwrap */unwrap$1
];

function make$3(getChildGroups, grouping, expandedGroups, children) {
  var tmp = {
    getChildGroups: getChildGroups
  };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$1);
        }), grouping);
  if (tmp$1) {
    tmp.grouping = tmp$1[0];
  }
  if (expandedGroups) {
    tmp.expandedGroups = expandedGroups[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.CustomGrouping, tmp, children);
}

var CustomGrouping = /* module */[
  /* Grouping */Grouping,
  /* make */make$3
];

function make$4(totalCount, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, totalCount);
  if (tmp$1) {
    tmp.totalCount = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.CustomPaging, tmp, children);
}

var CustomPaging = /* module */[/* make */make$4];

function make$5(getChildRows, children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.CustomTreeData, {
              getChildRows: getChildRows
            }, children);
}

var CustomTreeData = /* module */[/* make */make$5];

function make$6(for_, formatterComponent, editorComponent, availableFilterOperations, children) {
  var tmp = {
    for_: for_
  };
  if (formatterComponent) {
    tmp.formatterComponent = formatterComponent[0];
  }
  if (editorComponent) {
    tmp.editorComponent = editorComponent[0];
  }
  if (availableFilterOperations) {
    tmp.availableFilterOperations = availableFilterOperations[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.DataTypeProvider, tmp, children);
}

var DataTypeProvider = /* module */[/* make */make$6];

function make$7(containerComponent, columnComponent, children) {
  var tmp = { };
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (columnComponent) {
    tmp.columnComponent = columnComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.DragDropProvider, tmp, children);
}

var DragDropProvider = /* module */[/* make */make$7];

function make$8(prim, prim$1, prim$2, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.editingEnabled = prim$1[0];
  }
  if (prim$2) {
    tmp.createRowChange = prim$2[0];
  }
  return tmp;
}

function unwrap$2(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.editingEnabled;
  if (match !== undefined) {
    unwrappedMap["editingEnabled"] = match;
  }
  var match$1 = obj.createRowChange;
  if (match$1 !== undefined) {
    unwrappedMap["createRowChange"] = match$1;
  }
  return unwrappedMap;
}

var ColumnExtensions = /* module */[
  /* make */make$8,
  /* unwrap */unwrap$2
];

function make$9(prim, prim$1, prim$2, _) {
  var tmp = { };
  if (prim) {
    tmp.added = prim[0];
  }
  if (prim$1) {
    tmp.changed = prim$1[0];
  }
  if (prim$2) {
    tmp.deleted = prim$2[0];
  }
  return tmp;
}

function unwrap$3(obj) {
  var unwrappedMap = { };
  var match = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), Js_primitive.undefined_to_opt(obj.added));
  if (match) {
    unwrappedMap["added"] = match[0];
  }
  var match$1 = obj.changed;
  if (match$1 !== undefined) {
    unwrappedMap["changed"] = match$1;
  }
  var match$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), Js_primitive.undefined_to_opt(obj.deleted));
  if (match$2) {
    unwrappedMap["deleted"] = match$2[0];
  }
  return unwrappedMap;
}

var Changes = /* module */[
  /* make */make$9,
  /* unwrap */unwrap$3
];

function make$10(createRowChange, columnEditingEnabled, columnExtensions, editingRowIds, defaultEditingRowIds, onEditingRowIdsChange, addedRows, defaultAddedRows, onAddedRowsChange, rowChanges, defaultRowChanges, onRowChangesChange, deletedRowIds, defaultDeletedRowIds, onDeletedRowIdsChange, onCommitChanges, children) {
  var tmp = {
    onCommitChanges: onCommitChanges
  };
  if (createRowChange) {
    tmp.createRowChange = createRowChange[0];
  }
  if (columnEditingEnabled) {
    tmp.columnEditingEnabled = columnEditingEnabled[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$2);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), editingRowIds);
  if (tmp$2) {
    tmp.editingRowIds = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultEditingRowIds);
  if (tmp$3) {
    tmp.defaultEditingRowIds = tmp$3[0];
  }
  if (onEditingRowIdsChange) {
    tmp.onEditingRowIdsChange = onEditingRowIdsChange[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), addedRows);
  if (tmp$4) {
    tmp.addedRows = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), defaultAddedRows);
  if (tmp$5) {
    tmp.defaultAddedRows = tmp$5[0];
  }
  if (onAddedRowsChange) {
    tmp.onAddedRowsChange = onAddedRowsChange[0];
  }
  if (rowChanges) {
    tmp.rowChanges = rowChanges[0];
  }
  if (defaultRowChanges) {
    tmp.defaultRowChanges = defaultRowChanges[0];
  }
  if (onRowChangesChange) {
    tmp.onRowChangesChange = onRowChangesChange[0];
  }
  var tmp$6 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), deletedRowIds);
  if (tmp$6) {
    tmp.deletedRowIds = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultDeletedRowIds);
  if (tmp$7) {
    tmp.defaultDeletedRowIds = tmp$7[0];
  }
  if (onDeletedRowIdsChange) {
    tmp.onDeletedRowIdsChange = onDeletedRowIdsChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.EditingState, tmp, children);
}

var EditingState = /* module */[
  /* ColumnExtensions */ColumnExtensions,
  /* Changes */Changes,
  /* make */make$10
];

function make$11(prim, prim$1, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.value = prim$1[0];
  }
  return tmp;
}

function unwrap$4(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.value;
  if (match !== undefined) {
    unwrappedMap["value"] = match;
  }
  return unwrappedMap;
}

var Filters = /* module */[
  /* make */make$11,
  /* unwrap */unwrap$4
];

function make$12(prim, prim$1, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.value = prim$1[0];
  }
  return tmp;
}

function unwrap$5(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.value;
  if (match !== undefined) {
    unwrappedMap["value"] = match;
  }
  return unwrappedMap;
}

var DefaultFilters = /* module */[
  /* make */make$12,
  /* unwrap */unwrap$5
];

function make$13(prim, prim$1) {
  return {
          columnName: prim,
          filteringEnabled: prim$1
        };
}

function unwrap$6(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["filteringEnabled"] = obj.filteringEnabled;
  return unwrappedMap;
}

var ColumnExtensions$1 = /* module */[
  /* make */make$13,
  /* unwrap */unwrap$6
];

function make$14(filters, defaultFilters, onFiltersChange, columnExtensions, columnFilteringEnabled, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$4);
        }), filters);
  if (tmp$1) {
    tmp.filters = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$5);
        }), defaultFilters);
  if (tmp$2) {
    tmp.defaultFilters = tmp$2[0];
  }
  if (onFiltersChange) {
    tmp.onFiltersChange = onFiltersChange[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(unwrap$6);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  if (columnFilteringEnabled) {
    tmp.columnFilteringEnabled = columnFilteringEnabled[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.FilteringState, tmp, children);
}

var FilteringState = /* module */[
  /* Filters */Filters,
  /* DefaultFilters */DefaultFilters,
  /* ColumnExtensions */ColumnExtensions$1,
  /* make */make$14
];

function make$15(prim, prim$1, prim$2, _) {
  var tmp = {
    name: prim
  };
  if (prim$1) {
    tmp.title = prim$1[0];
  }
  if (prim$2) {
    tmp.getCellValue = prim$2[0];
  }
  return tmp;
}

function unwrap$7(obj) {
  var unwrappedMap = { };
  unwrappedMap["name"] = obj.name;
  var match = obj.title;
  if (match !== undefined) {
    unwrappedMap["title"] = match;
  }
  var match$1 = obj.getCellValue;
  if (match$1 !== undefined) {
    unwrappedMap["getCellValue"] = match$1;
  }
  return unwrappedMap;
}

var Columns = /* module */[
  /* make */make$15,
  /* unwrap */unwrap$7
];

function make$16(rows, getRowId, getCellValue, columns, rootComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), rows);
  if (tmp$1) {
    tmp.rows = tmp$1[0];
  }
  if (getRowId) {
    tmp.getRowId = getRowId[0];
  }
  if (getCellValue) {
    tmp.getCellValue = getCellValue[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$7);
        }), columns);
  if (tmp$2) {
    tmp.columns = tmp$2[0];
  }
  if (rootComponent) {
    tmp.rootComponent = rootComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.Grid, tmp, children);
}

var Grid = /* module */[
  /* Columns */Columns,
  /* make */make$16
];

function make$17(prim, prim$1, _) {
  var tmp = { };
  if (prim) {
    tmp.column = prim[0];
  }
  if (prim$1) {
    tmp.draft = prim$1[0];
  }
  return tmp;
}

function unwrap$8(obj) {
  var unwrappedMap = { };
  var match = obj.column;
  if (match !== undefined) {
    unwrappedMap["column"] = match;
  }
  var match$1 = obj.draft;
  if (match$1 !== undefined) {
    unwrappedMap["draft"] = match$1;
  }
  return unwrappedMap;
}

var Items = /* module */[
  /* make */make$17,
  /* unwrap */unwrap$8
];

function make$18(items, onGroup, itemComponent, containerComponent, emptyMessageComponent, draggingEnabled, isColumnGroupingEnabled, onGroupDraft, onGroupDraftCancel, children) {
  var tmp = {
    items: items.map(unwrap$8),
    itemComponent: itemComponent,
    containerComponent: containerComponent,
    emptyMessageComponent: emptyMessageComponent
  };
  if (onGroup) {
    tmp.onGroup = onGroup[0];
  }
  if (draggingEnabled) {
    tmp.draggingEnabled = draggingEnabled[0];
  }
  if (isColumnGroupingEnabled) {
    tmp.isColumnGroupingEnabled = isColumnGroupingEnabled[0];
  }
  if (onGroupDraft) {
    tmp.onGroupDraft = onGroupDraft[0];
  }
  if (onGroupDraftCancel) {
    tmp.onGroupDraftCancel = onGroupDraftCancel[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.GroupPanelLayout, tmp, children);
}

var GroupPanelLayout = /* module */[
  /* Items */Items,
  /* make */make$18
];

var jsMapperConstantArray = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function sortingDirectionToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function sortingDirectionFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function direction_enumToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$1);
}

function direction_enumFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$1, param);
}

function make$19(prim, _) {
  var tmp = { };
  if (prim) {
    tmp.groupByColumn = prim[0];
  }
  return tmp;
}

function unwrap$9(obj) {
  if (obj) {
    var unwrappedMap = { };
    var match = obj[0].groupByColumn;
    if (match !== undefined) {
      unwrappedMap["groupByColumn"] = match;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$1 = /* module */[
  /* make */make$19,
  /* unwrap */unwrap$9
];

function make$20(showSortingControls, showGroupingControls, layoutComponent, containerComponent, itemComponent, emptyMessageComponent, messages, children) {
  var tmp = { };
  if (showSortingControls) {
    tmp.showSortingControls = showSortingControls[0];
  }
  if (showGroupingControls) {
    tmp.showGroupingControls = showGroupingControls[0];
  }
  if (layoutComponent) {
    tmp.layoutComponent = layoutComponent[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (itemComponent) {
    tmp.itemComponent = itemComponent[0];
  }
  if (emptyMessageComponent) {
    tmp.emptyMessageComponent = emptyMessageComponent[0];
  }
  var tmp$1 = unwrap$9(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.GroupingPanel, tmp, children);
}

var GroupingPanel = /* module */[
  /* sortingDirectionToJs */sortingDirectionToJs,
  /* sortingDirectionFromJs */sortingDirectionFromJs,
  /* direction_enumToJs */direction_enumToJs,
  /* direction_enumFromJs */direction_enumFromJs,
  /* Messages */Messages$1,
  /* make */make$20
];

function make$21(prim) {
  return {
          columnName: prim
        };
}

function unwrap$10(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  return unwrappedMap;
}

var Grouping$1 = /* module */[
  /* make */make$21,
  /* unwrap */unwrap$10
];

function make$22(prim) {
  return {
          columnName: prim
        };
}

function unwrap$11(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  return unwrappedMap;
}

var DefaultGrouping = /* module */[
  /* make */make$22,
  /* unwrap */unwrap$11
];

function make$23(prim, prim$1) {
  return {
          columnName: prim,
          groupingEnabled: prim$1
        };
}

function unwrap$12(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["groupingEnabled"] = obj.groupingEnabled;
  return unwrappedMap;
}

var ColumnExtensions$2 = /* module */[
  /* make */make$23,
  /* unwrap */unwrap$12
];

function make$24(grouping, defaultGrouping, onGroupingChange, expandedGroups, defaultExpandedGroups, onExpandedGroupsChange, columnExtensions, columnGroupingEnabled, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$10);
        }), grouping);
  if (tmp$1) {
    tmp.grouping = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$11);
        }), defaultGrouping);
  if (tmp$2) {
    tmp.defaultGrouping = tmp$2[0];
  }
  if (onGroupingChange) {
    tmp.onGroupingChange = onGroupingChange[0];
  }
  if (expandedGroups) {
    tmp.expandedGroups = expandedGroups[0];
  }
  if (defaultExpandedGroups) {
    tmp.defaultExpandedGroups = defaultExpandedGroups[0];
  }
  if (onExpandedGroupsChange) {
    tmp.onExpandedGroupsChange = onExpandedGroupsChange[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(unwrap$12);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  if (columnGroupingEnabled) {
    tmp.columnGroupingEnabled = columnGroupingEnabled[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.GroupingState, tmp, children);
}

var GroupingState = /* module */[
  /* Grouping */Grouping$1,
  /* DefaultGrouping */DefaultGrouping,
  /* ColumnExtensions */ColumnExtensions$2,
  /* make */make$24
];

function make$25(prim, prim$1, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.predicate = prim$1[0];
  }
  return tmp;
}

function unwrap$13(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.predicate;
  if (match !== undefined) {
    unwrappedMap["predicate"] = match;
  }
  return unwrappedMap;
}

var ColumnExtensions$3 = /* module */[
  /* make */make$25,
  /* unwrap */unwrap$13
];

function make$26(columnExtensions, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$13);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedFiltering, tmp, children);
}

var IntegratedFiltering = /* module */[
  /* ColumnExtensions */ColumnExtensions$3,
  /* make */make$26
];

function make$27(prim, prim$1, _) {
  var tmp = {
    key: prim
  };
  if (prim$1) {
    tmp.value = prim$1[0];
  }
  return tmp;
}

function unwrap$14(obj) {
  var unwrappedMap = { };
  unwrappedMap["key"] = unwrapValue(obj.key);
  var match = obj.value;
  if (match !== undefined) {
    unwrappedMap["value"] = match;
  }
  return unwrappedMap;
}

var CriteriaReturn = /* module */[
  /* make */make$27,
  /* unwrap */unwrap$14
];

function make$28(prim, prim$1, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.criteria = prim$1[0];
  }
  return tmp;
}

function unwrap$15(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.criteria;
  if (match !== undefined) {
    unwrappedMap["criteria"] = match;
  }
  return unwrappedMap;
}

var ColumnExtensions$4 = /* module */[
  /* make */make$28,
  /* unwrap */unwrap$15
];

function make$29(columnExtensions, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$15);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedGrouping, tmp, children);
}

var IntegratedGrouping = /* module */[
  /* CriteriaReturn */CriteriaReturn,
  /* ColumnExtensions */ColumnExtensions$4,
  /* make */make$29
];

function make$30(children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedPaging, { }, children);
}

var IntegratedPaging = /* module */[/* make */make$30];

function make$31(children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedSelection, { }, children);
}

var IntegratedSelection = /* module */[/* make */make$31];

function make$32(prim, prim$1, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.compare = prim$1[0];
  }
  return tmp;
}

function unwrap$16(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.compare;
  if (match !== undefined) {
    unwrappedMap["compare"] = match;
  }
  return unwrappedMap;
}

var ColumnExtensions$5 = /* module */[
  /* make */make$32,
  /* unwrap */unwrap$16
];

function make$33(columnExtensions, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$16);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedSorting, tmp, children);
}

var IntegratedSorting = /* module */[
  /* ColumnExtensions */ColumnExtensions$5,
  /* make */make$33
];

function make$34(prim, prim$1, prim$2, _) {
  var tmp = { };
  if (prim) {
    tmp.showAll = prim[0];
  }
  if (prim$1) {
    tmp.rowsPerPage = prim$1[0];
  }
  if (prim$2) {
    tmp.info = prim$2[0];
  }
  return tmp;
}

function unwrap$17(obj) {
  if (obj) {
    var obj$1 = obj[0];
    var unwrappedMap = { };
    var match = obj$1.showAll;
    if (match !== undefined) {
      unwrappedMap["showAll"] = match;
    }
    var match$1 = obj$1.rowsPerPage;
    if (match$1 !== undefined) {
      unwrappedMap["rowsPerPage"] = match$1;
    }
    var match$2 = obj$1.info;
    if (match$2 !== undefined) {
      unwrappedMap["info"] = match$2;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$2 = /* module */[
  /* make */make$34,
  /* unwrap */unwrap$17
];

function make$35(pageSizes, containerComponent, messages, children) {
  var tmp = { };
  if (pageSizes) {
    tmp.pageSizes = pageSizes[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  var tmp$1 = unwrap$17(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.PagingPanel, tmp, children);
}

var PagingPanel = /* module */[
  /* Messages */Messages$2,
  /* make */make$35
];

function make$36(pageSize, defaultPageSize, onPageSizeChange, currentPage, defaultCurrentPage, onCurrentPageChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, pageSize);
  if (tmp$1) {
    tmp.pageSize = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, defaultPageSize);
  if (tmp$2) {
    tmp.defaultPageSize = tmp$2[0];
  }
  if (onPageSizeChange) {
    tmp.onPageSizeChange = onPageSizeChange[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, currentPage);
  if (tmp$3) {
    tmp.currentPage = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, defaultCurrentPage);
  if (tmp$4) {
    tmp.defaultCurrentPage = tmp$4[0];
  }
  if (onCurrentPageChange) {
    tmp.onCurrentPageChange = onCurrentPageChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.PagingState, tmp, children);
}

var PagingState = /* module */[/* make */make$36];

function make$37(expandedRowIds, defaultExpandedRowIds, onExpandedRowIdsChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), expandedRowIds);
  if (tmp$1) {
    tmp.expandedRowIds = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultExpandedRowIds);
  if (tmp$2) {
    tmp.defaultExpandedRowIds = tmp$2[0];
  }
  if (onExpandedRowIdsChange) {
    tmp.onExpandedRowIdsChange = onExpandedRowIdsChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.RowDetailState, tmp, children);
}

var RowDetailState = /* module */[/* make */make$37];

function make$38(prim, _) {
  var tmp = { };
  if (prim) {
    tmp.searchPlaceholder = prim[0];
  }
  return tmp;
}

function unwrap$18(obj) {
  if (obj) {
    var unwrappedMap = { };
    var match = obj[0].searchPlaceholder;
    if (match !== undefined) {
      unwrappedMap["searchPlaceholder"] = match;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$3 = /* module */[
  /* make */make$38,
  /* unwrap */unwrap$18
];

function make$39(inputComponent, messages, children) {
  var tmp = { };
  if (inputComponent) {
    tmp.inputComponent = inputComponent[0];
  }
  var tmp$1 = unwrap$18(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SearchPanel, tmp, children);
}

var SearchPanel = /* module */[
  /* Messages */Messages$3,
  /* make */make$39
];

function make$40(value, defaultValue, onValueChange, children) {
  var tmp = { };
  if (value) {
    tmp.value = value[0];
  }
  if (defaultValue) {
    tmp.defaultValue = defaultValue[0];
  }
  if (onValueChange) {
    tmp.onValueChange = onValueChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SearchState, tmp, children);
}

var SearchState = /* module */[/* make */make$40];

function make$41(selection, defaultSelection, onSelectionChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), selection);
  if (tmp$1) {
    tmp.selection = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultSelection);
  if (tmp$2) {
    tmp.defaultSelection = tmp$2[0];
  }
  if (onSelectionChange) {
    tmp.onSelectionChange = onSelectionChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SelectionState, tmp, children);
}

var SelectionState = /* module */[/* make */make$41];

var jsMapperConstantArray$2 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function directionToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$2);
}

function directionFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$2, param);
}

function make$42(prim, prim$1) {
  return {
          columnName: prim,
          direction: prim$1
        };
}

function unwrap$19(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var param = obj.direction;
  unwrappedMap["direction"] = Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$2);
  return unwrappedMap;
}

var Sorting = /* module */[
  /* make */make$42,
  /* unwrap */unwrap$19
];

function make$43(prim, prim$1) {
  return {
          columnName: prim,
          direction: prim$1
        };
}

function unwrap$20(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var param = obj.direction;
  unwrappedMap["direction"] = Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$2);
  return unwrappedMap;
}

var DefaultSorting = /* module */[
  /* make */make$43,
  /* unwrap */unwrap$20
];

function make$44(prim, prim$1) {
  return {
          columnName: prim,
          sortingEnabled: prim$1
        };
}

function unwrap$21(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["sortingEnabled"] = obj.sortingEnabled;
  return unwrappedMap;
}

var ColumnExtensions$6 = /* module */[
  /* make */make$44,
  /* unwrap */unwrap$21
];

function make$45(sorting, defaultSorting, onSortingChange, columnExtensions, columnSortingEnabled, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$19);
        }), sorting);
  if (tmp$1) {
    tmp.sorting = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$20);
        }), defaultSorting);
  if (tmp$2) {
    tmp.defaultSorting = tmp$2[0];
  }
  if (onSortingChange) {
    tmp.onSortingChange = onSortingChange[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(unwrap$21);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  if (columnSortingEnabled) {
    tmp.columnSortingEnabled = columnSortingEnabled[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SortingState, tmp, children);
}

var SortingState = /* module */[
  /* directionToJs */directionToJs,
  /* directionFromJs */directionFromJs,
  /* Sorting */Sorting,
  /* DefaultSorting */DefaultSorting,
  /* ColumnExtensions */ColumnExtensions$6,
  /* make */make$45
];

function make$46(headerRows, bodyRows, columns, minWidth, containerComponent, tableComponent, headComponent, bodyComponent, rowComponent, cellComponent, getCellColSpan, children) {
  var tmp = {
    bodyRows: bodyRows,
    columns: columns,
    minWidth: unwrapValue(minWidth),
    containerComponent: containerComponent,
    tableComponent: tableComponent,
    bodyComponent: bodyComponent,
    rowComponent: rowComponent,
    cellComponent: cellComponent,
    getCellColSpan: getCellColSpan
  };
  if (headerRows) {
    tmp.headerRows = headerRows[0];
  }
  if (headComponent) {
    tmp.headComponent = headComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.StaticTableLayout, tmp, children);
}

var StaticTableLayout = /* module */[/* make */make$46];

var jsMapperConstantArray$3 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$3);
}

function alignFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$3, param);
}

function make$47(columnBands, cellComponent, rowComponent, bandedHeaderCellComponent, invisibleCellComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), columnBands);
  if (tmp$1) {
    tmp.columnBands = tmp$1[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (bandedHeaderCellComponent) {
    tmp.bandedHeaderCellComponent = bandedHeaderCellComponent[0];
  }
  if (invisibleCellComponent) {
    tmp.invisibleCellComponent = invisibleCellComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableBandHeader, tmp, children);
}

var TableBandHeader = /* module */[
  /* alignToJs */alignToJs,
  /* alignFromJs */alignFromJs,
  /* make */make$47
];

function make$48(order, defaultOrder, onOrderChange, tableContainerComponent, rowComponent, cellComponent, children) {
  var tmp = { };
  if (order) {
    tmp.order = order[0];
  }
  if (defaultOrder) {
    tmp.defaultOrder = defaultOrder[0];
  }
  if (onOrderChange) {
    tmp.onOrderChange = onOrderChange[0];
  }
  if (tableContainerComponent) {
    tmp.tableContainerComponent = tableContainerComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableColumnReordering, tmp, children);
}

var TableColumnReordering = /* module */[/* make */make$48];

function make$49(prim, prim$1) {
  return {
          columnName: prim,
          width: prim$1
        };
}

function unwrap$22(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["width"] = unwrapValue(obj.width);
  return unwrappedMap;
}

var DefaultColumnWidths = /* module */[
  /* make */make$49,
  /* unwrap */unwrap$22
];

function make$50(prim, prim$1) {
  return {
          columnName: prim,
          width: prim$1
        };
}

function unwrap$23(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["width"] = unwrapValue(obj.width);
  return unwrappedMap;
}

var ColumnWidths = /* module */[
  /* make */make$50,
  /* unwrap */unwrap$23
];

function make$51(prim, prim$1) {
  return {
          columnName: prim,
          width: prim$1
        };
}

function unwrap$24(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["width"] = unwrapValue(obj.width);
  return unwrappedMap;
}

var NextColumnWidths = /* module */[
  /* make */make$51,
  /* unwrap */unwrap$24
];

function make$52(defaultColumnWidths, columnWidths, onColumnWidthsChange, minColumnWidth, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$22);
        }), defaultColumnWidths);
  if (tmp$1) {
    tmp.defaultColumnWidths = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$23);
        }), columnWidths);
  if (tmp$2) {
    tmp.columnWidths = tmp$2[0];
  }
  if (onColumnWidthsChange) {
    tmp.onColumnWidthsChange = onColumnWidthsChange[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, minColumnWidth);
  if (tmp$3) {
    tmp.minColumnWidth = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableColumnResizing, tmp, children);
}

var TableColumnResizing = /* module */[
  /* DefaultColumnWidths */DefaultColumnWidths,
  /* ColumnWidths */ColumnWidths,
  /* NextColumnWidths */NextColumnWidths,
  /* make */make$52
];

function make$53(prim, _) {
  var tmp = { };
  if (prim) {
    tmp.noColumns = prim[0];
  }
  return tmp;
}

function unwrap$25(obj) {
  if (obj) {
    var unwrappedMap = { };
    var match = obj[0].noColumns;
    if (match !== undefined) {
      unwrappedMap["noColumns"] = match;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$4 = /* module */[
  /* make */make$53,
  /* unwrap */unwrap$25
];

function make$54(prim, prim$1) {
  return {
          columnName: prim,
          togglingEnabled: prim$1
        };
}

function unwrap$26(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  unwrappedMap["togglingEnabled"] = obj.togglingEnabled;
  return unwrappedMap;
}

var ColumnExtensions$7 = /* module */[
  /* make */make$54,
  /* unwrap */unwrap$26
];

function make$55(hiddenColumnNames, defaultHiddenColumnNames, emptyMessageComponent, onHiddenColumnNamesChange, messages, columnExtensions, columnTogglingEnabled, children) {
  var tmp = { };
  if (hiddenColumnNames) {
    tmp.hiddenColumnNames = hiddenColumnNames[0];
  }
  if (defaultHiddenColumnNames) {
    tmp.defaultHiddenColumnNames = defaultHiddenColumnNames[0];
  }
  if (emptyMessageComponent) {
    tmp.emptyMessageComponent = emptyMessageComponent[0];
  }
  if (onHiddenColumnNamesChange) {
    tmp.onHiddenColumnNamesChange = onHiddenColumnNamesChange[0];
  }
  var tmp$1 = unwrap$25(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$26);
        }), columnExtensions);
  if (tmp$2) {
    tmp.columnExtensions = tmp$2[0];
  }
  if (columnTogglingEnabled) {
    tmp.columnTogglingEnabled = columnTogglingEnabled[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableColumnVisibility, tmp, children);
}

var TableColumnVisibility = /* module */[
  /* Messages */Messages$4,
  /* ColumnExtensions */ColumnExtensions$7,
  /* make */make$55
];

var jsMapperConstantArray$4 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$1(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$4);
}

function alignFromJs$1(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$4, param);
}

var jsMapperConstantArray$5 = /* array */[
  /* tuple */[
    -322412134,
    "cancel"
  ],
  /* tuple */[
    -71113705,
    "commit"
  ],
  /* tuple */[
    3254785,
    "add"
  ],
  /* tuple */[
    527250507,
    "delete"
  ],
  /* tuple */[
    770176554,
    "edit"
  ]
];

function idToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$5);
}

function idFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$5, param);
}

function make$56(prim, prim$1, prim$2, prim$3, prim$4, _) {
  var tmp = { };
  if (prim) {
    tmp.addCommand = prim[0];
  }
  if (prim$1) {
    tmp.editCommand = prim$1[0];
  }
  if (prim$2) {
    tmp.deleteCommand = prim$2[0];
  }
  if (prim$3) {
    tmp.commitCommand = prim$3[0];
  }
  if (prim$4) {
    tmp.cancelCommand = prim$4[0];
  }
  return tmp;
}

function unwrap$27(obj) {
  if (obj) {
    var obj$1 = obj[0];
    var unwrappedMap = { };
    var match = obj$1.addCommand;
    if (match !== undefined) {
      unwrappedMap["addCommand"] = match;
    }
    var match$1 = obj$1.editCommand;
    if (match$1 !== undefined) {
      unwrappedMap["editCommand"] = match$1;
    }
    var match$2 = obj$1.deleteCommand;
    if (match$2 !== undefined) {
      unwrappedMap["deleteCommand"] = match$2;
    }
    var match$3 = obj$1.commitCommand;
    if (match$3 !== undefined) {
      unwrappedMap["commitCommand"] = match$3;
    }
    var match$4 = obj$1.cancelCommand;
    if (match$4 !== undefined) {
      unwrappedMap["cancelCommand"] = match$4;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$5 = /* module */[
  /* make */make$56,
  /* unwrap */unwrap$27
];

function make$57(cellComponent, headerCellComponent, commandComponent, showAddCommand, showEditCommand, showDeleteCommand, width, messages, children) {
  var tmp = { };
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (headerCellComponent) {
    tmp.headerCellComponent = headerCellComponent[0];
  }
  if (commandComponent) {
    tmp.commandComponent = commandComponent[0];
  }
  if (showAddCommand) {
    tmp.showAddCommand = showAddCommand[0];
  }
  if (showEditCommand) {
    tmp.showEditCommand = showEditCommand[0];
  }
  if (showDeleteCommand) {
    tmp.showDeleteCommand = showDeleteCommand[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, width);
  if (tmp$1) {
    tmp.width = tmp$1[0];
  }
  var tmp$2 = unwrap$27(messages);
  if (tmp$2) {
    tmp.messages = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableEditColumn, tmp, children);
}

var TableEditColumn = /* module */[
  /* alignToJs */alignToJs$1,
  /* alignFromJs */alignFromJs$1,
  /* idToJs */idToJs,
  /* idFromJs */idFromJs,
  /* Messages */Messages$5,
  /* make */make$57
];

var jsMapperConstantArray$6 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$2(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$6);
}

function alignFromJs$2(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$6, param);
}

function make$58(rowHeight, cellComponent, rowComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, rowHeight);
  if (tmp$1) {
    tmp.rowHeight = tmp$1[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableEditRow, tmp, children);
}

var TableEditRow = /* module */[
  /* alignToJs */alignToJs$2,
  /* alignFromJs */alignFromJs$2,
  /* make */make$58
];

function make$59(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9, prim$10, _) {
  var tmp = { };
  if (prim) {
    tmp.filterPlaceholder = prim[0];
  }
  if (prim$1) {
    tmp.contains = prim$1[0];
  }
  if (prim$2) {
    tmp.notContains = prim$2[0];
  }
  if (prim$3) {
    tmp.startsWith = prim$3[0];
  }
  if (prim$4) {
    tmp.endsWith = prim$4[0];
  }
  if (prim$5) {
    tmp.equal = prim$5[0];
  }
  if (prim$6) {
    tmp.notEqual = prim$6[0];
  }
  if (prim$7) {
    tmp.greaterThan = prim$7[0];
  }
  if (prim$8) {
    tmp.greaterThanOrEqual = prim$8[0];
  }
  if (prim$9) {
    tmp.lessThan = prim$9[0];
  }
  if (prim$10) {
    tmp.lessThanOrEqual = prim$10[0];
  }
  return tmp;
}

function unwrap$28(obj) {
  if (obj) {
    var obj$1 = obj[0];
    var unwrappedMap = { };
    var match = obj$1.filterPlaceholder;
    if (match !== undefined) {
      unwrappedMap["filterPlaceholder"] = match;
    }
    var match$1 = obj$1.contains;
    if (match$1 !== undefined) {
      unwrappedMap["contains"] = match$1;
    }
    var match$2 = obj$1.notContains;
    if (match$2 !== undefined) {
      unwrappedMap["notContains"] = match$2;
    }
    var match$3 = obj$1.startsWith;
    if (match$3 !== undefined) {
      unwrappedMap["startsWith"] = match$3;
    }
    var match$4 = obj$1.endsWith;
    if (match$4 !== undefined) {
      unwrappedMap["endsWith"] = match$4;
    }
    var match$5 = obj$1.equal;
    if (match$5 !== undefined) {
      unwrappedMap["equal"] = match$5;
    }
    var match$6 = obj$1.notEqual;
    if (match$6 !== undefined) {
      unwrappedMap["notEqual"] = match$6;
    }
    var match$7 = obj$1.greaterThan;
    if (match$7 !== undefined) {
      unwrappedMap["greaterThan"] = match$7;
    }
    var match$8 = obj$1.greaterThanOrEqual;
    if (match$8 !== undefined) {
      unwrappedMap["greaterThanOrEqual"] = match$8;
    }
    var match$9 = obj$1.lessThan;
    if (match$9 !== undefined) {
      unwrappedMap["lessThan"] = match$9;
    }
    var match$10 = obj$1.lessThanOrEqual;
    if (match$10 !== undefined) {
      unwrappedMap["lessThanOrEqual"] = match$10;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$6 = /* module */[
  /* make */make$59,
  /* unwrap */unwrap$28
];

var jsMapperConstantArray$7 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$3(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$7);
}

function alignFromJs$3(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$7, param);
}

function make$60(rowHeight, showFilterSelector, messages, cellComponent, rowComponent, filterSelectorComponent, iconComponent, editorComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, rowHeight);
  if (tmp$1) {
    tmp.rowHeight = tmp$1[0];
  }
  if (showFilterSelector) {
    tmp.showFilterSelector = showFilterSelector[0];
  }
  var tmp$2 = unwrap$28(messages);
  if (tmp$2) {
    tmp.messages = tmp$2[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (filterSelectorComponent) {
    tmp.filterSelectorComponent = filterSelectorComponent[0];
  }
  if (iconComponent) {
    tmp.iconComponent = iconComponent[0];
  }
  if (editorComponent) {
    tmp.editorComponent = editorComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableFilterRow, tmp, children);
}

var TableFilterRow = /* module */[
  /* Messages */Messages$6,
  /* alignToJs */alignToJs$3,
  /* alignFromJs */alignFromJs$3,
  /* make */make$60
];

var jsMapperConstantArray$8 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$4(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$8);
}

function alignFromJs$4(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$8, param);
}

function make$61(prim, prim$1, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.showWhenGrouped = prim$1[0];
  }
  return tmp;
}

function unwrap$29(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = obj.showWhenGrouped;
  if (match !== undefined) {
    unwrappedMap["showWhenGrouped"] = match;
  }
  return unwrappedMap;
}

var ColumnExtensions$8 = /* module */[
  /* make */make$61,
  /* unwrap */unwrap$29
];

function make$62(cellComponent, rowComponent, indentCellComponent, indentColumnWidth, showColumnsWhenGrouped, columnExtensions, children) {
  var tmp = { };
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (indentCellComponent) {
    tmp.indentCellComponent = indentCellComponent[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, indentColumnWidth);
  if (tmp$1) {
    tmp.indentColumnWidth = tmp$1[0];
  }
  if (showColumnsWhenGrouped) {
    tmp.showColumnsWhenGrouped = showColumnsWhenGrouped[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrap$29);
        }), columnExtensions);
  if (tmp$2) {
    tmp.columnExtensions = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableGroupRow, tmp, children);
}

var TableGroupRow = /* module */[
  /* alignToJs */alignToJs$4,
  /* alignFromJs */alignFromJs$4,
  /* ColumnExtensions */ColumnExtensions$8,
  /* make */make$62
];

var jsMapperConstantArray$9 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$5(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$9);
}

function alignFromJs$5(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$9, param);
}

var jsMapperConstantArray$10 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function sortingDirectionToJs$1(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$10);
}

function sortingDirectionFromJs$1(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$10, param);
}

var jsMapperConstantArray$11 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function direction_enumToJs$1(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$11);
}

function direction_enumFromJs$1(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$11, param);
}

function make$63(prim, _) {
  var tmp = { };
  if (prim) {
    tmp.sortingHint = prim[0];
  }
  return tmp;
}

function unwrap$30(obj) {
  if (obj) {
    var unwrappedMap = { };
    var match = obj[0].sortingHint;
    if (match !== undefined) {
      unwrappedMap["sortingHint"] = match;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$7 = /* module */[
  /* make */make$63,
  /* unwrap */unwrap$30
];

function make$64(showSortingControls, showGroupingControls, cellComponent, rowComponent, messages, children) {
  var tmp = { };
  if (showSortingControls) {
    tmp.showSortingControls = showSortingControls[0];
  }
  if (showGroupingControls) {
    tmp.showGroupingControls = showGroupingControls[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  var tmp$1 = unwrap$30(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableHeaderRow, tmp, children);
}

var TableHeaderRow = /* module */[
  /* alignToJs */alignToJs$5,
  /* alignFromJs */alignFromJs$5,
  /* sortingDirectionToJs */sortingDirectionToJs$1,
  /* sortingDirectionFromJs */sortingDirectionFromJs$1,
  /* direction_enumToJs */direction_enumToJs$1,
  /* direction_enumFromJs */direction_enumFromJs$1,
  /* Messages */Messages$7,
  /* make */make$64
];

function make$65(columns, minColumnWidth, layoutComponent, children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.TableLayout, {
              columns: columns,
              minColumnWidth: unwrapValue(minColumnWidth),
              layoutComponent: layoutComponent
            }, children);
}

var TableLayout = /* module */[/* make */make$65];

var jsMapperConstantArray$12 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$6(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$12);
}

function alignFromJs$6(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$12, param);
}

function make$66(contentComponent, toggleCellComponent, cellComponent, rowComponent, toggleColumnWidth, rowHeight, children) {
  var tmp = { };
  if (contentComponent) {
    tmp.contentComponent = contentComponent[0];
  }
  if (toggleCellComponent) {
    tmp.toggleCellComponent = toggleCellComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, toggleColumnWidth);
  if (tmp$1) {
    tmp.toggleColumnWidth = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, rowHeight);
  if (tmp$2) {
    tmp.rowHeight = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableRowDetail, tmp, children);
}

var TableRowDetail = /* module */[
  /* alignToJs */alignToJs$6,
  /* alignFromJs */alignFromJs$6,
  /* make */make$66
];

var jsMapperConstantArray$13 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$7(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$13);
}

function alignFromJs$7(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$13, param);
}

function make$67(headerCellComponent, cellComponent, rowComponent, highlightRow, selectByRowClick, showSelectAll, showSelectionColumn, selectionColumnWidth, children) {
  var tmp = { };
  if (headerCellComponent) {
    tmp.headerCellComponent = headerCellComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (highlightRow) {
    tmp.highlightRow = highlightRow[0];
  }
  if (selectByRowClick) {
    tmp.selectByRowClick = selectByRowClick[0];
  }
  if (showSelectAll) {
    tmp.showSelectAll = showSelectAll[0];
  }
  if (showSelectionColumn) {
    tmp.showSelectionColumn = showSelectionColumn[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, selectionColumnWidth);
  if (tmp$1) {
    tmp.selectionColumnWidth = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableSelection, tmp, children);
}

var TableSelection = /* module */[
  /* alignToJs */alignToJs$7,
  /* alignFromJs */alignFromJs$7,
  /* make */make$67
];

var jsMapperConstantArray$14 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$8(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$14);
}

function alignFromJs$8(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$14, param);
}

function make$68(for_, showSelectionControls, showSelectAll, cellComponent, indentComponent, expandButtonComponent, checkboxComponent, contentComponent, children) {
  var tmp = { };
  if (for_) {
    tmp.for_ = for_[0];
  }
  if (showSelectionControls) {
    tmp.showSelectionControls = showSelectionControls[0];
  }
  if (showSelectAll) {
    tmp.showSelectAll = showSelectAll[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (indentComponent) {
    tmp.indentComponent = indentComponent[0];
  }
  if (expandButtonComponent) {
    tmp.expandButtonComponent = expandButtonComponent[0];
  }
  if (checkboxComponent) {
    tmp.checkboxComponent = checkboxComponent[0];
  }
  if (contentComponent) {
    tmp.contentComponent = contentComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableTreeColumn, tmp, children);
}

var TableTreeColumn = /* module */[
  /* alignToJs */alignToJs$8,
  /* alignFromJs */alignFromJs$8,
  /* make */make$68
];

var jsMapperConstantArray$15 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$9(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$15);
}

function alignFromJs$9(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$15, param);
}

function make$69(prim, prim$1, prim$2, prim$3, _) {
  var tmp = {
    columnName: prim
  };
  if (prim$1) {
    tmp.width = prim$1[0];
  }
  if (prim$2) {
    tmp.align = prim$2[0];
  }
  if (prim$3) {
    tmp.wordWrapEnabled = prim$3[0];
  }
  return tmp;
}

function unwrap$31(obj) {
  var unwrappedMap = { };
  unwrappedMap["columnName"] = obj.columnName;
  var match = Js_option.map(unwrapValue, Js_primitive.undefined_to_opt(obj.width));
  if (match) {
    unwrappedMap["width"] = match[0];
  }
  var match$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$15);
        }), Js_primitive.undefined_to_opt(obj.align));
  if (match$1) {
    unwrappedMap["align"] = match$1[0];
  }
  var match$2 = obj.wordWrapEnabled;
  if (match$2 !== undefined) {
    unwrappedMap["wordWrapEnabled"] = match$2;
  }
  return unwrappedMap;
}

var ColumnExtensions$9 = /* module */[
  /* make */make$69,
  /* unwrap */unwrap$31
];

function make$70(prim, _) {
  var tmp = { };
  if (prim) {
    tmp.noData = prim[0];
  }
  return tmp;
}

function unwrap$32(obj) {
  if (obj) {
    var unwrappedMap = { };
    var match = obj[0].noData;
    if (match !== undefined) {
      unwrappedMap["noData"] = match;
    }
    return /* Some */[unwrappedMap];
  } else {
    return /* None */0;
  }
}

var Messages$8 = /* module */[
  /* make */make$70,
  /* unwrap */unwrap$32
];

function make$71(layoutComponent, tableComponent, headComponent, bodyComponent, containerComponent, cellComponent, rowComponent, noDataCellComponent, noDataRowComponent, stubRowComponent, stubCellComponent, stubHeaderCellComponent, columnExtensions, messages, children) {
  var tmp = { };
  if (layoutComponent) {
    tmp.layoutComponent = layoutComponent[0];
  }
  if (tableComponent) {
    tmp.tableComponent = tableComponent[0];
  }
  if (headComponent) {
    tmp.headComponent = headComponent[0];
  }
  if (bodyComponent) {
    tmp.bodyComponent = bodyComponent[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (noDataCellComponent) {
    tmp.noDataCellComponent = noDataCellComponent[0];
  }
  if (noDataRowComponent) {
    tmp.noDataRowComponent = noDataRowComponent[0];
  }
  if (stubRowComponent) {
    tmp.stubRowComponent = stubRowComponent[0];
  }
  if (stubCellComponent) {
    tmp.stubCellComponent = stubCellComponent[0];
  }
  if (stubHeaderCellComponent) {
    tmp.stubHeaderCellComponent = stubHeaderCellComponent[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrap$31);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  var tmp$2 = unwrap$32(messages);
  if (tmp$2) {
    tmp.messages = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.Table, tmp, children);
}

var Table = /* module */[
  /* alignToJs */alignToJs$9,
  /* alignFromJs */alignFromJs$9,
  /* ColumnExtensions */ColumnExtensions$9,
  /* Messages */Messages$8,
  /* make */make$71
];

function make$72(rootComponent, flexibleSpaceComponent, children) {
  var tmp = { };
  if (rootComponent) {
    tmp.rootComponent = rootComponent[0];
  }
  if (flexibleSpaceComponent) {
    tmp.flexibleSpaceComponent = flexibleSpaceComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.Toolbar, tmp, children);
}

var Toolbar = /* module */[/* make */make$72];

function make$73(expandedRowIds, defaultExpandedRowIds, onExpandedRowIdsChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), expandedRowIds);
  if (tmp$1) {
    tmp.expandedRowIds = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultExpandedRowIds);
  if (tmp$2) {
    tmp.defaultExpandedRowIds = tmp$2[0];
  }
  if (onExpandedRowIdsChange) {
    tmp.onExpandedRowIdsChange = onExpandedRowIdsChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TreeDataState, tmp, children);
}

var TreeDataState = /* module */[/* make */make$73];

function make$74(minWidth, minColumnWidth, height, headerRows, bodyRows, columns, cellComponent, rowComponent, bodyComponent, headComponent, tableComponent, headTableComponent, containerComponent, estimatedRowHeight, getCellColSpan, children) {
  var tmp = {
    minWidth: unwrapValue(minWidth),
    minColumnWidth: unwrapValue(minColumnWidth),
    height: unwrapValue(height),
    bodyRows: bodyRows,
    columns: columns,
    cellComponent: cellComponent,
    rowComponent: rowComponent,
    bodyComponent: bodyComponent,
    tableComponent: tableComponent,
    containerComponent: containerComponent,
    estimatedRowHeight: unwrapValue(estimatedRowHeight),
    getCellColSpan: getCellColSpan
  };
  if (headerRows) {
    tmp.headerRows = headerRows[0];
  }
  if (headComponent) {
    tmp.headComponent = headComponent[0];
  }
  if (headTableComponent) {
    tmp.headTableComponent = headTableComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.VirtualTableLayout, tmp, children);
}

var VirtualTableLayout = /* module */[/* make */make$74];

exports.unwrapValue = unwrapValue;
exports.ColumnChooser = ColumnChooser;
exports.CustomGrouping = CustomGrouping;
exports.CustomPaging = CustomPaging;
exports.CustomTreeData = CustomTreeData;
exports.DataTypeProvider = DataTypeProvider;
exports.DragDropProvider = DragDropProvider;
exports.EditingState = EditingState;
exports.FilteringState = FilteringState;
exports.Grid = Grid;
exports.GroupPanelLayout = GroupPanelLayout;
exports.GroupingPanel = GroupingPanel;
exports.GroupingState = GroupingState;
exports.IntegratedFiltering = IntegratedFiltering;
exports.IntegratedGrouping = IntegratedGrouping;
exports.IntegratedPaging = IntegratedPaging;
exports.IntegratedSelection = IntegratedSelection;
exports.IntegratedSorting = IntegratedSorting;
exports.PagingPanel = PagingPanel;
exports.PagingState = PagingState;
exports.RowDetailState = RowDetailState;
exports.SearchPanel = SearchPanel;
exports.SearchState = SearchState;
exports.SelectionState = SelectionState;
exports.SortingState = SortingState;
exports.StaticTableLayout = StaticTableLayout;
exports.TableBandHeader = TableBandHeader;
exports.TableColumnReordering = TableColumnReordering;
exports.TableColumnResizing = TableColumnResizing;
exports.TableColumnVisibility = TableColumnVisibility;
exports.TableEditColumn = TableEditColumn;
exports.TableEditRow = TableEditRow;
exports.TableFilterRow = TableFilterRow;
exports.TableGroupRow = TableGroupRow;
exports.TableHeaderRow = TableHeaderRow;
exports.TableLayout = TableLayout;
exports.TableRowDetail = TableRowDetail;
exports.TableSelection = TableSelection;
exports.TableTreeColumn = TableTreeColumn;
exports.Table = Table;
exports.Toolbar = Toolbar;
exports.TreeDataState = TreeDataState;
exports.VirtualTableLayout = VirtualTableLayout;
/* ReasonReact Not a pure module */
