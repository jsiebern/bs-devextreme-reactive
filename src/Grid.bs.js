// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var DxReactGrid = require("@devexpress/dx-react-grid");

function unwrapValue(param) {
  var variant = param[0];
  if (variant >= 758940238) {
    if (variant !== 770676513) {
      if (variant >= 1034997432) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "Grid.re",
                21,
                21
              ]
            ];
      } else {
        return param[1];
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "Grid.re",
              20,
              16
            ]
          ];
    }
  } else if (variant !== -908856609) {
    if (variant >= 737456202) {
      return Js_boolean.to_js_boolean(param[1]);
    } else {
      return param[1];
    }
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "Grid.re",
            19,
            18
          ]
        ];
  }
}

function convertMessages(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["showColumnChooser"] = madeObj[0]["showColumnChooser"];
  }
  return /* Some */[returnObj];
}

function make(overlayComponent, containerComponent, itemComponent, toggleButtonComponent, messages, children) {
  var tmp = { };
  if (overlayComponent) {
    tmp.overlayComponent = overlayComponent[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (itemComponent) {
    tmp.itemComponent = itemComponent[0];
  }
  if (toggleButtonComponent) {
    tmp.toggleButtonComponent = toggleButtonComponent[0];
  }
  var tmp$1 = convertMessages(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.ColumnChooser, tmp, children);
}

var ColumnChooser = /* module */[
  /* convertMessages */convertMessages,
  /* make */make
];

function convertGrouping(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  return returnObj;
}

function make$1(getChildGroups, grouping, expandedGroups, children) {
  var tmp = {
    getChildGroups: getChildGroups
  };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertGrouping);
        }), grouping);
  if (tmp$1) {
    tmp.grouping = tmp$1[0];
  }
  if (expandedGroups) {
    tmp.expandedGroups = expandedGroups[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.CustomGrouping, tmp, children);
}

var CustomGrouping = /* module */[
  /* convertGrouping */convertGrouping,
  /* make */make$1
];

function make$2(totalCount, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, totalCount);
  if (tmp$1) {
    tmp.totalCount = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.CustomPaging, tmp, children);
}

var CustomPaging = /* module */[/* make */make$2];

function make$3(_for, formatterComponent, editorComponent, children) {
  var tmp = {
    for: _for
  };
  if (formatterComponent) {
    tmp.formatterComponent = formatterComponent[0];
  }
  if (editorComponent) {
    tmp.editorComponent = editorComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.DataTypeProvider, tmp, children);
}

var DataTypeProvider = /* module */[/* make */make$3];

function make$4(containerComponent, columnComponent, children) {
  var tmp = { };
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (columnComponent) {
    tmp.columnComponent = columnComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.DragDropProvider, tmp, children);
}

var DragDropProvider = /* module */[/* make */make$4];

function convertColumnExtensions(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["editingEnabled"] = Js_option.map(Js_boolean.to_js_boolean, madeObj["editingEnabled"]);
  returnObj["createRowChange"] = madeObj["createRowChange"];
  return returnObj;
}

function convertChanges(madeObj) {
  var returnObj = { };
  returnObj["added"] = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), madeObj["added"]);
  returnObj["changed"] = madeObj["changed"];
  returnObj["deleted"] = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), madeObj["deleted"]);
  return returnObj;
}

function make$5(createRowChange, columnEditingEnabled, columnExtensions, editingRowIds, defaultEditingRowIds, onEditingRowIdsChange, addedRows, defaultAddedRows, onAddedRowsChange, rowChanges, defaultRowChanges, onRowChangesChange, deletedRowIds, defaultDeletedRowIds, onDeletedRowIdsChange, onCommitChanges, children) {
  var tmp = {
    onCommitChanges: onCommitChanges
  };
  if (createRowChange) {
    tmp.createRowChange = createRowChange[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, columnEditingEnabled);
  if (tmp$1) {
    tmp.columnEditingEnabled = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions);
        }), columnExtensions);
  if (tmp$2) {
    tmp.columnExtensions = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), editingRowIds);
  if (tmp$3) {
    tmp.editingRowIds = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultEditingRowIds);
  if (tmp$4) {
    tmp.defaultEditingRowIds = tmp$4[0];
  }
  if (onEditingRowIdsChange) {
    tmp.onEditingRowIdsChange = onEditingRowIdsChange[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), addedRows);
  if (tmp$5) {
    tmp.addedRows = tmp$5[0];
  }
  var tmp$6 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), defaultAddedRows);
  if (tmp$6) {
    tmp.defaultAddedRows = tmp$6[0];
  }
  if (onAddedRowsChange) {
    tmp.onAddedRowsChange = onAddedRowsChange[0];
  }
  if (rowChanges) {
    tmp.rowChanges = rowChanges[0];
  }
  if (defaultRowChanges) {
    tmp.defaultRowChanges = defaultRowChanges[0];
  }
  if (onRowChangesChange) {
    tmp.onRowChangesChange = onRowChangesChange[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), deletedRowIds);
  if (tmp$7) {
    tmp.deletedRowIds = tmp$7[0];
  }
  var tmp$8 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultDeletedRowIds);
  if (tmp$8) {
    tmp.defaultDeletedRowIds = tmp$8[0];
  }
  if (onDeletedRowIdsChange) {
    tmp.onDeletedRowIdsChange = onDeletedRowIdsChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.EditingState, tmp, children);
}

var EditingState = /* module */[
  /* convertColumnExtensions */convertColumnExtensions,
  /* convertChanges */convertChanges,
  /* make */make$5
];

function convertFilters(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["value"] = madeObj["value"];
  return returnObj;
}

function convertDefaultFilters(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["value"] = madeObj["value"];
  return returnObj;
}

function convertColumnExtensions$1(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["filteringEnabled"] = Js_boolean.to_js_boolean(madeObj["filteringEnabled"]);
  return returnObj;
}

function make$6(filters, defaultFilters, onFiltersChange, columnExtensions, columnFilteringEnabled, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertFilters);
        }), filters);
  if (tmp$1) {
    tmp.filters = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertDefaultFilters);
        }), defaultFilters);
  if (tmp$2) {
    tmp.defaultFilters = tmp$2[0];
  }
  if (onFiltersChange) {
    tmp.onFiltersChange = onFiltersChange[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$1);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, columnFilteringEnabled);
  if (tmp$4) {
    tmp.columnFilteringEnabled = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.FilteringState, tmp, children);
}

var FilteringState = /* module */[
  /* convertFilters */convertFilters,
  /* convertDefaultFilters */convertDefaultFilters,
  /* convertColumnExtensions */convertColumnExtensions$1,
  /* make */make$6
];

function convertColumns(madeObj) {
  var returnObj = { };
  returnObj["name"] = madeObj["name"];
  returnObj["title"] = madeObj["title"];
  returnObj["getCellValue"] = madeObj["getCellValue"];
  return returnObj;
}

function make$7(rows, getRowId, getCellValue, columns, rootComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map((function (item) {
                        return item;
                      }));
        }), rows);
  if (tmp$1) {
    tmp.rows = tmp$1[0];
  }
  if (getRowId) {
    tmp.getRowId = getRowId[0];
  }
  if (getCellValue) {
    tmp.getCellValue = getCellValue[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertColumns);
        }), columns);
  if (tmp$2) {
    tmp.columns = tmp$2[0];
  }
  if (rootComponent) {
    tmp.rootComponent = rootComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.Grid, tmp, children);
}

var Grid = /* module */[
  /* convertColumns */convertColumns,
  /* make */make$7
];

function convertItems(madeObj) {
  var returnObj = { };
  returnObj["column"] = madeObj["column"];
  returnObj["draft"] = Js_option.map(Js_boolean.to_js_boolean, madeObj["draft"]);
  return returnObj;
}

function make$8(items, onGroup, itemComponent, containerComponent, emptyMessageComponent, draggingEnabled, isColumnGroupingEnabled, onGroupDraft, onGroupDraftCancel, children) {
  var tmp = {
    items: items.map(convertItems),
    itemComponent: itemComponent,
    containerComponent: containerComponent,
    emptyMessageComponent: emptyMessageComponent
  };
  if (onGroup) {
    tmp.onGroup = onGroup[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, draggingEnabled);
  if (tmp$1) {
    tmp.draggingEnabled = tmp$1[0];
  }
  if (isColumnGroupingEnabled) {
    tmp.isColumnGroupingEnabled = isColumnGroupingEnabled[0];
  }
  if (onGroupDraft) {
    tmp.onGroupDraft = onGroupDraft[0];
  }
  if (onGroupDraftCancel) {
    tmp.onGroupDraftCancel = onGroupDraftCancel[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.GroupPanelLayout, tmp, children);
}

var GroupPanelLayout = /* module */[
  /* convertItems */convertItems,
  /* make */make$8
];

var jsMapperConstantArray = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function sortingDirectionToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function sortingDirectionFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function r5u9ToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$1);
}

function r5u9FromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$1, param);
}

function convertMessages$1(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["groupByColumn"] = madeObj[0]["groupByColumn"];
  }
  return /* Some */[returnObj];
}

function make$9(showSortingControls, showGroupingControls, layoutComponent, containerComponent, itemComponent, emptyMessageComponent, messages, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, showSortingControls);
  if (tmp$1) {
    tmp.showSortingControls = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, showGroupingControls);
  if (tmp$2) {
    tmp.showGroupingControls = tmp$2[0];
  }
  if (layoutComponent) {
    tmp.layoutComponent = layoutComponent[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (itemComponent) {
    tmp.itemComponent = itemComponent[0];
  }
  if (emptyMessageComponent) {
    tmp.emptyMessageComponent = emptyMessageComponent[0];
  }
  var tmp$3 = convertMessages$1(messages);
  if (tmp$3) {
    tmp.messages = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.GroupingPanel, tmp, children);
}

var GroupingPanel = /* module */[
  /* sortingDirectionToJs */sortingDirectionToJs,
  /* sortingDirectionFromJs */sortingDirectionFromJs,
  /* r5u9ToJs */r5u9ToJs,
  /* r5u9FromJs */r5u9FromJs,
  /* convertMessages */convertMessages$1,
  /* make */make$9
];

function convertGrouping$1(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  return returnObj;
}

function convertDefaultGrouping(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  return returnObj;
}

function convertColumnExtensions$2(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["groupingEnabled"] = Js_boolean.to_js_boolean(madeObj["groupingEnabled"]);
  return returnObj;
}

function make$10(grouping, defaultGrouping, onGroupingChange, expandedGroups, defaultExpandedGroups, onExpandedGroupsChange, columnExtensions, columnGroupingEnabled, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertGrouping$1);
        }), grouping);
  if (tmp$1) {
    tmp.grouping = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertDefaultGrouping);
        }), defaultGrouping);
  if (tmp$2) {
    tmp.defaultGrouping = tmp$2[0];
  }
  if (onGroupingChange) {
    tmp.onGroupingChange = onGroupingChange[0];
  }
  if (expandedGroups) {
    tmp.expandedGroups = expandedGroups[0];
  }
  if (defaultExpandedGroups) {
    tmp.defaultExpandedGroups = defaultExpandedGroups[0];
  }
  if (onExpandedGroupsChange) {
    tmp.onExpandedGroupsChange = onExpandedGroupsChange[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$2);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, columnGroupingEnabled);
  if (tmp$4) {
    tmp.columnGroupingEnabled = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.GroupingState, tmp, children);
}

var GroupingState = /* module */[
  /* convertGrouping */convertGrouping$1,
  /* convertDefaultGrouping */convertDefaultGrouping,
  /* convertColumnExtensions */convertColumnExtensions$2,
  /* make */make$10
];

function convertColumnExtensions$3(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["predicate"] = madeObj["predicate"];
  return returnObj;
}

function make$11(columnExtensions, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$3);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedFiltering, tmp, children);
}

var IntegratedFiltering = /* module */[
  /* convertColumnExtensions */convertColumnExtensions$3,
  /* make */make$11
];

function convertCriteriaReturn(madeObj) {
  var returnObj = { };
  returnObj["key"] = unwrapValue(madeObj["key"]);
  returnObj["value"] = madeObj["value"];
  return returnObj;
}

function convertColumnExtensions$4(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["criteria"] = madeObj["criteria"];
  return returnObj;
}

function make$12(columnExtensions, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$4);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedGrouping, tmp, children);
}

var IntegratedGrouping = /* module */[
  /* convertCriteriaReturn */convertCriteriaReturn,
  /* convertColumnExtensions */convertColumnExtensions$4,
  /* make */make$12
];

function make$13(children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedPaging, { }, children);
}

var IntegratedPaging = /* module */[/* make */make$13];

function make$14(children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedSelection, { }, children);
}

var IntegratedSelection = /* module */[/* make */make$14];

function convertColumnExtensions$5(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["compare"] = madeObj["compare"];
  return returnObj;
}

function make$15(columnExtensions, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$5);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.IntegratedSorting, tmp, children);
}

var IntegratedSorting = /* module */[
  /* convertColumnExtensions */convertColumnExtensions$5,
  /* make */make$15
];

function convertMessages$2(madeObj) {
  var returnObj = { };
  if (madeObj) {
    var madeObj$1 = madeObj[0];
    returnObj["showAll"] = madeObj$1["showAll"];
    returnObj["rowsPerPage"] = madeObj$1["rowsPerPage"];
    returnObj["info"] = madeObj$1["info"];
  }
  return /* Some */[returnObj];
}

function make$16(pageSizes, containerComponent, messages, children) {
  var tmp = { };
  if (pageSizes) {
    tmp.pageSizes = pageSizes[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  var tmp$1 = convertMessages$2(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.PagingPanel, tmp, children);
}

var PagingPanel = /* module */[
  /* convertMessages */convertMessages$2,
  /* make */make$16
];

function make$17(pageSize, defaultPageSize, onPageSizeChange, currentPage, defaultCurrentPage, onCurrentPageChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, pageSize);
  if (tmp$1) {
    tmp.pageSize = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, defaultPageSize);
  if (tmp$2) {
    tmp.defaultPageSize = tmp$2[0];
  }
  if (onPageSizeChange) {
    tmp.onPageSizeChange = onPageSizeChange[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, currentPage);
  if (tmp$3) {
    tmp.currentPage = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, defaultCurrentPage);
  if (tmp$4) {
    tmp.defaultCurrentPage = tmp$4[0];
  }
  if (onCurrentPageChange) {
    tmp.onCurrentPageChange = onCurrentPageChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.PagingState, tmp, children);
}

var PagingState = /* module */[/* make */make$17];

function make$18(expandedRowIds, defaultExpandedRowIds, onExpandedRowIdsChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), expandedRowIds);
  if (tmp$1) {
    tmp.expandedRowIds = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultExpandedRowIds);
  if (tmp$2) {
    tmp.defaultExpandedRowIds = tmp$2[0];
  }
  if (onExpandedRowIdsChange) {
    tmp.onExpandedRowIdsChange = onExpandedRowIdsChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.RowDetailState, tmp, children);
}

var RowDetailState = /* module */[/* make */make$18];

function convertMessages$3(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["searchPlaceholder"] = madeObj[0]["searchPlaceholder"];
  }
  return /* Some */[returnObj];
}

function make$19(inputComponent, messages, children) {
  var tmp = { };
  if (inputComponent) {
    tmp.inputComponent = inputComponent[0];
  }
  var tmp$1 = convertMessages$3(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SearchPanel, tmp, children);
}

var SearchPanel = /* module */[
  /* convertMessages */convertMessages$3,
  /* make */make$19
];

function make$20(value, defaultValue, onValueChange, children) {
  var tmp = { };
  if (value) {
    tmp.value = value[0];
  }
  if (defaultValue) {
    tmp.defaultValue = defaultValue[0];
  }
  if (onValueChange) {
    tmp.onValueChange = onValueChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SearchState, tmp, children);
}

var SearchState = /* module */[/* make */make$20];

function make$21(selection, defaultSelection, onSelectionChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), selection);
  if (tmp$1) {
    tmp.selection = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(unwrapValue);
        }), defaultSelection);
  if (tmp$2) {
    tmp.defaultSelection = tmp$2[0];
  }
  if (onSelectionChange) {
    tmp.onSelectionChange = onSelectionChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SelectionState, tmp, children);
}

var SelectionState = /* module */[/* make */make$21];

var jsMapperConstantArray$2 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function directionToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$2);
}

function directionFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$2, param);
}

function convertSorting(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  var param = madeObj["direction"];
  returnObj["direction"] = Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$2);
  return returnObj;
}

function convertDefaultSorting(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  var param = madeObj["direction"];
  returnObj["direction"] = Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$2);
  return returnObj;
}

function convertColumnExtensions$6(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["sortingEnabled"] = Js_boolean.to_js_boolean(madeObj["sortingEnabled"]);
  return returnObj;
}

function make$22(sorting, defaultSorting, onSortingChange, columnExtensions, columnSortingEnabled, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertSorting);
        }), sorting);
  if (tmp$1) {
    tmp.sorting = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertDefaultSorting);
        }), defaultSorting);
  if (tmp$2) {
    tmp.defaultSorting = tmp$2[0];
  }
  if (onSortingChange) {
    tmp.onSortingChange = onSortingChange[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$6);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, columnSortingEnabled);
  if (tmp$4) {
    tmp.columnSortingEnabled = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.SortingState, tmp, children);
}

var SortingState = /* module */[
  /* directionToJs */directionToJs,
  /* directionFromJs */directionFromJs,
  /* convertSorting */convertSorting,
  /* convertDefaultSorting */convertDefaultSorting,
  /* convertColumnExtensions */convertColumnExtensions$6,
  /* make */make$22
];

function make$23(headerRows, rows, columns, minWidth, containerComponent, tableComponent, headComponent, bodyComponent, rowComponent, cellComponent, children) {
  var tmp = {
    rows: rows,
    columns: columns,
    minWidth: unwrapValue(minWidth),
    containerComponent: containerComponent,
    tableComponent: tableComponent,
    bodyComponent: bodyComponent,
    rowComponent: rowComponent,
    cellComponent: cellComponent
  };
  if (headerRows) {
    tmp.headerRows = headerRows[0];
  }
  if (headComponent) {
    tmp.headComponent = headComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.StaticTableLayout, tmp, children);
}

var StaticTableLayout = /* module */[/* make */make$23];

function make$24(order, defaultOrder, onOrderChange, tableContainerComponent, rowComponent, cellComponent, children) {
  var tmp = { };
  if (order) {
    tmp.order = order[0];
  }
  if (defaultOrder) {
    tmp.defaultOrder = defaultOrder[0];
  }
  if (onOrderChange) {
    tmp.onOrderChange = onOrderChange[0];
  }
  if (tableContainerComponent) {
    tmp.tableContainerComponent = tableContainerComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableColumnReordering, tmp, children);
}

var TableColumnReordering = /* module */[/* make */make$24];

function convertDefaultColumnWidths(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["width"] = unwrapValue(madeObj["width"]);
  return returnObj;
}

function convertColumnWidths(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["width"] = unwrapValue(madeObj["width"]);
  return returnObj;
}

function make$25(defaultColumnWidths, columnWidths, onColumnWidthsChange, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertDefaultColumnWidths);
        }), defaultColumnWidths);
  if (tmp$1) {
    tmp.defaultColumnWidths = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertColumnWidths);
        }), columnWidths);
  if (tmp$2) {
    tmp.columnWidths = tmp$2[0];
  }
  if (onColumnWidthsChange) {
    tmp.onColumnWidthsChange = onColumnWidthsChange[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableColumnResizing, tmp, children);
}

var TableColumnResizing = /* module */[
  /* convertDefaultColumnWidths */convertDefaultColumnWidths,
  /* convertColumnWidths */convertColumnWidths,
  /* make */make$25
];

function convertMessages$4(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["noColumns"] = madeObj[0]["noColumns"];
  }
  return /* Some */[returnObj];
}

function convertColumnExtensions$7(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["togglingEnabled"] = Js_boolean.to_js_boolean(madeObj["togglingEnabled"]);
  return returnObj;
}

function make$26(hiddenColumnNames, defaultHiddenColumnNames, emptyMessageComponent, onHiddenColumnNamesChange, messages, columnExtensions, columnTogglingEnabled, children) {
  var tmp = { };
  if (hiddenColumnNames) {
    tmp.hiddenColumnNames = hiddenColumnNames[0];
  }
  if (defaultHiddenColumnNames) {
    tmp.defaultHiddenColumnNames = defaultHiddenColumnNames[0];
  }
  if (emptyMessageComponent) {
    tmp.emptyMessageComponent = emptyMessageComponent[0];
  }
  if (onHiddenColumnNamesChange) {
    tmp.onHiddenColumnNamesChange = onHiddenColumnNamesChange[0];
  }
  var tmp$1 = convertMessages$4(messages);
  if (tmp$1) {
    tmp.messages = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$7);
        }), columnExtensions);
  if (tmp$2) {
    tmp.columnExtensions = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, columnTogglingEnabled);
  if (tmp$3) {
    tmp.columnTogglingEnabled = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableColumnVisibility, tmp, children);
}

var TableColumnVisibility = /* module */[
  /* convertMessages */convertMessages$4,
  /* convertColumnExtensions */convertColumnExtensions$7,
  /* make */make$26
];

var jsMapperConstantArray$3 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$3);
}

function alignFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$3, param);
}

var jsMapperConstantArray$4 = /* array */[
  /* tuple */[
    -322412134,
    "cancel"
  ],
  /* tuple */[
    -71113705,
    "commit"
  ],
  /* tuple */[
    3254785,
    "add"
  ],
  /* tuple */[
    527250507,
    "delete"
  ],
  /* tuple */[
    770176554,
    "edit"
  ]
];

function idToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$4);
}

function idFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$4, param);
}

function convertMessages$5(madeObj) {
  var returnObj = { };
  if (madeObj) {
    var madeObj$1 = madeObj[0];
    returnObj["addCommand"] = madeObj$1["addCommand"];
    returnObj["editCommand"] = madeObj$1["editCommand"];
    returnObj["deleteCommand"] = madeObj$1["deleteCommand"];
    returnObj["commitCommand"] = madeObj$1["commitCommand"];
    returnObj["cancelCommand"] = madeObj$1["cancelCommand"];
  }
  return /* Some */[returnObj];
}

function make$27(cellComponent, headerCellComponent, commandComponent, showAddCommand, showEditCommand, showDeleteCommand, width, messages, children) {
  var tmp = { };
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (headerCellComponent) {
    tmp.headerCellComponent = headerCellComponent[0];
  }
  if (commandComponent) {
    tmp.commandComponent = commandComponent[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, showAddCommand);
  if (tmp$1) {
    tmp.showAddCommand = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, showEditCommand);
  if (tmp$2) {
    tmp.showEditCommand = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, showDeleteCommand);
  if (tmp$3) {
    tmp.showDeleteCommand = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, width);
  if (tmp$4) {
    tmp.width = tmp$4[0];
  }
  var tmp$5 = convertMessages$5(messages);
  if (tmp$5) {
    tmp.messages = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableEditColumn, tmp, children);
}

var TableEditColumn = /* module */[
  /* alignToJs */alignToJs,
  /* alignFromJs */alignFromJs,
  /* idToJs */idToJs,
  /* idFromJs */idFromJs,
  /* convertMessages */convertMessages$5,
  /* make */make$27
];

var jsMapperConstantArray$5 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$1(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$5);
}

function alignFromJs$1(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$5, param);
}

function make$28(rowHeight, cellComponent, rowComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, rowHeight);
  if (tmp$1) {
    tmp.rowHeight = tmp$1[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableEditRow, tmp, children);
}

var TableEditRow = /* module */[
  /* alignToJs */alignToJs$1,
  /* alignFromJs */alignFromJs$1,
  /* make */make$28
];

function convertMessages$6(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["filterPlaceholder"] = madeObj[0]["filterPlaceholder"];
  }
  return /* Some */[returnObj];
}

var jsMapperConstantArray$6 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$2(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$6);
}

function alignFromJs$2(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$6, param);
}

function make$29(rowHeight, messages, cellComponent, rowComponent, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, rowHeight);
  if (tmp$1) {
    tmp.rowHeight = tmp$1[0];
  }
  var tmp$2 = convertMessages$6(messages);
  if (tmp$2) {
    tmp.messages = tmp$2[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableFilterRow, tmp, children);
}

var TableFilterRow = /* module */[
  /* convertMessages */convertMessages$6,
  /* alignToJs */alignToJs$2,
  /* alignFromJs */alignFromJs$2,
  /* make */make$29
];

var jsMapperConstantArray$7 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$3(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$7);
}

function alignFromJs$3(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$7, param);
}

function convertColumnExtensions$8(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["showWhenGrouped"] = Js_option.map(Js_boolean.to_js_boolean, madeObj["showWhenGrouped"]);
  return returnObj;
}

function make$30(cellComponent, rowComponent, indentCellComponent, indentColumnWidth, showColumnsWhenGrouped, columnExtensions, children) {
  var tmp = { };
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (indentCellComponent) {
    tmp.indentCellComponent = indentCellComponent[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, indentColumnWidth);
  if (tmp$1) {
    tmp.indentColumnWidth = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, showColumnsWhenGrouped);
  if (tmp$2) {
    tmp.showColumnsWhenGrouped = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$8);
        }), columnExtensions);
  if (tmp$3) {
    tmp.columnExtensions = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableGroupRow, tmp, children);
}

var TableGroupRow = /* module */[
  /* alignToJs */alignToJs$3,
  /* alignFromJs */alignFromJs$3,
  /* convertColumnExtensions */convertColumnExtensions$8,
  /* make */make$30
];

var jsMapperConstantArray$8 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$4(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$8);
}

function alignFromJs$4(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$8, param);
}

var jsMapperConstantArray$9 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function sortingDirectionToJs$1(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$9);
}

function sortingDirectionFromJs$1(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$9, param);
}

var jsMapperConstantArray$10 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function rkn6ToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$10);
}

function rkn6FromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$10, param);
}

function convertMessages$7(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["sortingHint"] = madeObj[0]["sortingHint"];
  }
  return /* Some */[returnObj];
}

function make$31(showSortingControls, showGroupingControls, cellComponent, rowComponent, messages, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, showSortingControls);
  if (tmp$1) {
    tmp.showSortingControls = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, showGroupingControls);
  if (tmp$2) {
    tmp.showGroupingControls = tmp$2[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  var tmp$3 = convertMessages$7(messages);
  if (tmp$3) {
    tmp.messages = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableHeaderRow, tmp, children);
}

var TableHeaderRow = /* module */[
  /* alignToJs */alignToJs$4,
  /* alignFromJs */alignFromJs$4,
  /* sortingDirectionToJs */sortingDirectionToJs$1,
  /* sortingDirectionFromJs */sortingDirectionFromJs$1,
  /* rkn6ToJs */rkn6ToJs,
  /* rkn6FromJs */rkn6FromJs,
  /* convertMessages */convertMessages$7,
  /* make */make$31
];

function make$32(columns, minColumnWidth, layoutComponent, children) {
  return ReasonReact.wrapJsForReason(DxReactGrid.TableLayout, {
              columns: columns,
              minColumnWidth: unwrapValue(minColumnWidth),
              layoutComponent: layoutComponent
            }, children);
}

var TableLayout = /* module */[/* make */make$32];

var jsMapperConstantArray$11 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$5(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$11);
}

function alignFromJs$5(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$11, param);
}

function make$33(contentComponent, toggleCellComponent, cellComponent, rowComponent, toggleColumnWidth, rowHeight, children) {
  var tmp = { };
  if (contentComponent) {
    tmp.contentComponent = contentComponent[0];
  }
  if (toggleCellComponent) {
    tmp.toggleCellComponent = toggleCellComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, toggleColumnWidth);
  if (tmp$1) {
    tmp.toggleColumnWidth = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, rowHeight);
  if (tmp$2) {
    tmp.rowHeight = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableRowDetail, tmp, children);
}

var TableRowDetail = /* module */[
  /* alignToJs */alignToJs$5,
  /* alignFromJs */alignFromJs$5,
  /* make */make$33
];

var jsMapperConstantArray$12 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$6(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$12);
}

function alignFromJs$6(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$12, param);
}

function make$34(headerCellComponent, cellComponent, rowComponent, highlightRow, selectByRowClick, showSelectAll, showSelectionColumn, selectionColumnWidth, children) {
  var tmp = { };
  if (headerCellComponent) {
    tmp.headerCellComponent = headerCellComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, highlightRow);
  if (tmp$1) {
    tmp.highlightRow = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, selectByRowClick);
  if (tmp$2) {
    tmp.selectByRowClick = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, showSelectAll);
  if (tmp$3) {
    tmp.showSelectAll = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, showSelectionColumn);
  if (tmp$4) {
    tmp.showSelectionColumn = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, selectionColumnWidth);
  if (tmp$5) {
    tmp.selectionColumnWidth = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.TableSelection, tmp, children);
}

var TableSelection = /* module */[
  /* alignToJs */alignToJs$6,
  /* alignFromJs */alignFromJs$6,
  /* make */make$34
];

var jsMapperConstantArray$13 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs$7(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$13);
}

function alignFromJs$7(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$13, param);
}

function convertColumnExtensions$9(madeObj) {
  var returnObj = { };
  returnObj["columnName"] = madeObj["columnName"];
  returnObj["width"] = Js_option.map(unwrapValue, madeObj["width"]);
  returnObj["align"] = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$13);
        }), madeObj["align"]);
  return returnObj;
}

function convertMessages$8(madeObj) {
  var returnObj = { };
  if (madeObj) {
    returnObj["noData"] = madeObj[0]["noData"];
  }
  return /* Some */[returnObj];
}

function make$35(layoutComponent, tableComponent, headComponent, bodyComponent, containerComponent, cellComponent, rowComponent, noDataCellComponent, noDataRowComponent, stubCellComponent, stubHeaderCellComponent, columnExtensions, messages, fixedHeaderComponent, children) {
  var tmp = { };
  if (layoutComponent) {
    tmp.layoutComponent = layoutComponent[0];
  }
  if (tableComponent) {
    tmp.tableComponent = tableComponent[0];
  }
  if (headComponent) {
    tmp.headComponent = headComponent[0];
  }
  if (bodyComponent) {
    tmp.bodyComponent = bodyComponent[0];
  }
  if (containerComponent) {
    tmp.containerComponent = containerComponent[0];
  }
  if (cellComponent) {
    tmp.cellComponent = cellComponent[0];
  }
  if (rowComponent) {
    tmp.rowComponent = rowComponent[0];
  }
  if (noDataCellComponent) {
    tmp.noDataCellComponent = noDataCellComponent[0];
  }
  if (noDataRowComponent) {
    tmp.noDataRowComponent = noDataRowComponent[0];
  }
  if (stubCellComponent) {
    tmp.stubCellComponent = stubCellComponent[0];
  }
  if (stubHeaderCellComponent) {
    tmp.stubHeaderCellComponent = stubHeaderCellComponent[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return v.map(convertColumnExtensions$9);
        }), columnExtensions);
  if (tmp$1) {
    tmp.columnExtensions = tmp$1[0];
  }
  var tmp$2 = convertMessages$8(messages);
  if (tmp$2) {
    tmp.messages = tmp$2[0];
  }
  if (fixedHeaderComponent) {
    tmp.fixedHeaderComponent = fixedHeaderComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.Table, tmp, children);
}

var Table = /* module */[
  /* alignToJs */alignToJs$7,
  /* alignFromJs */alignFromJs$7,
  /* convertColumnExtensions */convertColumnExtensions$9,
  /* convertMessages */convertMessages$8,
  /* make */make$35
];

function make$36(rootComponent, flexibleSpaceComponent, children) {
  var tmp = { };
  if (rootComponent) {
    tmp.rootComponent = rootComponent[0];
  }
  if (flexibleSpaceComponent) {
    tmp.flexibleSpaceComponent = flexibleSpaceComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.Toolbar, tmp, children);
}

var Toolbar = /* module */[/* make */make$36];

function make$37(minWidth, height, headerRows, rows, columns, cellComponent, rowComponent, bodyComponent, headComponent, tableComponent, headTableComponent, containerComponent, estimatedRowHeight, children) {
  var tmp = {
    minWidth: unwrapValue(minWidth),
    height: unwrapValue(height),
    rows: rows,
    columns: columns,
    cellComponent: cellComponent,
    rowComponent: rowComponent,
    bodyComponent: bodyComponent,
    tableComponent: tableComponent,
    containerComponent: containerComponent,
    estimatedRowHeight: unwrapValue(estimatedRowHeight)
  };
  if (headerRows) {
    tmp.headerRows = headerRows[0];
  }
  if (headComponent) {
    tmp.headComponent = headComponent[0];
  }
  if (headTableComponent) {
    tmp.headTableComponent = headTableComponent[0];
  }
  return ReasonReact.wrapJsForReason(DxReactGrid.VirtualTableLayout, tmp, children);
}

var VirtualTableLayout = /* module */[/* make */make$37];

exports.unwrapValue = unwrapValue;
exports.ColumnChooser = ColumnChooser;
exports.CustomGrouping = CustomGrouping;
exports.CustomPaging = CustomPaging;
exports.DataTypeProvider = DataTypeProvider;
exports.DragDropProvider = DragDropProvider;
exports.EditingState = EditingState;
exports.FilteringState = FilteringState;
exports.Grid = Grid;
exports.GroupPanelLayout = GroupPanelLayout;
exports.GroupingPanel = GroupingPanel;
exports.GroupingState = GroupingState;
exports.IntegratedFiltering = IntegratedFiltering;
exports.IntegratedGrouping = IntegratedGrouping;
exports.IntegratedPaging = IntegratedPaging;
exports.IntegratedSelection = IntegratedSelection;
exports.IntegratedSorting = IntegratedSorting;
exports.PagingPanel = PagingPanel;
exports.PagingState = PagingState;
exports.RowDetailState = RowDetailState;
exports.SearchPanel = SearchPanel;
exports.SearchState = SearchState;
exports.SelectionState = SelectionState;
exports.SortingState = SortingState;
exports.StaticTableLayout = StaticTableLayout;
exports.TableColumnReordering = TableColumnReordering;
exports.TableColumnResizing = TableColumnResizing;
exports.TableColumnVisibility = TableColumnVisibility;
exports.TableEditColumn = TableEditColumn;
exports.TableEditRow = TableEditRow;
exports.TableFilterRow = TableFilterRow;
exports.TableGroupRow = TableGroupRow;
exports.TableHeaderRow = TableHeaderRow;
exports.TableLayout = TableLayout;
exports.TableRowDetail = TableRowDetail;
exports.TableSelection = TableSelection;
exports.Table = Table;
exports.Toolbar = Toolbar;
exports.VirtualTableLayout = VirtualTableLayout;
/* ReasonReact Not a pure module */
