// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_boolean = require("bs-platform/lib/js/js_boolean.js");
var ListLabels = require("bs-platform/lib/js/listLabels.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ObjectHash = require("object-hash");
var Styles = require("material-ui/styles");
var Tab = require("material-ui/Tabs/Tab");
var Card = require("material-ui/Card/Card");
var Chip = require("material-ui/Chip/Chip");
var Grid = require("material-ui/Grid/Grid");
var Icon = require("material-ui/Icon/Icon");
var List = require("material-ui/List/List");
var Menu = require("material-ui/Menu/Menu");
var Tabs = require("material-ui/Tabs/Tabs");
var Red = require("material-ui/colors/red");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Badge = require("material-ui/Badge/Badge");
var Input = require("material-ui/Input/Input");
var Modal = require("material-ui/Modal/Modal");
var Paper = require("material-ui/Paper/Paper");
var Radio = require("material-ui/Radio/Radio");
var Table = require("material-ui/Table/Table");
var Blue = require("material-ui/colors/blue");
var Cyan = require("material-ui/colors/cyan");
var Grey = require("material-ui/colors/grey");
var Lime = require("material-ui/colors/lime");
var Pink = require("material-ui/colors/pink");
var Teal = require("material-ui/colors/teal");
var Step = require("material-ui/Stepper/Step");
var Amber = require("material-ui/colors/amber");
var Brown = require("material-ui/colors/brown");
var Green = require("material-ui/colors/green");
var AppBar = require("material-ui/AppBar/AppBar");
var Avatar = require("material-ui/Avatar/Avatar");
var Button = require("material-ui/Button/Button");
var Dialog = require("material-ui/Dialog/Dialog");
var Drawer = require("material-ui/Drawer/Drawer");
var Hidden = require("material-ui/Hidden/Hidden");
var ListItem = require("material-ui/List/ListItem");
var MenuItem = require("material-ui/Menu/MenuItem");
var MenuList = require("material-ui/Menu/MenuList");
var Portal = require("material-ui/Portal/Portal");
var Select = require("material-ui/Select/Select");
var Switch = require("material-ui/Switch/Switch");
var Common = require("material-ui/colors/common");
var Indigo = require("material-ui/colors/indigo");
var Orange = require("material-ui/colors/orange");
var Purple = require("material-ui/colors/purple");
var Yellow = require("material-ui/colors/yellow");
var CardMedia = require("material-ui/Card/CardMedia");
var FormGroup = require("material-ui/Form/FormGroup");
var FormLabel = require("material-ui/Form/FormLabel");
var Backdrop = require("material-ui/Modal/Backdrop");
var TableRow = require("material-ui/Table/TableRow");
var CardHeader = require("material-ui/Card/CardHeader");
var Divider = require("material-ui/Divider/Divider");
var Popover = require("material-ui/Popover/Popover");
var Stepper = require("material-ui/Stepper/Stepper");
var SvgIcon = require("material-ui/SvgIcon/SvgIcon");
var TableBody = require("material-ui/Table/TableBody");
var TableCell = require("material-ui/Table/TableCell");
var TableHead = require("material-ui/Table/TableHead");
var Toolbar = require("material-ui/Toolbar/Toolbar");
var Tooltip = require("material-ui/Tooltip/Tooltip");
var BlueGrey = require("material-ui/colors/blueGrey");
var CardActions = require("material-ui/Card/CardActions");
var CardContent = require("material-ui/Card/CardContent");
var FormControl = require("material-ui/Form/FormControl");
var InputLabel = require("material-ui/Input/InputLabel");
var RadioGroup = require("material-ui/Radio/RadioGroup");
var StepIcon = require("material-ui/Stepper/StepIcon");
var LightBlue = require("material-ui/colors/lightBlue");
var Fade = require("material-ui/transitions/Fade");
var Grow = require("material-ui/transitions/Grow");
var Zoom = require("material-ui/transitions/Zoom");
var Checkbox = require("material-ui/Checkbox/Checkbox");
var GridList = require("material-ui/GridList/GridList");
var ListItemIcon = require("material-ui/List/ListItemIcon");
var ListItemText = require("material-ui/List/ListItemText");
var Snackbar = require("material-ui/Snackbar/Snackbar");
var StepLabel = require("material-ui/Stepper/StepLabel");
var TableFooter = require("material-ui/Table/TableFooter");
var DeepOrange = require("material-ui/colors/deepOrange");
var DeepPurple = require("material-ui/colors/deepPurple");
var LightGreen = require("material-ui/colors/lightGreen");
var Slide = require("material-ui/transitions/Slide");
var DialogTitle = require("material-ui/Dialog/DialogTitle");
var ListSubheader = require("material-ui/List/ListSubheader");
var StepButton = require("material-ui/Stepper/StepButton");
var FormHelperText = require("material-ui/Form/FormHelperText");
var ListItemAvatar = require("material-ui/List/ListItemAvatar");
var StepContent = require("material-ui/Stepper/StepContent");
var TextField = require("material-ui/TextField/TextField");
var DialogActions = require("material-ui/Dialog/DialogActions");
var DialogContent = require("material-ui/Dialog/DialogContent");
var InputAdornment = require("material-ui/Input/InputAdornment");
var TableSortLabel = require("material-ui/Table/TableSortLabel");
var Collapse = require("material-ui/transitions/Collapse");
var ButtonBase = require("material-ui/ButtonBase/ButtonBase");
var FormControlLabel = require("material-ui/Form/FormControlLabel");
var GridListTile = require("material-ui/GridList/GridListTile");
var IconButton = require("material-ui/IconButton/IconButton");
var TablePagination = require("material-ui/Table/TablePagination");
var Typography = require("material-ui/Typography/Typography");
var CssBaseline = require("material-ui/CssBaseline/CssBaseline");
var LinearProgress = require("material-ui/Progress/LinearProgress");
var MuiThemeProvider = require("material-ui/styles/MuiThemeProvider");
var ClickAwayListener = require("material-ui/utils/ClickAwayListener");
var DialogContentText = require("material-ui/Dialog/DialogContentText");
var GridListTileBar = require("material-ui/GridList/GridListTileBar");
var SnackbarContent = require("material-ui/Snackbar/SnackbarContent");
var CircularProgress = require("material-ui/Progress/CircularProgress");
var MobileStepper = require("material-ui/MobileStepper/MobileStepper");
var ListItemSecondaryAction = require("material-ui/List/ListItemSecondaryAction");
var ExpansionPanel = require("material-ui/ExpansionPanel/ExpansionPanel");
var BottomNavigation = require("material-ui/BottomNavigation/BottomNavigation");
var ExpansionPanelActions = require("material-ui/ExpansionPanel/ExpansionPanelActions");
var ExpansionPanelDetails = require("material-ui/ExpansionPanel/ExpansionPanelDetails");
var ExpansionPanelSummary = require("material-ui/ExpansionPanel/ExpansionPanelSummary");
var BottomNavigationAction = require("material-ui/BottomNavigation/BottomNavigationAction");

function unwrapValue(param) {
  var variant = param[0];
  if (variant >= 758940238) {
    if (variant !== 770676513) {
      if (variant >= 1034997432) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "MaterialUi.re",
                19,
                21
              ]
            ];
      } else {
        return param[1];
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "MaterialUi.re",
              18,
              16
            ]
          ];
    }
  } else if (variant !== -908856609) {
    if (variant >= 737456202) {
      return Js_boolean.to_js_boolean(param[1]);
    } else {
      return param[1];
    }
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "MaterialUi.re",
            17,
            18
          ]
        ];
  }
}

function toString(direction) {
  if (direction !== 0) {
    return "rtl";
  } else {
    return "ltr";
  }
}

function fromString(direction) {
  switch (direction) {
    case "ltr" : 
        return /* Ltr */0;
    case "rtl" : 
        return /* Rtl */1;
    default:
      throw [
            Caml_builtin_exceptions.failure,
            "Unknown direction: " + direction
          ];
  }
}

var Direction = /* module */[
  /* toString */toString,
  /* fromString */fromString
];

var Spacing = /* module */[];

function tToJs(param) {
  return {
          easeInOut: param[/* easeInOut */0],
          easeOut: param[/* easeOut */1],
          easeIn: param[/* easeIn */2],
          sharp: param[/* sharp */3]
        };
}

function tFromJs(param) {
  return /* record */[
          /* easeInOut */param.easeInOut,
          /* easeOut */param.easeOut,
          /* easeIn */param.easeIn,
          /* sharp */param.sharp
        ];
}

var Easing = /* module */[
  /* tToJs */tToJs,
  /* tFromJs */tFromJs
];

function tToJs$1(param) {
  return {
          shortest: param[/* shortest */0],
          shorter: param[/* shorter */1],
          short: param[/* short */2],
          standard: param[/* standard */3],
          complex: param[/* complex */4],
          enteringScreen: param[/* enteringScreen */5],
          leavingScreen: param[/* leavingScreen */6]
        };
}

function tFromJs$1(param) {
  return /* record */[
          /* shortest */param.shortest,
          /* shorter */param.shorter,
          /* short */param.short,
          /* standard */param.standard,
          /* complex */param.complex,
          /* enteringScreen */param.enteringScreen,
          /* leavingScreen */param.leavingScreen
        ];
}

var Duration = /* module */[
  /* tToJs */tToJs$1,
  /* tFromJs */tFromJs$1
];

function tToJs$2(param) {
  return {
          easing: param[/* easing */0],
          duration: param[/* duration */1],
          getAutoHeightDuration: param[/* getAutoHeightDuration */2],
          create: param[/* create */3]
        };
}

function tFromJs$2(param) {
  return /* record */[
          /* easing */param.easing,
          /* duration */param.duration,
          /* getAutoHeightDuration */param.getAutoHeightDuration,
          /* create */param.create
        ];
}

var Transitions = /* module */[
  /* Easing */Easing,
  /* Duration */Duration,
  /* tToJs */tToJs$2,
  /* tFromJs */tFromJs$2
];

function tToJs$3(param) {
  return {
          direction: param[/* direction */0],
          palette: param[/* palette */1],
          typography: param[/* typography */2],
          mixins: param[/* mixins */3],
          breakpoints: param[/* breakpoints */4],
          shadows: param[/* shadows */5],
          transitions: param[/* transitions */6],
          spacing: param[/* spacing */7],
          zIndex: param[/* zIndex */8]
        };
}

function tFromJs$3(theme) {
  return /* record */[
          /* direction */fromString(theme.direction),
          /* palette : () */0,
          /* typography : () */0,
          /* mixins : () */0,
          /* breakpoints : () */0,
          /* shadows */theme.shadows.reduce((function (lst, entry) {
                  return /* :: */[
                          entry,
                          lst
                        ];
                }), /* [] */0),
          /* transitions */tFromJs$2(theme.transitions),
          /* spacing : record */[/* unit */theme.spacing.unit],
          /* zIndex */theme.zIndex
        ];
}

var MuiTheme = /* module */[
  /* Direction */Direction,
  /* Spacing */Spacing,
  /* Transitions */Transitions,
  /* tToJs */tToJs$3,
  /* tFromJs */tFromJs$3
];

function WithStylesSafe(S) {
  var innerComponent = ReasonReact.statelessComponent("WithStyles");
  var makeStateLessComponent = function (render, _) {
    var newrecord = innerComponent.slice();
    newrecord[/* render */9] = (function () {
        return render;
      });
    return newrecord;
  };
  var make = function (render, reactClass, children) {
    return ReasonReact.wrapJsForReason(reactClass, {
                render: render
              }, children);
  };
  var Helper = /* module */[/* make */make];
  var createStylesWrapper = function (styles) {
    return Styles.withStyles(styles);
  };
  var generateWrapper = function () {
    var wrapper = Styles.withStyles(Curry._1(S[/* classRecordToJs */0], S[/* classes */2]));
    return wrapper(ReasonReact.wrapReasonForJs(innerComponent, (function (jsProps) {
                      return makeStateLessComponent(jsProps.render(Curry._1(S[/* classRecordStringsFromJs */1], jsProps.classes)), /* array */[]);
                    })));
  };
  var component = ReasonReact.reducerComponent("WithStylesSafeCached");
  var make$1 = function (render, children) {
    var newrecord = component.slice();
    newrecord[/* willReceiveProps */3] = (function (param) {
        var state = param[/* state */2];
        var newHash = ObjectHash(S[/* classes */2]);
        if (newHash === state[/* hash */0]) {
          return state;
        } else {
          return /* record */[
                  /* hash */newHash,
                  /* wrapper */generateWrapper(/* () */0)
                ];
        }
      });
    newrecord[/* render */9] = (function (param) {
        return ReasonReact.element(/* None */0, /* None */0, make(render, param[/* state */2][/* wrapper */1], /* array */[children]));
      });
    newrecord[/* initialState */10] = (function () {
        return /* record */[
                /* hash */ObjectHash(S[/* classes */2]),
                /* wrapper */generateWrapper(/* () */0)
              ];
      });
    newrecord[/* reducer */12] = (function (action, state) {
        return /* Update */Block.__(0, [/* record */[
                    /* hash */state[/* hash */0],
                    /* wrapper */action[0]
                  ]]);
      });
    return newrecord;
  };
  return /* module */[
          /* innerComponent */innerComponent,
          /* makeStateLessComponent */makeStateLessComponent,
          /* Helper */Helper,
          /* createStylesWrapper */createStylesWrapper,
          /* generateWrapper */generateWrapper,
          /* component */component,
          /* make */make$1
        ];
}

var innerComponent = ReasonReact.statelessComponent("WithStyles");

function innerMake(render, classes, _) {
  var newrecord = innerComponent.slice();
  newrecord[/* render */9] = (function () {
      return Curry._1(render, classes);
    });
  return newrecord;
}

function createStylesWrapper(styles) {
  return Styles.withStyles(styles);
}

function make(render, reactClass, children) {
  return ReasonReact.wrapJsForReason(reactClass, {
              render: render
            }, children);
}

var Helper = /* module */[/* make */make];

function generateWrapper(classes, classesWithTheme) {
  var generateDict = function (lst) {
    var classDict = { };
    ListLabels.iter((function (style) {
            classDict[style[/* name */0]] = style[/* styles */1];
            return /* () */0;
          }), lst);
    return classDict;
  };
  var wrapper;
  if (classes) {
    wrapper = Styles.withStyles(generateDict(classes[0]));
  } else if (classesWithTheme) {
    var classesWithTheme$1 = classesWithTheme[0];
    wrapper = Styles.withStyles((function (theme) {
            return generateDict(Curry._1(classesWithTheme$1, tFromJs$3(theme)));
          }));
  } else {
    wrapper = Styles.withStyles(generateDict(/* [] */0));
  }
  return wrapper(ReasonReact.wrapReasonForJs(innerComponent, (function (jsProps) {
                    return innerMake(jsProps.render, jsProps.classes, /* array */[]);
                  })));
}

var component = ReasonReact.reducerComponent("WithStylesCached");

function make$1(classes, classesWithTheme, render, children) {
  var newrecord = component.slice();
  newrecord[/* willReceiveProps */3] = (function (param) {
      var state = param[/* state */2];
      var newHash = ObjectHash(classes) + ObjectHash(classesWithTheme);
      if (newHash === state[/* hash */0]) {
        return state;
      } else {
        return /* record */[
                /* hash */newHash,
                /* wrapper */generateWrapper(classes, classesWithTheme)
              ];
      }
    });
  newrecord[/* render */9] = (function (param) {
      return ReasonReact.element(/* None */0, /* None */0, make(render, param[/* state */2][/* wrapper */1], /* array */[children]));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* hash */ObjectHash(classes) + ObjectHash(classesWithTheme),
              /* wrapper */generateWrapper(classes, classesWithTheme)
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      return /* Update */Block.__(0, [/* record */[
                  /* hash */state[/* hash */0],
                  /* wrapper */action[0]
                ]]);
    });
  return newrecord;
}

var WithStyles = /* module */[
  /* innerComponent */innerComponent,
  /* innerMake */innerMake,
  /* createStylesWrapper */createStylesWrapper,
  /* Helper */Helper,
  /* generateWrapper */generateWrapper,
  /* component */component,
  /* make */make$1
];

var black = Common.default["black"];

var white = Common.default["white"];

var Common$1 = /* module */[
  /* black */black,
  /* white */white
];

var c50 = Red.default["50"];

var c100 = Red.default["100"];

var c200 = Red.default["200"];

var c300 = Red.default["300"];

var c400 = Red.default["400"];

var c500 = Red.default["500"];

var c600 = Red.default["600"];

var c700 = Red.default["700"];

var c800 = Red.default["800"];

var c900 = Red.default["900"];

var a100 = Red.default["A100"];

var a200 = Red.default["A200"];

var a400 = Red.default["A400"];

var a700 = Red.default["A700"];

var Red$1 = /* module */[
  /* c50 */c50,
  /* c100 */c100,
  /* c200 */c200,
  /* c300 */c300,
  /* c400 */c400,
  /* c500 */c500,
  /* c600 */c600,
  /* c700 */c700,
  /* c800 */c800,
  /* c900 */c900,
  /* a100 */a100,
  /* a200 */a200,
  /* a400 */a400,
  /* a700 */a700
];

var c50$1 = Pink.default["50"];

var c100$1 = Pink.default["100"];

var c200$1 = Pink.default["200"];

var c300$1 = Pink.default["300"];

var c400$1 = Pink.default["400"];

var c500$1 = Pink.default["500"];

var c600$1 = Pink.default["600"];

var c700$1 = Pink.default["700"];

var c800$1 = Pink.default["800"];

var c900$1 = Pink.default["900"];

var a100$1 = Pink.default["A100"];

var a200$1 = Pink.default["A200"];

var a400$1 = Pink.default["A400"];

var a700$1 = Pink.default["A700"];

var Pink$1 = /* module */[
  /* c50 */c50$1,
  /* c100 */c100$1,
  /* c200 */c200$1,
  /* c300 */c300$1,
  /* c400 */c400$1,
  /* c500 */c500$1,
  /* c600 */c600$1,
  /* c700 */c700$1,
  /* c800 */c800$1,
  /* c900 */c900$1,
  /* a100 */a100$1,
  /* a200 */a200$1,
  /* a400 */a400$1,
  /* a700 */a700$1
];

var c50$2 = Purple.default["50"];

var c100$2 = Purple.default["100"];

var c200$2 = Purple.default["200"];

var c300$2 = Purple.default["300"];

var c400$2 = Purple.default["400"];

var c500$2 = Purple.default["500"];

var c600$2 = Purple.default["600"];

var c700$2 = Purple.default["700"];

var c800$2 = Purple.default["800"];

var c900$2 = Purple.default["900"];

var a100$2 = Purple.default["A100"];

var a200$2 = Purple.default["A200"];

var a400$2 = Purple.default["A400"];

var a700$2 = Purple.default["A700"];

var Purple$1 = /* module */[
  /* c50 */c50$2,
  /* c100 */c100$2,
  /* c200 */c200$2,
  /* c300 */c300$2,
  /* c400 */c400$2,
  /* c500 */c500$2,
  /* c600 */c600$2,
  /* c700 */c700$2,
  /* c800 */c800$2,
  /* c900 */c900$2,
  /* a100 */a100$2,
  /* a200 */a200$2,
  /* a400 */a400$2,
  /* a700 */a700$2
];

var c50$3 = DeepPurple.default["50"];

var c100$3 = DeepPurple.default["100"];

var c200$3 = DeepPurple.default["200"];

var c300$3 = DeepPurple.default["300"];

var c400$3 = DeepPurple.default["400"];

var c500$3 = DeepPurple.default["500"];

var c600$3 = DeepPurple.default["600"];

var c700$3 = DeepPurple.default["700"];

var c800$3 = DeepPurple.default["800"];

var c900$3 = DeepPurple.default["900"];

var a100$3 = DeepPurple.default["A100"];

var a200$3 = DeepPurple.default["A200"];

var a400$3 = DeepPurple.default["A400"];

var a700$3 = DeepPurple.default["A700"];

var DeepPurple$1 = /* module */[
  /* c50 */c50$3,
  /* c100 */c100$3,
  /* c200 */c200$3,
  /* c300 */c300$3,
  /* c400 */c400$3,
  /* c500 */c500$3,
  /* c600 */c600$3,
  /* c700 */c700$3,
  /* c800 */c800$3,
  /* c900 */c900$3,
  /* a100 */a100$3,
  /* a200 */a200$3,
  /* a400 */a400$3,
  /* a700 */a700$3
];

var c50$4 = Indigo.default["50"];

var c100$4 = Indigo.default["100"];

var c200$4 = Indigo.default["200"];

var c300$4 = Indigo.default["300"];

var c400$4 = Indigo.default["400"];

var c500$4 = Indigo.default["500"];

var c600$4 = Indigo.default["600"];

var c700$4 = Indigo.default["700"];

var c800$4 = Indigo.default["800"];

var c900$4 = Indigo.default["900"];

var a100$4 = Indigo.default["A100"];

var a200$4 = Indigo.default["A200"];

var a400$4 = Indigo.default["A400"];

var a700$4 = Indigo.default["A700"];

var Indigo$1 = /* module */[
  /* c50 */c50$4,
  /* c100 */c100$4,
  /* c200 */c200$4,
  /* c300 */c300$4,
  /* c400 */c400$4,
  /* c500 */c500$4,
  /* c600 */c600$4,
  /* c700 */c700$4,
  /* c800 */c800$4,
  /* c900 */c900$4,
  /* a100 */a100$4,
  /* a200 */a200$4,
  /* a400 */a400$4,
  /* a700 */a700$4
];

var c50$5 = Blue.default["50"];

var c100$5 = Blue.default["100"];

var c200$5 = Blue.default["200"];

var c300$5 = Blue.default["300"];

var c400$5 = Blue.default["400"];

var c500$5 = Blue.default["500"];

var c600$5 = Blue.default["600"];

var c700$5 = Blue.default["700"];

var c800$5 = Blue.default["800"];

var c900$5 = Blue.default["900"];

var a100$5 = Blue.default["A100"];

var a200$5 = Blue.default["A200"];

var a400$5 = Blue.default["A400"];

var a700$5 = Blue.default["A700"];

var Blue$1 = /* module */[
  /* c50 */c50$5,
  /* c100 */c100$5,
  /* c200 */c200$5,
  /* c300 */c300$5,
  /* c400 */c400$5,
  /* c500 */c500$5,
  /* c600 */c600$5,
  /* c700 */c700$5,
  /* c800 */c800$5,
  /* c900 */c900$5,
  /* a100 */a100$5,
  /* a200 */a200$5,
  /* a400 */a400$5,
  /* a700 */a700$5
];

var c50$6 = LightBlue.default["50"];

var c100$6 = LightBlue.default["100"];

var c200$6 = LightBlue.default["200"];

var c300$6 = LightBlue.default["300"];

var c400$6 = LightBlue.default["400"];

var c500$6 = LightBlue.default["500"];

var c600$6 = LightBlue.default["600"];

var c700$6 = LightBlue.default["700"];

var c800$6 = LightBlue.default["800"];

var c900$6 = LightBlue.default["900"];

var a100$6 = LightBlue.default["A100"];

var a200$6 = LightBlue.default["A200"];

var a400$6 = LightBlue.default["A400"];

var a700$6 = LightBlue.default["A700"];

var LightBlue$1 = /* module */[
  /* c50 */c50$6,
  /* c100 */c100$6,
  /* c200 */c200$6,
  /* c300 */c300$6,
  /* c400 */c400$6,
  /* c500 */c500$6,
  /* c600 */c600$6,
  /* c700 */c700$6,
  /* c800 */c800$6,
  /* c900 */c900$6,
  /* a100 */a100$6,
  /* a200 */a200$6,
  /* a400 */a400$6,
  /* a700 */a700$6
];

var c50$7 = Cyan.default["50"];

var c100$7 = Cyan.default["100"];

var c200$7 = Cyan.default["200"];

var c300$7 = Cyan.default["300"];

var c400$7 = Cyan.default["400"];

var c500$7 = Cyan.default["500"];

var c600$7 = Cyan.default["600"];

var c700$7 = Cyan.default["700"];

var c800$7 = Cyan.default["800"];

var c900$7 = Cyan.default["900"];

var a100$7 = Cyan.default["A100"];

var a200$7 = Cyan.default["A200"];

var a400$7 = Cyan.default["A400"];

var a700$7 = Cyan.default["A700"];

var Cyan$1 = /* module */[
  /* c50 */c50$7,
  /* c100 */c100$7,
  /* c200 */c200$7,
  /* c300 */c300$7,
  /* c400 */c400$7,
  /* c500 */c500$7,
  /* c600 */c600$7,
  /* c700 */c700$7,
  /* c800 */c800$7,
  /* c900 */c900$7,
  /* a100 */a100$7,
  /* a200 */a200$7,
  /* a400 */a400$7,
  /* a700 */a700$7
];

var c50$8 = Teal.default["50"];

var c100$8 = Teal.default["100"];

var c200$8 = Teal.default["200"];

var c300$8 = Teal.default["300"];

var c400$8 = Teal.default["400"];

var c500$8 = Teal.default["500"];

var c600$8 = Teal.default["600"];

var c700$8 = Teal.default["700"];

var c800$8 = Teal.default["800"];

var c900$8 = Teal.default["900"];

var a100$8 = Teal.default["A100"];

var a200$8 = Teal.default["A200"];

var a400$8 = Teal.default["A400"];

var a700$8 = Teal.default["A700"];

var Teal$1 = /* module */[
  /* c50 */c50$8,
  /* c100 */c100$8,
  /* c200 */c200$8,
  /* c300 */c300$8,
  /* c400 */c400$8,
  /* c500 */c500$8,
  /* c600 */c600$8,
  /* c700 */c700$8,
  /* c800 */c800$8,
  /* c900 */c900$8,
  /* a100 */a100$8,
  /* a200 */a200$8,
  /* a400 */a400$8,
  /* a700 */a700$8
];

var c50$9 = Green.default["50"];

var c100$9 = Green.default["100"];

var c200$9 = Green.default["200"];

var c300$9 = Green.default["300"];

var c400$9 = Green.default["400"];

var c500$9 = Green.default["500"];

var c600$9 = Green.default["600"];

var c700$9 = Green.default["700"];

var c800$9 = Green.default["800"];

var c900$9 = Green.default["900"];

var a100$9 = Green.default["A100"];

var a200$9 = Green.default["A200"];

var a400$9 = Green.default["A400"];

var a700$9 = Green.default["A700"];

var Green$1 = /* module */[
  /* c50 */c50$9,
  /* c100 */c100$9,
  /* c200 */c200$9,
  /* c300 */c300$9,
  /* c400 */c400$9,
  /* c500 */c500$9,
  /* c600 */c600$9,
  /* c700 */c700$9,
  /* c800 */c800$9,
  /* c900 */c900$9,
  /* a100 */a100$9,
  /* a200 */a200$9,
  /* a400 */a400$9,
  /* a700 */a700$9
];

var c50$10 = LightGreen.default["50"];

var c100$10 = LightGreen.default["100"];

var c200$10 = LightGreen.default["200"];

var c300$10 = LightGreen.default["300"];

var c400$10 = LightGreen.default["400"];

var c500$10 = LightGreen.default["500"];

var c600$10 = LightGreen.default["600"];

var c700$10 = LightGreen.default["700"];

var c800$10 = LightGreen.default["800"];

var c900$10 = LightGreen.default["900"];

var a100$10 = LightGreen.default["A100"];

var a200$10 = LightGreen.default["A200"];

var a400$10 = LightGreen.default["A400"];

var a700$10 = LightGreen.default["A700"];

var LightGreen$1 = /* module */[
  /* c50 */c50$10,
  /* c100 */c100$10,
  /* c200 */c200$10,
  /* c300 */c300$10,
  /* c400 */c400$10,
  /* c500 */c500$10,
  /* c600 */c600$10,
  /* c700 */c700$10,
  /* c800 */c800$10,
  /* c900 */c900$10,
  /* a100 */a100$10,
  /* a200 */a200$10,
  /* a400 */a400$10,
  /* a700 */a700$10
];

var c50$11 = Lime.default["50"];

var c100$11 = Lime.default["100"];

var c200$11 = Lime.default["200"];

var c300$11 = Lime.default["300"];

var c400$11 = Lime.default["400"];

var c500$11 = Lime.default["500"];

var c600$11 = Lime.default["600"];

var c700$11 = Lime.default["700"];

var c800$11 = Lime.default["800"];

var c900$11 = Lime.default["900"];

var a100$11 = Lime.default["A100"];

var a200$11 = Lime.default["A200"];

var a400$11 = Lime.default["A400"];

var a700$11 = Lime.default["A700"];

var Lime$1 = /* module */[
  /* c50 */c50$11,
  /* c100 */c100$11,
  /* c200 */c200$11,
  /* c300 */c300$11,
  /* c400 */c400$11,
  /* c500 */c500$11,
  /* c600 */c600$11,
  /* c700 */c700$11,
  /* c800 */c800$11,
  /* c900 */c900$11,
  /* a100 */a100$11,
  /* a200 */a200$11,
  /* a400 */a400$11,
  /* a700 */a700$11
];

var c50$12 = Yellow.default["50"];

var c100$12 = Yellow.default["100"];

var c200$12 = Yellow.default["200"];

var c300$12 = Yellow.default["300"];

var c400$12 = Yellow.default["400"];

var c500$12 = Yellow.default["500"];

var c600$12 = Yellow.default["600"];

var c700$12 = Yellow.default["700"];

var c800$12 = Yellow.default["800"];

var c900$12 = Yellow.default["900"];

var a100$12 = Yellow.default["A100"];

var a200$12 = Yellow.default["A200"];

var a400$12 = Yellow.default["A400"];

var a700$12 = Yellow.default["A700"];

var Yellow$1 = /* module */[
  /* c50 */c50$12,
  /* c100 */c100$12,
  /* c200 */c200$12,
  /* c300 */c300$12,
  /* c400 */c400$12,
  /* c500 */c500$12,
  /* c600 */c600$12,
  /* c700 */c700$12,
  /* c800 */c800$12,
  /* c900 */c900$12,
  /* a100 */a100$12,
  /* a200 */a200$12,
  /* a400 */a400$12,
  /* a700 */a700$12
];

var c50$13 = Amber.default["50"];

var c100$13 = Amber.default["100"];

var c200$13 = Amber.default["200"];

var c300$13 = Amber.default["300"];

var c400$13 = Amber.default["400"];

var c500$13 = Amber.default["500"];

var c600$13 = Amber.default["600"];

var c700$13 = Amber.default["700"];

var c800$13 = Amber.default["800"];

var c900$13 = Amber.default["900"];

var a100$13 = Amber.default["A100"];

var a200$13 = Amber.default["A200"];

var a400$13 = Amber.default["A400"];

var a700$13 = Amber.default["A700"];

var Amber$1 = /* module */[
  /* c50 */c50$13,
  /* c100 */c100$13,
  /* c200 */c200$13,
  /* c300 */c300$13,
  /* c400 */c400$13,
  /* c500 */c500$13,
  /* c600 */c600$13,
  /* c700 */c700$13,
  /* c800 */c800$13,
  /* c900 */c900$13,
  /* a100 */a100$13,
  /* a200 */a200$13,
  /* a400 */a400$13,
  /* a700 */a700$13
];

var c50$14 = Orange.default["50"];

var c100$14 = Orange.default["100"];

var c200$14 = Orange.default["200"];

var c300$14 = Orange.default["300"];

var c400$14 = Orange.default["400"];

var c500$14 = Orange.default["500"];

var c600$14 = Orange.default["600"];

var c700$14 = Orange.default["700"];

var c800$14 = Orange.default["800"];

var c900$14 = Orange.default["900"];

var a100$14 = Orange.default["A100"];

var a200$14 = Orange.default["A200"];

var a400$14 = Orange.default["A400"];

var a700$14 = Orange.default["A700"];

var Orange$1 = /* module */[
  /* c50 */c50$14,
  /* c100 */c100$14,
  /* c200 */c200$14,
  /* c300 */c300$14,
  /* c400 */c400$14,
  /* c500 */c500$14,
  /* c600 */c600$14,
  /* c700 */c700$14,
  /* c800 */c800$14,
  /* c900 */c900$14,
  /* a100 */a100$14,
  /* a200 */a200$14,
  /* a400 */a400$14,
  /* a700 */a700$14
];

var c50$15 = DeepOrange.default["50"];

var c100$15 = DeepOrange.default["100"];

var c200$15 = DeepOrange.default["200"];

var c300$15 = DeepOrange.default["300"];

var c400$15 = DeepOrange.default["400"];

var c500$15 = DeepOrange.default["500"];

var c600$15 = DeepOrange.default["600"];

var c700$15 = DeepOrange.default["700"];

var c800$15 = DeepOrange.default["800"];

var c900$15 = DeepOrange.default["900"];

var a100$15 = DeepOrange.default["A100"];

var a200$15 = DeepOrange.default["A200"];

var a400$15 = DeepOrange.default["A400"];

var a700$15 = DeepOrange.default["A700"];

var DeepOrange$1 = /* module */[
  /* c50 */c50$15,
  /* c100 */c100$15,
  /* c200 */c200$15,
  /* c300 */c300$15,
  /* c400 */c400$15,
  /* c500 */c500$15,
  /* c600 */c600$15,
  /* c700 */c700$15,
  /* c800 */c800$15,
  /* c900 */c900$15,
  /* a100 */a100$15,
  /* a200 */a200$15,
  /* a400 */a400$15,
  /* a700 */a700$15
];

var c50$16 = Brown.default["50"];

var c100$16 = Brown.default["100"];

var c200$16 = Brown.default["200"];

var c300$16 = Brown.default["300"];

var c400$16 = Brown.default["400"];

var c500$16 = Brown.default["500"];

var c600$16 = Brown.default["600"];

var c700$16 = Brown.default["700"];

var c800$16 = Brown.default["800"];

var c900$16 = Brown.default["900"];

var a100$16 = Brown.default["A100"];

var a200$16 = Brown.default["A200"];

var a400$16 = Brown.default["A400"];

var a700$16 = Brown.default["A700"];

var Brown$1 = /* module */[
  /* c50 */c50$16,
  /* c100 */c100$16,
  /* c200 */c200$16,
  /* c300 */c300$16,
  /* c400 */c400$16,
  /* c500 */c500$16,
  /* c600 */c600$16,
  /* c700 */c700$16,
  /* c800 */c800$16,
  /* c900 */c900$16,
  /* a100 */a100$16,
  /* a200 */a200$16,
  /* a400 */a400$16,
  /* a700 */a700$16
];

var c50$17 = Grey.default["50"];

var c100$17 = Grey.default["100"];

var c200$17 = Grey.default["200"];

var c300$17 = Grey.default["300"];

var c400$17 = Grey.default["400"];

var c500$17 = Grey.default["500"];

var c600$17 = Grey.default["600"];

var c700$17 = Grey.default["700"];

var c800$17 = Grey.default["800"];

var c900$17 = Grey.default["900"];

var a100$17 = Grey.default["A100"];

var a200$17 = Grey.default["A200"];

var a400$17 = Grey.default["A400"];

var a700$17 = Grey.default["A700"];

var Grey$1 = /* module */[
  /* c50 */c50$17,
  /* c100 */c100$17,
  /* c200 */c200$17,
  /* c300 */c300$17,
  /* c400 */c400$17,
  /* c500 */c500$17,
  /* c600 */c600$17,
  /* c700 */c700$17,
  /* c800 */c800$17,
  /* c900 */c900$17,
  /* a100 */a100$17,
  /* a200 */a200$17,
  /* a400 */a400$17,
  /* a700 */a700$17
];

var c50$18 = BlueGrey.default["50"];

var c100$18 = BlueGrey.default["100"];

var c200$18 = BlueGrey.default["200"];

var c300$18 = BlueGrey.default["300"];

var c400$18 = BlueGrey.default["400"];

var c500$18 = BlueGrey.default["500"];

var c600$18 = BlueGrey.default["600"];

var c700$18 = BlueGrey.default["700"];

var c800$18 = BlueGrey.default["800"];

var c900$18 = BlueGrey.default["900"];

var a100$18 = BlueGrey.default["A100"];

var a200$18 = BlueGrey.default["A200"];

var a400$18 = BlueGrey.default["A400"];

var a700$18 = BlueGrey.default["A700"];

var BlueGrey$1 = /* module */[
  /* c50 */c50$18,
  /* c100 */c100$18,
  /* c200 */c200$18,
  /* c300 */c300$18,
  /* c400 */c400$18,
  /* c500 */c500$18,
  /* c600 */c600$18,
  /* c700 */c700$18,
  /* c800 */c800$18,
  /* c900 */c900$18,
  /* a100 */a100$18,
  /* a200 */a200$18,
  /* a400 */a400$18,
  /* a700 */a700$18
];

var Colors = /* module */[
  /* Common */Common$1,
  /* Red */Red$1,
  /* Pink */Pink$1,
  /* Purple */Purple$1,
  /* DeepPurple */DeepPurple$1,
  /* Indigo */Indigo$1,
  /* Blue */Blue$1,
  /* LightBlue */LightBlue$1,
  /* Cyan */Cyan$1,
  /* Teal */Teal$1,
  /* Green */Green$1,
  /* LightGreen */LightGreen$1,
  /* Lime */Lime$1,
  /* Yellow */Yellow$1,
  /* Amber */Amber$1,
  /* Orange */Orange$1,
  /* DeepOrange */DeepOrange$1,
  /* Brown */Brown$1,
  /* Grey */Grey$1,
  /* BlueGrey */BlueGrey$1
];

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray);
}

function colorFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    332360020,
    "fixed"
  ],
  /* tuple */[
    491227799,
    "absolute"
  ],
  /* tuple */[
    982536398,
    "static"
  ],
  /* tuple */[
    1070408009,
    "sticky"
  ]
];

function positionToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$1);
}

function positionFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$1, param);
}

function to_string(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "positionFixed";
    case 2 : 
        return "positionAbsolute";
    case 3 : 
        return "positionSticky";
    case 4 : 
        return "positionStatic";
    case 5 : 
        return "colorDefault";
    case 6 : 
        return "colorPrimary";
    case 7 : 
        return "colorSecondary";
    
  }
}

function to_obj(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes = /* module */[
  /* to_string */to_string,
  /* to_obj */to_obj
];

function make$2(className, color, position, component, elevation, square, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$1);
        }), position);
  if (tmp$2) {
    tmp.position = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, component);
  if (tmp$3) {
    tmp.component = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, elevation);
  if (tmp$4) {
    tmp.elevation = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$5) {
    tmp.square = tmp$5[0];
  }
  var tmp$6 = Js_option.map(to_obj, classes);
  if (tmp$6) {
    tmp.classes = tmp$6[0];
  }
  return ReasonReact.wrapJsForReason(AppBar.default, tmp, children);
}

var AppBar$1 = /* module */[
  /* colorToJs */colorToJs,
  /* colorFromJs */colorFromJs,
  /* positionToJs */positionToJs,
  /* positionFromJs */positionFromJs,
  /* Classes */Classes,
  /* make */make$2
];

function to_string$1(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorDefault";
    case 2 : 
        return "img";
    
  }
}

function to_obj$1(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$1(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$1 = /* module */[
  /* to_string */to_string$1,
  /* to_obj */to_obj$1
];

function make$3(alt, childrenClassName, className, component, imgProps, sizes, src, srcSet, classes, children) {
  var tmp = { };
  if (alt) {
    tmp.alt = alt[0];
  }
  if (childrenClassName) {
    tmp.childrenClassName = childrenClassName[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  if (imgProps) {
    tmp.imgProps = imgProps[0];
  }
  if (sizes) {
    tmp.sizes = sizes[0];
  }
  if (src) {
    tmp.src = src[0];
  }
  if (srcSet) {
    tmp.srcSet = srcSet[0];
  }
  var tmp$2 = Js_option.map(to_obj$1, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Avatar.default, tmp, children);
}

var Avatar$1 = /* module */[
  /* Classes */Classes$1,
  /* make */make$3
];

function transitionDurationShapeToJs(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

function to_string$2(param) {
  if (param.tag) {
    return "invisible";
  } else {
    return "root";
  }
}

function to_obj$2(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$2(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$2 = /* module */[
  /* to_string */to_string$2,
  /* to_obj */to_obj$2
];

function make$4(invisible, _open, transitionDuration, classes, children) {
  var tmp = {
    open: Js_boolean.to_js_boolean(_open)
  };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, invisible);
  if (tmp$1) {
    tmp.invisible = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        transitionDurationShapeToJs(v[1])
                      ]);
          }
        }), transitionDuration);
  if (tmp$2) {
    tmp.transitionDuration = tmp$2[0];
  }
  var tmp$3 = Js_option.map(to_obj$2, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(Backdrop.default, tmp, children);
}

var Backdrop$1 = /* module */[
  /* transitionDurationShapeToJs */transitionDurationShapeToJs,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs,
  /* Classes */Classes$2,
  /* make */make$4
];

var jsMapperConstantArray$2 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ],
  /* tuple */[
    106380200,
    "error"
  ]
];

function colorToJs$1(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$2);
}

function colorFromJs$1(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$2, param);
}

function to_string$3(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "badge";
    case 2 : 
        return "colorPrimary";
    case 3 : 
        return "colorSecondary";
    case 4 : 
        return "colorError";
    
  }
}

function to_obj$3(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$3(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$3 = /* module */[
  /* to_string */to_string$3,
  /* to_obj */to_obj$3
];

function make$5(badgeContent, className, color, component, classes, children) {
  var tmp = {
    badgeContent: badgeContent
  };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$2);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(to_obj$3, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(Badge.default, tmp, children);
}

var Badge$1 = /* module */[
  /* colorToJs */colorToJs$1,
  /* colorFromJs */colorFromJs$1,
  /* Classes */Classes$3,
  /* make */make$5
];

function to_string$4(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "selected";
    case 2 : 
        return "selectedIconOnly";
    case 3 : 
        return "wrapper";
    case 4 : 
        return "label";
    case 5 : 
        return "labelSelected";
    case 6 : 
        return "labelHidden";
    
  }
}

function to_obj$4(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$4(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$4 = /* module */[
  /* to_string */to_string$4,
  /* to_obj */to_obj$4
];

function make$6(className, icon, label, onChange, onClick, selected, showLabel, value, buttonRef, centerRipple, component, disabled, disableRipple, focusRipple, onBlur, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  if (label) {
    tmp.label = label[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, selected);
  if (tmp$1) {
    tmp.selected = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, showLabel);
  if (tmp$2) {
    tmp.showLabel = tmp$2[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$3) {
    tmp.centerRipple = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, component);
  if (tmp$4) {
    tmp.component = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$5) {
    tmp.disabled = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$6) {
    tmp.disableRipple = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$7) {
    tmp.focusRipple = tmp$7[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$8) {
    tmp.tabIndex = tmp$8[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$9 = Js_option.map(to_obj$4, classes);
  if (tmp$9) {
    tmp.classes = tmp$9[0];
  }
  return ReasonReact.wrapJsForReason(BottomNavigationAction.default, tmp, children);
}

var BottomNavigationAction$1 = /* module */[
  /* Classes */Classes$4,
  /* make */make$6
];

function to_string$5() {
  return "root";
}

function to_obj$5(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$5 = /* module */[
  /* to_string */to_string$5,
  /* to_obj */to_obj$5
];

function make$7(className, onChange, showLabels, value, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, showLabels);
  if (tmp$1) {
    tmp.showLabels = tmp$1[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  var tmp$2 = Js_option.map(to_obj$5, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(BottomNavigation.default, tmp, children);
}

var BottomNavigation$1 = /* module */[
  /* Classes */Classes$5,
  /* make */make$7
];

function to_string$6(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "disabled";
    case 2 : 
        return "keyboardFocused";
    
  }
}

function to_obj$6(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$6(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$6 = /* module */[
  /* to_string */to_string$6,
  /* to_obj */to_obj$6
];

function make$8(buttonRef, centerRipple, className, component, disabled, disableRipple, focusRipple, onBlur, onClick, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$1) {
    tmp.centerRipple = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$3) {
    tmp.disabled = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$4) {
    tmp.disableRipple = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$5) {
    tmp.focusRipple = tmp$5[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$6) {
    tmp.tabIndex = tmp$6[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$7 = Js_option.map(to_obj$6, classes);
  if (tmp$7) {
    tmp.classes = tmp$7[0];
  }
  return ReasonReact.wrapJsForReason(ButtonBase.default, tmp, children);
}

var ButtonBase$1 = /* module */[
  /* Classes */Classes$6,
  /* make */make$8
];

var jsMapperConstantArray$3 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$2(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$3);
}

function colorFromJs$2(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$3, param);
}

var jsMapperConstantArray$4 = /* array */[
  /* tuple */[
    48800667,
    "large"
  ],
  /* tuple */[
    311976103,
    "small"
  ],
  /* tuple */[
    861718677,
    "medium"
  ]
];

function sizeToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$4);
}

function sizeFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$4, param);
}

var jsMapperConstantArray$5 = /* array */[
  /* tuple */[
    -387916264,
    "raised"
  ],
  /* tuple */[
    3502759,
    "fab"
  ],
  /* tuple */[
    781662169,
    "flat"
  ]
];

function variantToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$5);
}

function variantFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$5, param);
}

function to_string$7(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "label";
    case 2 : 
        return "flatPrimary";
    case 3 : 
        return "flatSecondary";
    case 4 : 
        return "colorInherit";
    case 5 : 
        return "raised";
    case 6 : 
        return "keyboardFocused";
    case 7 : 
        return "raisedPrimary";
    case 8 : 
        return "raisedSecondary";
    case 9 : 
        return "disabled";
    case 10 : 
        return "fab";
    case 11 : 
        return "mini";
    case 12 : 
        return "sizeSmall";
    case 13 : 
        return "sizeLarge";
    case 14 : 
        return "fullWidth";
    
  }
}

function to_obj$7(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$7(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$7 = /* module */[
  /* to_string */to_string$7,
  /* to_obj */to_obj$7
];

function make$9(className, color, component, disabled, disableFocusRipple, disableRipple, fullWidth, href, mini, size, _type, variant, buttonRef, centerRipple, focusRipple, onBlur, onClick, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$3);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$3) {
    tmp.disabled = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disableFocusRipple);
  if (tmp$4) {
    tmp.disableFocusRipple = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$5) {
    tmp.disableRipple = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$6) {
    tmp.fullWidth = tmp$6[0];
  }
  if (href) {
    tmp.href = href[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, mini);
  if (tmp$7) {
    tmp.mini = tmp$7[0];
  }
  var tmp$8 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$4);
        }), size);
  if (tmp$8) {
    tmp.size = tmp$8[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$9 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$5);
        }), variant);
  if (tmp$9) {
    tmp.variant = tmp$9[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$10) {
    tmp.centerRipple = tmp$10[0];
  }
  var tmp$11 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$11) {
    tmp.focusRipple = tmp$11[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$12 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$12) {
    tmp.tabIndex = tmp$12[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  var tmp$13 = Js_option.map(to_obj$7, classes);
  if (tmp$13) {
    tmp.classes = tmp$13[0];
  }
  return ReasonReact.wrapJsForReason(Button.default, tmp, children);
}

var Button$1 = /* module */[
  /* colorToJs */colorToJs$2,
  /* colorFromJs */colorFromJs$2,
  /* sizeToJs */sizeToJs,
  /* sizeFromJs */sizeFromJs,
  /* variantToJs */variantToJs,
  /* variantFromJs */variantFromJs,
  /* Classes */Classes$7,
  /* make */make$9
];

function to_string$8(param) {
  if (param.tag) {
    return "action";
  } else {
    return "root";
  }
}

function to_obj$8(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$8(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$8 = /* module */[
  /* to_string */to_string$8,
  /* to_obj */to_obj$8
];

function make$10(className, disableActionSpacing, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableActionSpacing);
  if (tmp$1) {
    tmp.disableActionSpacing = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$8, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(CardActions.default, tmp, children);
}

var CardActions$1 = /* module */[
  /* Classes */Classes$8,
  /* make */make$10
];

function to_string$9() {
  return "root";
}

function to_obj$9(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$9 = /* module */[
  /* to_string */to_string$9,
  /* to_obj */to_obj$9
];

function make$11(className, component, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$9, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(CardContent.default, tmp, children);
}

var CardContent$1 = /* module */[
  /* Classes */Classes$9,
  /* make */make$11
];

function to_string$10(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "avatar";
    case 2 : 
        return "action";
    case 3 : 
        return "content";
    case 4 : 
        return "title";
    case 5 : 
        return "subheader";
    
  }
}

function to_obj$10(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$10(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$10 = /* module */[
  /* to_string */to_string$10,
  /* to_obj */to_obj$10
];

function make$12(action, avatar, className, component, subheader, title, classes, children) {
  var tmp = { };
  if (action) {
    tmp.action = action[0];
  }
  if (avatar) {
    tmp.avatar = avatar[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  if (subheader) {
    tmp.subheader = subheader[0];
  }
  if (title) {
    tmp.title = title[0];
  }
  var tmp$2 = Js_option.map(to_obj$10, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(CardHeader.default, tmp, children);
}

var CardHeader$1 = /* module */[
  /* Classes */Classes$10,
  /* make */make$12
];

function to_string$11(param) {
  if (param.tag) {
    return "media";
  } else {
    return "root";
  }
}

function to_obj$11(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$11(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$11 = /* module */[
  /* to_string */to_string$11,
  /* to_obj */to_obj$11
];

function make$13(className, component, image, src, style, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  if (image) {
    tmp.image = image[0];
  }
  if (src) {
    tmp.src = src[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$2 = Js_option.map(to_obj$11, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(CardMedia.default, tmp, children);
}

var CardMedia$1 = /* module */[
  /* Classes */Classes$11,
  /* make */make$13
];

function make$14(raised, className, component, elevation, square, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, raised);
  if (tmp$1) {
    tmp.raised = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, elevation);
  if (tmp$3) {
    tmp.elevation = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$4) {
    tmp.square = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(Card.default, tmp, children);
}

var Card$1 = /* module */[/* make */make$14];

var jsMapperConstantArray$6 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$3(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$6);
}

function colorFromJs$3(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$6, param);
}

function to_string$12(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "default";
    case 1 : 
        return "checked";
    case 2 : 
        return "checkedPrimary";
    case 3 : 
        return "checkedSecondary";
    case 4 : 
        return "disabled";
    
  }
}

function to_obj$12(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$12(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$12 = /* module */[
  /* to_string */to_string$12,
  /* to_obj */to_obj$12
];

function make$15(checked, checkedIcon, color, disabled, disableRipple, icon, id, indeterminate, indeterminateIcon, inputProps, inputRef, onChange, _type, value, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, checked);
  if (tmp$1) {
    tmp.checked = tmp$1[0];
  }
  if (checkedIcon) {
    tmp.checkedIcon = checkedIcon[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$6);
        }), color);
  if (tmp$2) {
    tmp.color = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$3) {
    tmp.disabled = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$4) {
    tmp.disableRipple = tmp$4[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, indeterminate);
  if (tmp$5) {
    tmp.indeterminate = tmp$5[0];
  }
  if (indeterminateIcon) {
    tmp.indeterminateIcon = indeterminateIcon[0];
  }
  if (inputProps) {
    tmp.inputProps = inputProps[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  var tmp$6 = Js_option.map(to_obj$12, classes);
  if (tmp$6) {
    tmp.classes = tmp$6[0];
  }
  return ReasonReact.wrapJsForReason(Checkbox.default, tmp, children);
}

var Checkbox$1 = /* module */[
  /* colorToJs */colorToJs$3,
  /* colorFromJs */colorFromJs$3,
  /* Classes */Classes$12,
  /* make */make$15
];

function to_string$13(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "clickable";
    case 2 : 
        return "deletable";
    case 3 : 
        return "avatar";
    case 4 : 
        return "avatarChildren";
    case 5 : 
        return "label";
    case 6 : 
        return "deleteIcon";
    
  }
}

function to_obj$13(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$13(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$13 = /* module */[
  /* to_string */to_string$13,
  /* to_obj */to_obj$13
];

function make$16(avatar, className, component, deleteIcon, label, onClick, onDelete, onKeyDown, tabIndex, classes, children) {
  var tmp = { };
  if (avatar) {
    tmp.avatar = avatar[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  if (deleteIcon) {
    tmp.deleteIcon = deleteIcon[0];
  }
  if (label) {
    tmp.label = label[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onDelete) {
    tmp.onDelete = onDelete[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$2) {
    tmp.tabIndex = tmp$2[0];
  }
  var tmp$3 = Js_option.map(to_obj$13, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(Chip.default, tmp, children);
}

var Chip$1 = /* module */[
  /* Classes */Classes$13,
  /* make */make$16
];

var jsMapperConstantArray$7 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$4(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$7);
}

function colorFromJs$4(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$7, param);
}

var jsMapperConstantArray$8 = /* array */[
  /* tuple */[
    -700823845,
    "indeterminate"
  ],
  /* tuple */[
    373815968,
    "determinate"
  ],
  /* tuple */[
    982536398,
    "static"
  ]
];

function variantToJs$1(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$8);
}

function variantFromJs$1(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$8, param);
}

function to_string$14(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorPrimary";
    case 2 : 
        return "colorSecondary";
    case 3 : 
        return "svg";
    case 4 : 
        return "svgIndeterminate";
    case 5 : 
        return "circle";
    case 6 : 
        return "circleIndeterminate";
    
  }
}

function to_obj$14(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$14(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$14 = /* module */[
  /* to_string */to_string$14,
  /* to_obj */to_obj$14
];

function make$17(className, color, max, min, size, style, thickness, value, variant, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$7);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, max);
  if (tmp$2) {
    tmp.max = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, min);
  if (tmp$3) {
    tmp.min = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, size);
  if (tmp$4) {
    tmp.size = tmp$4[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, thickness);
  if (tmp$5) {
    tmp.thickness = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, value);
  if (tmp$6) {
    tmp.value = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$8);
        }), variant);
  if (tmp$7) {
    tmp.variant = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$14, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(CircularProgress.default, tmp, children);
}

var CircularProgress$1 = /* module */[
  /* colorToJs */colorToJs$4,
  /* colorFromJs */colorFromJs$4,
  /* variantToJs */variantToJs$1,
  /* variantFromJs */variantFromJs$1,
  /* Classes */Classes$14,
  /* make */make$17
];

function make$18(onClickAway, children) {
  return ReasonReact.wrapJsForReason(ClickAwayListener.default, {
              onClickAway: onClickAway
            }, children);
}

var ClickAwayListener$1 = /* module */[/* make */make$18];

function timeoutShapeToJs(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function timeoutShapeFromJs(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

var jsMapperConstantArray$9 = /* array */[/* tuple */[
    726666127,
    "auto"
  ]];

function timeoutToJs(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$9);
}

function timeoutFromJs(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$9, param);
}

function to_string$15(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "container";
    case 1 : 
        return "entered";
    case 2 : 
        return "wrapper";
    case 3 : 
        return "wrapperInner";
    
  }
}

function to_obj$15(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$15(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$15 = /* module */[
  /* to_string */to_string$15,
  /* to_obj */to_obj$15
];

function make$19(className, collapsedHeight, component, _in, onEnter, onEntered, onEntering, onExit, onExiting, style, theme, timeout, classes, children) {
  var tmp = {
    theme: theme
  };
  if (className) {
    tmp.className = className[0];
  }
  if (collapsedHeight) {
    tmp.collapsedHeight = collapsedHeight[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, _in);
  if (tmp$2) {
    tmp.in = tmp$2[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (onExiting) {
    tmp.onExiting = onExiting[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          if (typeof v === "number") {
            return unwrapValue(v);
          } else {
            var variant = v[0];
            if (variant !== -908856609) {
              if (variant !== 770676513) {
                return unwrapValue(v);
              } else {
                return unwrapValue(/* `String */[
                            -976970511,
                            Js_mapperRt.binarySearch(1, v[1], jsMapperConstantArray$9)
                          ]);
              }
            } else {
              return unwrapValue(/* `Element */[
                          -744106340,
                          timeoutShapeToJs(v[1])
                        ]);
            }
          }
        }), timeout);
  if (tmp$3) {
    tmp.timeout = tmp$3[0];
  }
  var tmp$4 = Js_option.map(to_obj$15, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(Collapse.default, tmp, children);
}

var Collapse$1 = /* module */[
  /* timeoutShapeToJs */timeoutShapeToJs,
  /* timeoutShapeFromJs */timeoutShapeFromJs,
  /* timeoutToJs */timeoutToJs,
  /* timeoutFromJs */timeoutFromJs,
  /* Classes */Classes$15,
  /* make */make$19
];

function make$20(children) {
  return ReasonReact.wrapJsForReason(CssBaseline.default, { }, children);
}

var CssBaseline$1 = /* module */[/* make */make$20];

function to_string$16(param) {
  if (param.tag) {
    return "action";
  } else {
    return "root";
  }
}

function to_obj$16(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$16(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$16 = /* module */[
  /* to_string */to_string$16,
  /* to_obj */to_obj$16
];

function make$21(className, disableActionSpacing, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableActionSpacing);
  if (tmp$1) {
    tmp.disableActionSpacing = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$16, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DialogActions.default, tmp, children);
}

var DialogActions$1 = /* module */[
  /* Classes */Classes$16,
  /* make */make$21
];

function to_string$17() {
  return "root";
}

function to_obj$17(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$17 = /* module */[
  /* to_string */to_string$17,
  /* to_obj */to_obj$17
];

function make$22(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$17, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DialogContentText.default, tmp, children);
}

var DialogContentText$1 = /* module */[
  /* Classes */Classes$17,
  /* make */make$22
];

function to_string$18() {
  return "root";
}

function to_obj$18(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$18 = /* module */[
  /* to_string */to_string$18,
  /* to_obj */to_obj$18
];

function make$23(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$18, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(DialogContent.default, tmp, children);
}

var DialogContent$1 = /* module */[
  /* Classes */Classes$18,
  /* make */make$23
];

function to_string$19() {
  return "root";
}

function to_obj$19(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$19 = /* module */[
  /* to_string */to_string$19,
  /* to_obj */to_obj$19
];

function make$24(className, disableTypography, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableTypography);
  if (tmp$1) {
    tmp.disableTypography = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$19, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(DialogTitle.default, tmp, children);
}

var DialogTitle$1 = /* module */[
  /* Classes */Classes$19,
  /* make */make$24
];

var jsMapperConstantArray$10 = /* array */[
  /* tuple */[
    17271,
    "md"
  ],
  /* tuple */[
    18618,
    "sm"
  ],
  /* tuple */[
    19739,
    "xs"
  ],
  /* tuple */[
    243049859,
    "0"
  ]
];

function maxWidthToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$10);
}

function maxWidthFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$10, param);
}

function transitionDurationShapeToJs$1(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs$1(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

function to_string$20(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "paper";
    case 2 : 
        return "paperWidthXs";
    case 3 : 
        return "paperWidthSm";
    case 4 : 
        return "paperWidthMd";
    case 5 : 
        return "paperFullWidth";
    case 6 : 
        return "paperFullScreen";
    
  }
}

function to_obj$20(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$20(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$20 = /* module */[
  /* to_string */to_string$20,
  /* to_obj */to_obj$20
];

function make$25(className, disableBackdropClick, disableEscapeKeyDown, fullScreen, fullWidth, maxWidth, onBackdropClick, onClose, onEnter, onEntered, onEntering, onEscapeKeyDown, onExit, onExited, onExiting, _open, paperProps, transition, transitionDuration, backdropComponent, backdropProps, container, disableAutoFocus, disableEnforceFocus, disableRestoreFocus, hideBackdrop, keepMounted, manager, onRendered, classes, children) {
  var tmp = {
    open: Js_boolean.to_js_boolean(_open)
  };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableBackdropClick);
  if (tmp$1) {
    tmp.disableBackdropClick = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disableEscapeKeyDown);
  if (tmp$2) {
    tmp.disableEscapeKeyDown = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, fullScreen);
  if (tmp$3) {
    tmp.fullScreen = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$4) {
    tmp.fullWidth = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$10);
        }), maxWidth);
  if (tmp$5) {
    tmp.maxWidth = tmp$5[0];
  }
  if (onBackdropClick) {
    tmp.onBackdropClick = onBackdropClick[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onEscapeKeyDown) {
    tmp.onEscapeKeyDown = onEscapeKeyDown[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (onExited) {
    tmp.onExited = onExited[0];
  }
  if (onExiting) {
    tmp.onExiting = onExiting[0];
  }
  if (paperProps) {
    tmp.paperProps = paperProps[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, transition);
  if (tmp$6) {
    tmp.transition = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        transitionDurationShapeToJs$1(v[1])
                      ]);
          }
        }), transitionDuration);
  if (tmp$7) {
    tmp.transitionDuration = tmp$7[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, backdropComponent);
  if (tmp$8) {
    tmp.backdropComponent = tmp$8[0];
  }
  if (backdropProps) {
    tmp.backdropProps = backdropProps[0];
  }
  var tmp$9 = Js_option.map(unwrapValue, container);
  if (tmp$9) {
    tmp.container = tmp$9[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, disableAutoFocus);
  if (tmp$10) {
    tmp.disableAutoFocus = tmp$10[0];
  }
  var tmp$11 = Js_option.map(Js_boolean.to_js_boolean, disableEnforceFocus);
  if (tmp$11) {
    tmp.disableEnforceFocus = tmp$11[0];
  }
  var tmp$12 = Js_option.map(Js_boolean.to_js_boolean, disableRestoreFocus);
  if (tmp$12) {
    tmp.disableRestoreFocus = tmp$12[0];
  }
  var tmp$13 = Js_option.map(Js_boolean.to_js_boolean, hideBackdrop);
  if (tmp$13) {
    tmp.hideBackdrop = tmp$13[0];
  }
  var tmp$14 = Js_option.map(Js_boolean.to_js_boolean, keepMounted);
  if (tmp$14) {
    tmp.keepMounted = tmp$14[0];
  }
  if (manager) {
    tmp.manager = manager[0];
  }
  if (onRendered) {
    tmp.onRendered = onRendered[0];
  }
  var tmp$15 = Js_option.map(to_obj$20, classes);
  if (tmp$15) {
    tmp.classes = tmp$15[0];
  }
  return ReasonReact.wrapJsForReason(Dialog.default, tmp, children);
}

var Dialog$1 = /* module */[
  /* maxWidthToJs */maxWidthToJs,
  /* maxWidthFromJs */maxWidthFromJs,
  /* transitionDurationShapeToJs */transitionDurationShapeToJs$1,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs$1,
  /* Classes */Classes$20,
  /* make */make$25
];

function to_string$21(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "absolute";
    case 2 : 
        return "inset";
    case 3 : 
        return "light";
    
  }
}

function to_obj$21(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$21(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$21 = /* module */[
  /* to_string */to_string$21,
  /* to_obj */to_obj$21
];

function make$26(absolute, className, component, inset, light, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, absolute);
  if (tmp$1) {
    tmp.absolute = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, inset);
  if (tmp$3) {
    tmp.inset = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, light);
  if (tmp$4) {
    tmp.light = tmp$4[0];
  }
  var tmp$5 = Js_option.map(to_obj$21, classes);
  if (tmp$5) {
    tmp.classes = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(Divider.default, tmp, children);
}

var Divider$1 = /* module */[
  /* Classes */Classes$21,
  /* make */make$26
];

var jsMapperConstantArray$11 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    4202101,
    "top"
  ],
  /* tuple */[
    437082891,
    "bottom"
  ],
  /* tuple */[
    847852583,
    "left"
  ]
];

function anchorToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$11);
}

function anchorFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$11, param);
}

function transitionDurationShapeToJs$2(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs$2(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

var jsMapperConstantArray$12 = /* array */[
  /* tuple */[
    -156865929,
    "persistent"
  ],
  /* tuple */[
    -103274127,
    "temporary"
  ],
  /* tuple */[
    950914574,
    "permanent"
  ]
];

function variantToJs$2(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$12);
}

function variantFromJs$2(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$12, param);
}

function to_string$22(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "docked";
    case 1 : 
        return "paper";
    case 2 : 
        return "paperAnchorLeft";
    case 3 : 
        return "paperAnchorRight";
    case 4 : 
        return "paperAnchorTop";
    case 5 : 
        return "paperAnchorBottom";
    case 6 : 
        return "paperAnchorDockedLeft";
    case 7 : 
        return "paperAnchorDockedTop";
    case 8 : 
        return "paperAnchorDockedRight";
    case 9 : 
        return "paperAnchorDockedBottom";
    case 10 : 
        return "modal";
    
  }
}

function to_obj$22(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$22(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$22 = /* module */[
  /* to_string */to_string$22,
  /* to_obj */to_obj$22
];

function make$27(anchor, className, elevation, modalProps, onClose, _open, paperProps, slideProps, theme, transitionDuration, variant, backdropComponent, backdropProps, container, disableAutoFocus, disableBackdropClick, disableEnforceFocus, disableEscapeKeyDown, disableRestoreFocus, hideBackdrop, keepMounted, manager, onBackdropClick, onEscapeKeyDown, onRendered, classes, children) {
  var tmp = {
    theme: theme
  };
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$11);
        }), anchor);
  if (tmp$1) {
    tmp.anchor = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, elevation);
  if (tmp$2) {
    tmp.elevation = tmp$2[0];
  }
  if (modalProps) {
    tmp.modalProps = modalProps[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, _open);
  if (tmp$3) {
    tmp.open = tmp$3[0];
  }
  if (paperProps) {
    tmp.paperProps = paperProps[0];
  }
  if (slideProps) {
    tmp.slideProps = slideProps[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        transitionDurationShapeToJs$2(v[1])
                      ]);
          }
        }), transitionDuration);
  if (tmp$4) {
    tmp.transitionDuration = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$12);
        }), variant);
  if (tmp$5) {
    tmp.variant = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, backdropComponent);
  if (tmp$6) {
    tmp.backdropComponent = tmp$6[0];
  }
  if (backdropProps) {
    tmp.backdropProps = backdropProps[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, container);
  if (tmp$7) {
    tmp.container = tmp$7[0];
  }
  var tmp$8 = Js_option.map(Js_boolean.to_js_boolean, disableAutoFocus);
  if (tmp$8) {
    tmp.disableAutoFocus = tmp$8[0];
  }
  var tmp$9 = Js_option.map(Js_boolean.to_js_boolean, disableBackdropClick);
  if (tmp$9) {
    tmp.disableBackdropClick = tmp$9[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, disableEnforceFocus);
  if (tmp$10) {
    tmp.disableEnforceFocus = tmp$10[0];
  }
  var tmp$11 = Js_option.map(Js_boolean.to_js_boolean, disableEscapeKeyDown);
  if (tmp$11) {
    tmp.disableEscapeKeyDown = tmp$11[0];
  }
  var tmp$12 = Js_option.map(Js_boolean.to_js_boolean, disableRestoreFocus);
  if (tmp$12) {
    tmp.disableRestoreFocus = tmp$12[0];
  }
  var tmp$13 = Js_option.map(Js_boolean.to_js_boolean, hideBackdrop);
  if (tmp$13) {
    tmp.hideBackdrop = tmp$13[0];
  }
  var tmp$14 = Js_option.map(Js_boolean.to_js_boolean, keepMounted);
  if (tmp$14) {
    tmp.keepMounted = tmp$14[0];
  }
  if (manager) {
    tmp.manager = manager[0];
  }
  if (onBackdropClick) {
    tmp.onBackdropClick = onBackdropClick[0];
  }
  if (onEscapeKeyDown) {
    tmp.onEscapeKeyDown = onEscapeKeyDown[0];
  }
  if (onRendered) {
    tmp.onRendered = onRendered[0];
  }
  var tmp$15 = Js_option.map(to_obj$22, classes);
  if (tmp$15) {
    tmp.classes = tmp$15[0];
  }
  return ReasonReact.wrapJsForReason(Drawer.default, tmp, children);
}

var Drawer$1 = /* module */[
  /* anchorToJs */anchorToJs,
  /* anchorFromJs */anchorFromJs,
  /* transitionDurationShapeToJs */transitionDurationShapeToJs$2,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs$2,
  /* variantToJs */variantToJs$2,
  /* variantFromJs */variantFromJs$2,
  /* Classes */Classes$22,
  /* make */make$27
];

function to_string$23(param) {
  if (param.tag) {
    return "action";
  } else {
    return "root";
  }
}

function to_obj$23(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$23(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$23 = /* module */[
  /* to_string */to_string$23,
  /* to_obj */to_obj$23
];

function make$28(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$23, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(ExpansionPanelActions.default, tmp, children);
}

var ExpansionPanelActions$1 = /* module */[
  /* Classes */Classes$23,
  /* make */make$28
];

function to_string$24() {
  return "root";
}

function to_obj$24(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$24 = /* module */[
  /* to_string */to_string$24,
  /* to_obj */to_obj$24
];

function make$29(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$24, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(ExpansionPanelDetails.default, tmp, children);
}

var ExpansionPanelDetails$1 = /* module */[
  /* Classes */Classes$24,
  /* make */make$29
];

function to_string$25(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "expanded";
    case 2 : 
        return "focused";
    case 3 : 
        return "disabled";
    case 4 : 
        return "content";
    case 5 : 
        return "contentExpanded";
    case 6 : 
        return "expandIcon";
    case 7 : 
        return "expandIconExpanded";
    
  }
}

function to_obj$25(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$25(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$25 = /* module */[
  /* to_string */to_string$25,
  /* to_obj */to_obj$25
];

function make$30(className, disabled, expanded, expandIcon, onChange, onClick, buttonRef, centerRipple, component, disableRipple, focusRipple, onBlur, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$1) {
    tmp.disabled = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, expanded);
  if (tmp$2) {
    tmp.expanded = tmp$2[0];
  }
  if (expandIcon) {
    tmp.expandIcon = expandIcon[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$3) {
    tmp.centerRipple = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, component);
  if (tmp$4) {
    tmp.component = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$5) {
    tmp.disableRipple = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$6) {
    tmp.focusRipple = tmp$6[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$7) {
    tmp.tabIndex = tmp$7[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$8 = Js_option.map(to_obj$25, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(ExpansionPanelSummary.default, tmp, children);
}

var ExpansionPanelSummary$1 = /* module */[
  /* Classes */Classes$25,
  /* make */make$30
];

function to_string$26(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "expanded";
    case 2 : 
        return "disabled";
    
  }
}

function to_obj$26(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$26(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$26 = /* module */[
  /* to_string */to_string$26,
  /* to_obj */to_obj$26
];

function make$31(className, collapseProps, defaultExpanded, disabled, expanded, onChange, component, elevation, square, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  if (collapseProps) {
    tmp.collapseProps = collapseProps[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, defaultExpanded);
  if (tmp$1) {
    tmp.defaultExpanded = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, expanded);
  if (tmp$3) {
    tmp.expanded = tmp$3[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, component);
  if (tmp$4) {
    tmp.component = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, elevation);
  if (tmp$5) {
    tmp.elevation = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$6) {
    tmp.square = tmp$6[0];
  }
  var tmp$7 = Js_option.map(to_obj$26, classes);
  if (tmp$7) {
    tmp.classes = tmp$7[0];
  }
  return ReasonReact.wrapJsForReason(ExpansionPanel.default, tmp, children);
}

var ExpansionPanel$1 = /* module */[
  /* Classes */Classes$26,
  /* make */make$31
];

function timeoutShapeToJs$1(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function timeoutShapeFromJs$1(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

function make$32(_in, onEnter, onEntering, onExit, style, theme, timeout, children) {
  var tmp = {
    theme: theme
  };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, _in);
  if (tmp$1) {
    tmp.in = tmp$1[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        timeoutShapeToJs$1(v[1])
                      ]);
          }
        }), timeout);
  if (tmp$2) {
    tmp.timeout = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Fade.default, tmp, children);
}

var Fade$1 = /* module */[
  /* timeoutShapeToJs */timeoutShapeToJs$1,
  /* timeoutShapeFromJs */timeoutShapeFromJs$1,
  /* make */make$32
];

function to_string$27(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "disabled";
    case 2 : 
        return "label";
    
  }
}

function to_obj$27(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$27(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$27 = /* module */[
  /* to_string */to_string$27,
  /* to_obj */to_obj$27
];

function make$33(checked, className, control, disabled, inputRef, label, name, onChange, value, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, checked);
  if (tmp$1) {
    tmp.checked = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (control) {
    tmp.control = control[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  if (label) {
    tmp.label = label[0];
  }
  if (name) {
    tmp.name = name[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  var tmp$3 = Js_option.map(to_obj$27, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(FormControlLabel.default, tmp, children);
}

var FormControlLabel$1 = /* module */[
  /* Classes */Classes$27,
  /* make */make$33
];

var jsMapperConstantArray$13 = /* array */[
  /* tuple */[
    -453122489,
    "normal"
  ],
  /* tuple */[
    -363472001,
    "dense"
  ],
  /* tuple */[
    870530776,
    "none"
  ]
];

function marginToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$13);
}

function marginFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$13, param);
}

function to_string$28(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "marginNormal";
    case 2 : 
        return "marginDense";
    case 3 : 
        return "fullWidth";
    
  }
}

function to_obj$28(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$28(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$28 = /* module */[
  /* to_string */to_string$28,
  /* to_obj */to_obj$28
];

function make$34(className, component, disabled, error, fullWidth, margin, onBlur, onFocus, required, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$3) {
    tmp.error = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$4) {
    tmp.fullWidth = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$13);
        }), margin);
  if (tmp$5) {
    tmp.margin = tmp$5[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, required);
  if (tmp$6) {
    tmp.required = tmp$6[0];
  }
  var tmp$7 = Js_option.map(to_obj$28, classes);
  if (tmp$7) {
    tmp.classes = tmp$7[0];
  }
  return ReasonReact.wrapJsForReason(FormControl.default, tmp, children);
}

var FormControl$1 = /* module */[
  /* marginToJs */marginToJs,
  /* marginFromJs */marginFromJs,
  /* Classes */Classes$28,
  /* make */make$34
];

function to_string$29(param) {
  if (param.tag) {
    return "row";
  } else {
    return "root";
  }
}

function to_obj$29(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$29(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$29 = /* module */[
  /* to_string */to_string$29,
  /* to_obj */to_obj$29
];

function make$35(className, row, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, row);
  if (tmp$1) {
    tmp.row = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$29, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(FormGroup.default, tmp, children);
}

var FormGroup$1 = /* module */[
  /* Classes */Classes$29,
  /* make */make$35
];

var jsMapperConstantArray$14 = /* array */[/* tuple */[
    -363472001,
    "dense"
  ]];

function marginToJs$1(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$14);
}

function marginFromJs$1(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$14, param);
}

function to_string$30(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "error";
    case 2 : 
        return "disabled";
    case 3 : 
        return "marginDense";
    
  }
}

function to_obj$30(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$30(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$30 = /* module */[
  /* to_string */to_string$30,
  /* to_obj */to_obj$30
];

function make$36(className, component, disabled, error, margin, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$3) {
    tmp.error = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(1, v, jsMapperConstantArray$14);
        }), margin);
  if (tmp$4) {
    tmp.margin = tmp$4[0];
  }
  var tmp$5 = Js_option.map(to_obj$30, classes);
  if (tmp$5) {
    tmp.classes = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(FormHelperText.default, tmp, children);
}

var FormHelperText$1 = /* module */[
  /* marginToJs */marginToJs$1,
  /* marginFromJs */marginFromJs$1,
  /* Classes */Classes$30,
  /* make */make$36
];

function to_string$31(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "focused";
    case 2 : 
        return "disabled";
    case 3 : 
        return "error";
    case 4 : 
        return "asterisk";
    case 5 : 
        return "asteriskError";
    
  }
}

function to_obj$31(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$31(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$31 = /* module */[
  /* to_string */to_string$31,
  /* to_obj */to_obj$31
];

function make$37(className, component, disabled, error, focused, required, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$3) {
    tmp.error = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, focused);
  if (tmp$4) {
    tmp.focused = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, required);
  if (tmp$5) {
    tmp.required = tmp$5[0];
  }
  var tmp$6 = Js_option.map(to_obj$31, classes);
  if (tmp$6) {
    tmp.classes = tmp$6[0];
  }
  return ReasonReact.wrapJsForReason(FormLabel.default, tmp, children);
}

var FormLabel$1 = /* module */[
  /* Classes */Classes$31,
  /* make */make$37
];

var jsMapperConstantArray$15 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ]
];

function actionPositionToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$15);
}

function actionPositionFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$15, param);
}

var jsMapperConstantArray$16 = /* array */[
  /* tuple */[
    4202101,
    "top"
  ],
  /* tuple */[
    437082891,
    "bottom"
  ]
];

function titlePositionToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$16);
}

function titlePositionFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$16, param);
}

function to_string$32(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "titlePositionBottom";
    case 2 : 
        return "titlePositionTop";
    case 3 : 
        return "rootSubtitle";
    case 4 : 
        return "titleWrap";
    case 5 : 
        return "titleWrapActionPosLeft";
    case 6 : 
        return "titleWrapActionPosRight";
    case 7 : 
        return "title";
    case 8 : 
        return "subtitle";
    case 9 : 
        return "actionIcon";
    case 10 : 
        return "actionIconActionPosLeft";
    
  }
}

function to_obj$32(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$32(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$32 = /* module */[
  /* to_string */to_string$32,
  /* to_obj */to_obj$32
];

function make$38(actionIcon, actionPosition, className, subtitle, title, titlePosition, classes, children) {
  var tmp = { };
  if (actionIcon) {
    tmp.actionIcon = actionIcon[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$15);
        }), actionPosition);
  if (tmp$1) {
    tmp.actionPosition = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (subtitle) {
    tmp.subtitle = subtitle[0];
  }
  if (title) {
    tmp.title = title[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$16);
        }), titlePosition);
  if (tmp$2) {
    tmp.titlePosition = tmp$2[0];
  }
  var tmp$3 = Js_option.map(to_obj$32, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(GridListTileBar.default, tmp, children);
}

var GridListTileBar$1 = /* module */[
  /* actionPositionToJs */actionPositionToJs,
  /* actionPositionFromJs */actionPositionFromJs,
  /* titlePositionToJs */titlePositionToJs,
  /* titlePositionFromJs */titlePositionFromJs,
  /* Classes */Classes$32,
  /* make */make$38
];

function to_string$33(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "tile";
    case 2 : 
        return "imgFullHeight";
    case 3 : 
        return "imgFullWidth";
    
  }
}

function to_obj$33(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$33(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$33 = /* module */[
  /* to_string */to_string$33,
  /* to_obj */to_obj$33
];

function make$39(className, cols, component, rows, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, cols);
  if (tmp$1) {
    tmp.cols = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, rows);
  if (tmp$3) {
    tmp.rows = tmp$3[0];
  }
  var tmp$4 = Js_option.map(to_obj$33, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(GridListTile.default, tmp, children);
}

var GridListTile$1 = /* module */[
  /* Classes */Classes$33,
  /* make */make$39
];

var jsMapperConstantArray$17 = /* array */[/* tuple */[
    726666127,
    "auto"
  ]];

function cellHeightToJs(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$17);
}

function cellHeightFromJs(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$17, param);
}

function to_string$34() {
  return "root";
}

function to_obj$34(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$34 = /* module */[
  /* to_string */to_string$34,
  /* to_obj */to_obj$34
];

function make$40(cellHeight, className, cols, component, spacing, style, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== 770676513) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `String */[
                        -976970511,
                        Js_mapperRt.binarySearch(1, v[1], jsMapperConstantArray$17)
                      ]);
          }
        }), cellHeight);
  if (tmp$1) {
    tmp.cellHeight = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, cols);
  if (tmp$2) {
    tmp.cols = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, component);
  if (tmp$3) {
    tmp.component = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, spacing);
  if (tmp$4) {
    tmp.spacing = tmp$4[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$5 = Js_option.map(to_obj$34, classes);
  if (tmp$5) {
    tmp.classes = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(GridList.default, tmp, children);
}

var GridList$1 = /* module */[
  /* cellHeightToJs */cellHeightToJs,
  /* cellHeightFromJs */cellHeightFromJs,
  /* Classes */Classes$34,
  /* make */make$40
];

var jsMapperConstantArray$18 = /* array */[
  /* tuple */[
    -1012636187,
    "stretch"
  ],
  /* tuple */[
    -403022699,
    "flex-end"
  ],
  /* tuple */[
    199819814,
    "space-around"
  ],
  /* tuple */[
    877391772,
    "flex-start"
  ],
  /* tuple */[
    959915471,
    "space-between"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignContentToJs(param) {
  return Js_mapperRt.binarySearch(6, param, jsMapperConstantArray$18);
}

function alignContentFromJs(param) {
  return Js_mapperRt.revSearch(6, jsMapperConstantArray$18, param);
}

var jsMapperConstantArray$19 = /* array */[
  /* tuple */[
    -1012636187,
    "stretch"
  ],
  /* tuple */[
    -403022699,
    "flex-end"
  ],
  /* tuple */[
    -354838363,
    "baseline"
  ],
  /* tuple */[
    877391772,
    "flex-start"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignItemsToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$19);
}

function alignItemsFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$19, param);
}

var jsMapperConstantArray$20 = /* array */[
  /* tuple */[
    -674898307,
    "row-reverse"
  ],
  /* tuple */[
    -105749639,
    "column-reverse"
  ],
  /* tuple */[
    -81804554,
    "column"
  ],
  /* tuple */[
    4102650,
    "row"
  ]
];

function directionToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$20);
}

function directionFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$20, param);
}

var jsMapperConstantArray$21 = /* array */[
  /* tuple */[
    -403022699,
    "flex-end"
  ],
  /* tuple */[
    199819814,
    "space-around"
  ],
  /* tuple */[
    877391772,
    "flex-start"
  ],
  /* tuple */[
    959915471,
    "space-between"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function justifyToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$21);
}

function justifyFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$21, param);
}

var jsMapperConstantArray$22 = /* array */[
  1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12
];

function lgToJs(param) {
  return Js_mapperRt.toInt(param, jsMapperConstantArray$22);
}

function lgFromJs(param) {
  return Js_mapperRt.fromInt(13, jsMapperConstantArray$22, param);
}

var jsMapperConstantArray$23 = /* array */[
  1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12
];

function mdToJs(param) {
  return Js_mapperRt.toInt(param, jsMapperConstantArray$23);
}

function mdFromJs(param) {
  return Js_mapperRt.fromInt(13, jsMapperConstantArray$23, param);
}

var jsMapperConstantArray$24 = /* array */[
  1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12
];

function smToJs(param) {
  return Js_mapperRt.toInt(param, jsMapperConstantArray$24);
}

function smFromJs(param) {
  return Js_mapperRt.fromInt(13, jsMapperConstantArray$24, param);
}

var jsMapperConstantArray$25 = /* array */[
  0,
  8,
  16,
  24,
  40
];

function spacingToJs(param) {
  return Js_mapperRt.toInt(param, jsMapperConstantArray$25);
}

function spacingFromJs(param) {
  return Js_mapperRt.fromInt(5, jsMapperConstantArray$25, param);
}

var jsMapperConstantArray$26 = /* array */[
  /* tuple */[
    -397426005,
    "nowrap"
  ],
  /* tuple */[
    49617517,
    "wrap-reverse"
  ],
  /* tuple */[
    970483178,
    "wrap"
  ]
];

function wrapToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$26);
}

function wrapFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$26, param);
}

var jsMapperConstantArray$27 = /* array */[
  1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12
];

function xlToJs(param) {
  return Js_mapperRt.toInt(param, jsMapperConstantArray$27);
}

function xlFromJs(param) {
  return Js_mapperRt.fromInt(13, jsMapperConstantArray$27, param);
}

var jsMapperConstantArray$28 = /* array */[
  1,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12
];

function xsToJs(param) {
  return Js_mapperRt.toInt(param, jsMapperConstantArray$28);
}

function xsFromJs(param) {
  return Js_mapperRt.fromInt(13, jsMapperConstantArray$28, param);
}

function to_string$35(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "typeContainer";
    case 1 : 
        return "typeItem";
    case 2 : 
        return "zeroMinWidth";
    case 3 : 
        return "direction-xs-column";
    case 4 : 
        return "direction-xs-column-reverse";
    case 5 : 
        return "direction-xs-row-reverse";
    case 6 : 
        return "wrap-xs-nowrap";
    case 7 : 
        return "wrap-xs-wrap-reverse";
    case 8 : 
        return "align-items-xs-center";
    case 9 : 
        return "align-items-xs-flex-start";
    case 10 : 
        return "align-items-xs-flex-end";
    case 11 : 
        return "align-items-xs-baseline";
    case 12 : 
        return "align-content-xs-center";
    case 13 : 
        return "align-content-xs-flex-start";
    case 14 : 
        return "align-content-xs-flex-end";
    case 15 : 
        return "align-content-xs-space-between";
    case 16 : 
        return "align-content-xs-space-around";
    case 17 : 
        return "justify-xs-center";
    case 18 : 
        return "justify-xs-flex-end";
    case 19 : 
        return "justify-xs-space-between";
    case 20 : 
        return "justify-xs-space-around";
    case 21 : 
        return "spacing-xs-8";
    case 22 : 
        return "spacing-xs-16";
    case 23 : 
        return "spacing-xs-24";
    case 24 : 
        return "spacing-xs-40";
    case 25 : 
        return "grid-xs";
    case 26 : 
        return "grid-xs-1";
    case 27 : 
        return "grid-xs-2";
    case 28 : 
        return "grid-xs-3";
    case 29 : 
        return "grid-xs-4";
    case 30 : 
        return "grid-xs-5";
    case 31 : 
        return "grid-xs-6";
    case 32 : 
        return "grid-xs-7";
    case 33 : 
        return "grid-xs-8";
    case 34 : 
        return "grid-xs-9";
    case 35 : 
        return "grid-xs-10";
    case 36 : 
        return "grid-xs-11";
    case 37 : 
        return "grid-xs-12";
    
  }
}

function to_obj$35(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$35(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$35 = /* module */[
  /* to_string */to_string$35,
  /* to_obj */to_obj$35
];

function make$41(alignContent, alignItems, className, component, container, direction, hidden, item, justify, lg, md, sm, spacing, wrap, xl, xs, zeroMinWidth, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(6, v, jsMapperConstantArray$18);
        }), alignContent);
  if (tmp$1) {
    tmp.alignContent = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(5, v, jsMapperConstantArray$19);
        }), alignItems);
  if (tmp$2) {
    tmp.alignItems = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, component);
  if (tmp$3) {
    tmp.component = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, container);
  if (tmp$4) {
    tmp.container = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$20);
        }), direction);
  if (tmp$5) {
    tmp.direction = tmp$5[0];
  }
  if (hidden) {
    tmp.hidden = hidden[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, item);
  if (tmp$6) {
    tmp.item = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(5, v, jsMapperConstantArray$21);
        }), justify);
  if (tmp$7) {
    tmp.justify = tmp$7[0];
  }
  var tmp$8 = Js_option.map((function (v) {
          return Js_mapperRt.toInt(v, jsMapperConstantArray$22);
        }), lg);
  if (tmp$8) {
    tmp.lg = tmp$8[0];
  }
  var tmp$9 = Js_option.map((function (v) {
          return Js_mapperRt.toInt(v, jsMapperConstantArray$23);
        }), md);
  if (tmp$9) {
    tmp.md = tmp$9[0];
  }
  var tmp$10 = Js_option.map((function (v) {
          return Js_mapperRt.toInt(v, jsMapperConstantArray$24);
        }), sm);
  if (tmp$10) {
    tmp.sm = tmp$10[0];
  }
  var tmp$11 = Js_option.map((function (v) {
          return Js_mapperRt.toInt(v, jsMapperConstantArray$25);
        }), spacing);
  if (tmp$11) {
    tmp.spacing = tmp$11[0];
  }
  var tmp$12 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$26);
        }), wrap);
  if (tmp$12) {
    tmp.wrap = tmp$12[0];
  }
  var tmp$13 = Js_option.map((function (v) {
          return Js_mapperRt.toInt(v, jsMapperConstantArray$27);
        }), xl);
  if (tmp$13) {
    tmp.xl = tmp$13[0];
  }
  var tmp$14 = Js_option.map((function (v) {
          return Js_mapperRt.toInt(v, jsMapperConstantArray$28);
        }), xs);
  if (tmp$14) {
    tmp.xs = tmp$14[0];
  }
  var tmp$15 = Js_option.map(Js_boolean.to_js_boolean, zeroMinWidth);
  if (tmp$15) {
    tmp.zeroMinWidth = tmp$15[0];
  }
  var tmp$16 = Js_option.map(to_obj$35, classes);
  if (tmp$16) {
    tmp.classes = tmp$16[0];
  }
  return ReasonReact.wrapJsForReason(Grid.default, tmp, children);
}

var Grid$1 = /* module */[
  /* alignContentToJs */alignContentToJs,
  /* alignContentFromJs */alignContentFromJs,
  /* alignItemsToJs */alignItemsToJs,
  /* alignItemsFromJs */alignItemsFromJs,
  /* directionToJs */directionToJs,
  /* directionFromJs */directionFromJs,
  /* justifyToJs */justifyToJs,
  /* justifyFromJs */justifyFromJs,
  /* lgToJs */lgToJs,
  /* lgFromJs */lgFromJs,
  /* mdToJs */mdToJs,
  /* mdFromJs */mdFromJs,
  /* smToJs */smToJs,
  /* smFromJs */smFromJs,
  /* spacingToJs */spacingToJs,
  /* spacingFromJs */spacingFromJs,
  /* wrapToJs */wrapToJs,
  /* wrapFromJs */wrapFromJs,
  /* xlToJs */xlToJs,
  /* xlFromJs */xlFromJs,
  /* xsToJs */xsToJs,
  /* xsFromJs */xsFromJs,
  /* Classes */Classes$35,
  /* make */make$41
];

function timeoutShapeToJs$2(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function timeoutShapeFromJs$2(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

var jsMapperConstantArray$29 = /* array */[/* tuple */[
    726666127,
    "auto"
  ]];

function timeoutToJs$1(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$29);
}

function timeoutFromJs$1(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$29, param);
}

function make$42(_in, onEnter, onEntered, onEntering, onExit, style, theme, timeout, children) {
  var tmp = {
    theme: theme
  };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, _in);
  if (tmp$1) {
    tmp.in = tmp$1[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          if (typeof v === "number") {
            return unwrapValue(v);
          } else {
            var variant = v[0];
            if (variant !== -908856609) {
              if (variant !== 770676513) {
                return unwrapValue(v);
              } else {
                return unwrapValue(/* `String */[
                            -976970511,
                            Js_mapperRt.binarySearch(1, v[1], jsMapperConstantArray$29)
                          ]);
              }
            } else {
              return unwrapValue(/* `Element */[
                          -744106340,
                          timeoutShapeToJs$2(v[1])
                        ]);
            }
          }
        }), timeout);
  if (tmp$2) {
    tmp.timeout = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Grow.default, tmp, children);
}

var Grow$1 = /* module */[
  /* timeoutShapeToJs */timeoutShapeToJs$2,
  /* timeoutShapeFromJs */timeoutShapeFromJs$2,
  /* timeoutToJs */timeoutToJs$1,
  /* timeoutFromJs */timeoutFromJs$1,
  /* make */make$42
];

var jsMapperConstantArray$30 = /* array */[
  /* tuple */[
    16617,
    "js"
  ],
  /* tuple */[
    3357603,
    "css"
  ]
];

function implementationToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$30);
}

function implementationFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$30, param);
}

var jsMapperConstantArray$31 = /* array */[
  /* tuple */[
    17051,
    "lg"
  ],
  /* tuple */[
    17271,
    "md"
  ],
  /* tuple */[
    18618,
    "sm"
  ],
  /* tuple */[
    19732,
    "xl"
  ],
  /* tuple */[
    19739,
    "xs"
  ]
];

function initialWidthToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$31);
}

function initialWidthFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$31, param);
}

var jsMapperConstantArray$32 = /* array */[
  /* tuple */[
    17051,
    "lg"
  ],
  /* tuple */[
    17271,
    "md"
  ],
  /* tuple */[
    18618,
    "sm"
  ],
  /* tuple */[
    19732,
    "xl"
  ],
  /* tuple */[
    19739,
    "xs"
  ]
];

function onlyToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$32);
}

function onlyFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$32, param);
}

function make$43(className, implementation, initialWidth, lgDown, lgUp, mdDown, mdUp, only, smDown, smUp, xlDown, xlUp, xsDown, xsUp, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$30);
        }), implementation);
  if (tmp$1) {
    tmp.implementation = tmp$1[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(5, v, jsMapperConstantArray$31);
        }), initialWidth);
  if (tmp$2) {
    tmp.initialWidth = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, lgDown);
  if (tmp$3) {
    tmp.lgDown = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, lgUp);
  if (tmp$4) {
    tmp.lgUp = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, mdDown);
  if (tmp$5) {
    tmp.mdDown = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, mdUp);
  if (tmp$6) {
    tmp.mdUp = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          if (v[0] >= 1034997432) {
            return unwrapValue(/* `Element */[
                        -744106340,
                        $$Array.map(onlyToJs, v[1])
                      ]);
          } else {
            return unwrapValue(/* `String */[
                        -976970511,
                        Js_mapperRt.binarySearch(5, v[1], jsMapperConstantArray$32)
                      ]);
          }
        }), only);
  if (tmp$7) {
    tmp.only = tmp$7[0];
  }
  var tmp$8 = Js_option.map(Js_boolean.to_js_boolean, smDown);
  if (tmp$8) {
    tmp.smDown = tmp$8[0];
  }
  var tmp$9 = Js_option.map(Js_boolean.to_js_boolean, smUp);
  if (tmp$9) {
    tmp.smUp = tmp$9[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, xlDown);
  if (tmp$10) {
    tmp.xlDown = tmp$10[0];
  }
  var tmp$11 = Js_option.map(Js_boolean.to_js_boolean, xlUp);
  if (tmp$11) {
    tmp.xlUp = tmp$11[0];
  }
  var tmp$12 = Js_option.map(Js_boolean.to_js_boolean, xsDown);
  if (tmp$12) {
    tmp.xsDown = tmp$12[0];
  }
  var tmp$13 = Js_option.map(Js_boolean.to_js_boolean, xsUp);
  if (tmp$13) {
    tmp.xsUp = tmp$13[0];
  }
  return ReasonReact.wrapJsForReason(Hidden.default, tmp, children);
}

var Hidden$1 = /* module */[
  /* implementationToJs */implementationToJs,
  /* implementationFromJs */implementationFromJs,
  /* initialWidthToJs */initialWidthToJs,
  /* initialWidthFromJs */initialWidthFromJs,
  /* onlyToJs */onlyToJs,
  /* onlyFromJs */onlyFromJs,
  /* make */make$43
];

var jsMapperConstantArray$33 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$5(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$33);
}

function colorFromJs$5(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$33, param);
}

function to_string$36(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorInherit";
    case 2 : 
        return "colorPrimary";
    case 3 : 
        return "colorSecondary";
    case 4 : 
        return "disabled";
    case 5 : 
        return "label";
    
  }
}

function to_obj$36(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$36(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$36 = /* module */[
  /* to_string */to_string$36,
  /* to_obj */to_obj$36
];

function make$44(className, color, disabled, disableRipple, buttonRef, centerRipple, component, focusRipple, onBlur, onClick, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$33);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$3) {
    tmp.disableRipple = tmp$3[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$4) {
    tmp.centerRipple = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, component);
  if (tmp$5) {
    tmp.component = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$6) {
    tmp.focusRipple = tmp$6[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$7) {
    tmp.tabIndex = tmp$7[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$8 = Js_option.map(to_obj$36, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(IconButton.default, tmp, children);
}

var IconButton$1 = /* module */[
  /* colorToJs */colorToJs$5,
  /* colorFromJs */colorFromJs$5,
  /* Classes */Classes$36,
  /* make */make$44
];

var jsMapperConstantArray$34 = /* array */[
  /* tuple */[
    -891637802,
    "action"
  ],
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -709493348,
    "disabled"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ],
  /* tuple */[
    106380200,
    "error"
  ]
];

function colorToJs$6(param) {
  return Js_mapperRt.binarySearch(6, param, jsMapperConstantArray$34);
}

function colorFromJs$6(param) {
  return Js_mapperRt.revSearch(6, jsMapperConstantArray$34, param);
}

function to_string$37(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorPrimary";
    case 2 : 
        return "colorSecondary";
    case 3 : 
        return "colorAction";
    case 4 : 
        return "colorDisabled";
    case 5 : 
        return "colorError";
    
  }
}

function to_obj$37(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$37(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$37 = /* module */[
  /* to_string */to_string$37,
  /* to_obj */to_obj$37
];

function make$45(className, color, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(6, v, jsMapperConstantArray$34);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$37, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Icon.default, tmp, children);
}

var Icon$1 = /* module */[
  /* colorToJs */colorToJs$6,
  /* colorFromJs */colorFromJs$6,
  /* Classes */Classes$37,
  /* make */make$45
];

var jsMapperConstantArray$35 = /* array */[
  /* tuple */[
    3455931,
    "end"
  ],
  /* tuple */[
    389604418,
    "start"
  ]
];

function positionToJs$1(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$35);
}

function positionFromJs$1(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$35, param);
}

function to_string$38(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "positionStart";
    case 2 : 
        return "positionEnd";
    
  }
}

function to_obj$38(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$38(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$38 = /* module */[
  /* to_string */to_string$38,
  /* to_obj */to_obj$38
];

function make$46(className, component, disableTypography, position, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disableTypography);
  if (tmp$2) {
    tmp.disableTypography = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$35);
        }), position);
  if (tmp$3) {
    tmp.position = tmp$3[0];
  }
  var tmp$4 = Js_option.map(to_obj$38, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(InputAdornment.default, tmp, children);
}

var InputAdornment$1 = /* module */[
  /* positionToJs */positionToJs$1,
  /* positionFromJs */positionFromJs$1,
  /* Classes */Classes$38,
  /* make */make$46
];

var jsMapperConstantArray$36 = /* array */[/* tuple */[
    -363472001,
    "dense"
  ]];

function marginToJs$2(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$36);
}

function marginFromJs$2(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$36, param);
}

function to_string$39(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "formControl";
    case 2 : 
        return "marginDense";
    case 3 : 
        return "shrink";
    case 4 : 
        return "animated";
    case 5 : 
        return "disabled";
    
  }
}

function to_obj$39(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$39(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$39 = /* module */[
  /* to_string */to_string$39,
  /* to_obj */to_obj$39
];

function make$47(className, disableAnimation, disabled, error, focused, formControlClasses, margin, required, shrink, component, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableAnimation);
  if (tmp$1) {
    tmp.disableAnimation = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$3) {
    tmp.error = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, focused);
  if (tmp$4) {
    tmp.focused = tmp$4[0];
  }
  if (formControlClasses) {
    tmp.formControlClasses = formControlClasses[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(1, v, jsMapperConstantArray$36);
        }), margin);
  if (tmp$5) {
    tmp.margin = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, required);
  if (tmp$6) {
    tmp.required = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, shrink);
  if (tmp$7) {
    tmp.shrink = tmp$7[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, component);
  if (tmp$8) {
    tmp.component = tmp$8[0];
  }
  var tmp$9 = Js_option.map(to_obj$39, classes);
  if (tmp$9) {
    tmp.classes = tmp$9[0];
  }
  return ReasonReact.wrapJsForReason(InputLabel.default, tmp, children);
}

var InputLabel$1 = /* module */[
  /* marginToJs */marginToJs$2,
  /* marginFromJs */marginFromJs$2,
  /* Classes */Classes$39,
  /* make */make$47
];

var jsMapperConstantArray$37 = /* array */[
  /* tuple */[
    -363472001,
    "dense"
  ],
  /* tuple */[
    870530776,
    "none"
  ]
];

function marginToJs$3(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$37);
}

function marginFromJs$3(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$37, param);
}

function to_string$40(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "formControl";
    case 2 : 
        return "focused";
    case 3 : 
        return "disabled";
    case 4 : 
        return "underline";
    case 5 : 
        return "error";
    case 6 : 
        return "multiline";
    case 7 : 
        return "fullWidth";
    case 8 : 
        return "input";
    case 9 : 
        return "inputMarginDense";
    case 10 : 
        return "inputDisabled";
    case 11 : 
        return "inputMultiline";
    case 12 : 
        return "inputType";
    case 13 : 
        return "inputTypeSearch";
    
  }
}

function to_obj$40(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$40(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$40 = /* module */[
  /* to_string */to_string$40,
  /* to_obj */to_obj$40
];

function make$48(autoComplete, autoFocus, className, defaultValue, disabled, disableUnderline, endAdornment, error, fullWidth, id, inputComponent, inputProps, inputRef, margin, multiline, name, onBlur, onChange, onClean, onDirty, onFocus, onKeyDown, onKeyUp, placeholder, readOnly, rows, rowsMax, startAdornment, _type, value, classes, children) {
  var tmp = { };
  if (autoComplete) {
    tmp.autoComplete = autoComplete[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, autoFocus);
  if (tmp$1) {
    tmp.autoFocus = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, defaultValue);
  if (tmp$2) {
    tmp.defaultValue = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$3) {
    tmp.disabled = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disableUnderline);
  if (tmp$4) {
    tmp.disableUnderline = tmp$4[0];
  }
  if (endAdornment) {
    tmp.endAdornment = endAdornment[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$5) {
    tmp.error = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$6) {
    tmp.fullWidth = tmp$6[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, inputComponent);
  if (tmp$7) {
    tmp.inputComponent = tmp$7[0];
  }
  if (inputProps) {
    tmp.inputProps = inputProps[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  var tmp$8 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$37);
        }), margin);
  if (tmp$8) {
    tmp.margin = tmp$8[0];
  }
  var tmp$9 = Js_option.map(Js_boolean.to_js_boolean, multiline);
  if (tmp$9) {
    tmp.multiline = tmp$9[0];
  }
  if (name) {
    tmp.name = name[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (onClean) {
    tmp.onClean = onClean[0];
  }
  if (onDirty) {
    tmp.onDirty = onDirty[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (placeholder) {
    tmp.placeholder = placeholder[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, readOnly);
  if (tmp$10) {
    tmp.readOnly = tmp$10[0];
  }
  var tmp$11 = Js_option.map(unwrapValue, rows);
  if (tmp$11) {
    tmp.rows = tmp$11[0];
  }
  var tmp$12 = Js_option.map(unwrapValue, rowsMax);
  if (tmp$12) {
    tmp.rowsMax = tmp$12[0];
  }
  if (startAdornment) {
    tmp.startAdornment = startAdornment[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$13 = Js_option.map(unwrapValue, value);
  if (tmp$13) {
    tmp.value = tmp$13[0];
  }
  var tmp$14 = Js_option.map(to_obj$40, classes);
  if (tmp$14) {
    tmp.classes = tmp$14[0];
  }
  return ReasonReact.wrapJsForReason(Input.default, tmp, children);
}

var Input$1 = /* module */[
  /* marginToJs */marginToJs$3,
  /* marginFromJs */marginFromJs$3,
  /* Classes */Classes$40,
  /* make */make$48
];

var jsMapperConstantArray$38 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$7(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$38);
}

function colorFromJs$7(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$38, param);
}

var jsMapperConstantArray$39 = /* array */[
  /* tuple */[
    -700823845,
    "indeterminate"
  ],
  /* tuple */[
    -250086680,
    "query"
  ],
  /* tuple */[
    86585632,
    "buffer"
  ],
  /* tuple */[
    373815968,
    "determinate"
  ]
];

function variantToJs$3(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$39);
}

function variantFromJs$3(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$39, param);
}

function to_string$41(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorPrimary";
    case 2 : 
        return "colorSecondary";
    case 3 : 
        return "buffer";
    case 4 : 
        return "query";
    case 5 : 
        return "dashed";
    case 6 : 
        return "dashedColorPrimary";
    case 7 : 
        return "dashedColorSecondary";
    case 8 : 
        return "bar";
    case 9 : 
        return "barColorPrimary";
    case 10 : 
        return "barColorSecondary";
    case 11 : 
        return "bar1Indeterminate";
    case 12 : 
        return "bar2Indeterminate";
    case 13 : 
        return "bar1Determinate";
    case 14 : 
        return "bar1Buffer";
    case 15 : 
        return "bar2Buffer";
    
  }
}

function to_obj$41(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$41(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$41 = /* module */[
  /* to_string */to_string$41,
  /* to_obj */to_obj$41
];

function make$49(className, color, value, valueBuffer, variant, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$38);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, value);
  if (tmp$2) {
    tmp.value = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, valueBuffer);
  if (tmp$3) {
    tmp.valueBuffer = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$39);
        }), variant);
  if (tmp$4) {
    tmp.variant = tmp$4[0];
  }
  var tmp$5 = Js_option.map(to_obj$41, classes);
  if (tmp$5) {
    tmp.classes = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(LinearProgress.default, tmp, children);
}

var LinearProgress$1 = /* module */[
  /* colorToJs */colorToJs$7,
  /* colorFromJs */colorFromJs$7,
  /* variantToJs */variantToJs$3,
  /* variantFromJs */variantFromJs$3,
  /* Classes */Classes$41,
  /* make */make$49
];

function to_string$42(param) {
  if (param.tag) {
    return "icon";
  } else {
    return "root";
  }
}

function to_obj$42(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$42(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$42 = /* module */[
  /* to_string */to_string$42,
  /* to_obj */to_obj$42
];

function make$50(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$42, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(ListItemAvatar.default, tmp, children);
}

var ListItemAvatar$1 = /* module */[
  /* Classes */Classes$42,
  /* make */make$50
];

function to_string$43() {
  return "root";
}

function to_obj$43(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$43 = /* module */[
  /* to_string */to_string$43,
  /* to_obj */to_obj$43
];

function make$51(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$43, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(ListItemIcon.default, tmp, children);
}

var ListItemIcon$1 = /* module */[
  /* Classes */Classes$43,
  /* make */make$51
];

function to_string$44() {
  return "root";
}

function to_obj$44(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$44 = /* module */[
  /* to_string */to_string$44,
  /* to_obj */to_obj$44
];

function make$52(className, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(to_obj$44, classes);
  if (tmp$1) {
    tmp.classes = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(ListItemSecondaryAction.default, tmp, children);
}

var ListItemSecondaryAction$1 = /* module */[
  /* Classes */Classes$44,
  /* make */make$52
];

function to_string$45(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "inset";
    case 2 : 
        return "dense";
    case 3 : 
        return "primary";
    case 4 : 
        return "secondary";
    case 5 : 
        return "textDense";
    
  }
}

function to_obj$45(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$45(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$45 = /* module */[
  /* to_string */to_string$45,
  /* to_obj */to_obj$45
];

function make$53(className, disableTypography, inset, primary, secondary, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableTypography);
  if (tmp$1) {
    tmp.disableTypography = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, inset);
  if (tmp$2) {
    tmp.inset = tmp$2[0];
  }
  if (primary) {
    tmp.primary = primary[0];
  }
  if (secondary) {
    tmp.secondary = secondary[0];
  }
  var tmp$3 = Js_option.map(to_obj$45, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(ListItemText.default, tmp, children);
}

var ListItemText$1 = /* module */[
  /* Classes */Classes$45,
  /* make */make$53
];

function to_string$46(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "container";
    case 2 : 
        return "keyboardFocused";
    case 3 : 
        return "default";
    case 4 : 
        return "dense";
    case 5 : 
        return "disabled";
    case 6 : 
        return "divider";
    case 7 : 
        return "gutters";
    case 8 : 
        return "button";
    case 9 : 
        return "secondaryAction";
    
  }
}

function to_obj$46(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$46(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$46 = /* module */[
  /* to_string */to_string$46,
  /* to_obj */to_obj$46
];

function make$54(button, className, component, containerComponent, containerProps, dense, disabled, disableGutters, divider, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, button);
  if (tmp$1) {
    tmp.button = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, containerComponent);
  if (tmp$3) {
    tmp.containerComponent = tmp$3[0];
  }
  if (containerProps) {
    tmp.containerProps = containerProps[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, dense);
  if (tmp$4) {
    tmp.dense = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$5) {
    tmp.disabled = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, disableGutters);
  if (tmp$6) {
    tmp.disableGutters = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, divider);
  if (tmp$7) {
    tmp.divider = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$46, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(ListItem.default, tmp, children);
}

var ListItem$1 = /* module */[
  /* Classes */Classes$46,
  /* make */make$54
];

var jsMapperConstantArray$40 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ]
];

function colorToJs$8(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$40);
}

function colorFromJs$8(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$40, param);
}

function to_string$47(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorPrimary";
    case 2 : 
        return "colorInherit";
    case 3 : 
        return "inset";
    case 4 : 
        return "sticky";
    
  }
}

function to_obj$47(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$47(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$47 = /* module */[
  /* to_string */to_string$47,
  /* to_obj */to_obj$47
];

function make$55(className, color, component, disableSticky, inset, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$40);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, component);
  if (tmp$2) {
    tmp.component = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disableSticky);
  if (tmp$3) {
    tmp.disableSticky = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, inset);
  if (tmp$4) {
    tmp.inset = tmp$4[0];
  }
  var tmp$5 = Js_option.map(to_obj$47, classes);
  if (tmp$5) {
    tmp.classes = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(ListSubheader.default, tmp, children);
}

var ListSubheader$1 = /* module */[
  /* colorToJs */colorToJs$8,
  /* colorFromJs */colorFromJs$8,
  /* Classes */Classes$47,
  /* make */make$55
];

function to_string$48(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "padding";
    case 2 : 
        return "dense";
    case 3 : 
        return "subheader";
    
  }
}

function to_obj$48(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$48(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$48 = /* module */[
  /* to_string */to_string$48,
  /* to_obj */to_obj$48
];

function make$56(className, component, dense, disablePadding, subheader, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, dense);
  if (tmp$2) {
    tmp.dense = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disablePadding);
  if (tmp$3) {
    tmp.disablePadding = tmp$3[0];
  }
  if (subheader) {
    tmp.subheader = subheader[0];
  }
  var tmp$4 = Js_option.map(to_obj$48, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(List.default, tmp, children);
}

var List$1 = /* module */[
  /* Classes */Classes$48,
  /* make */make$56
];

function to_string$49(param) {
  if (param.tag) {
    return "selected";
  } else {
    return "root";
  }
}

function to_obj$49(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$49(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$49 = /* module */[
  /* to_string */to_string$49,
  /* to_obj */to_obj$49
];

function make$57(className, component, role, selected, button, containerComponent, containerProps, dense, disabled, disableGutters, divider, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, selected);
  if (tmp$2) {
    tmp.selected = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, button);
  if (tmp$3) {
    tmp.button = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, containerComponent);
  if (tmp$4) {
    tmp.containerComponent = tmp$4[0];
  }
  if (containerProps) {
    tmp.containerProps = containerProps[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, dense);
  if (tmp$5) {
    tmp.dense = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$6) {
    tmp.disabled = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, disableGutters);
  if (tmp$7) {
    tmp.disableGutters = tmp$7[0];
  }
  var tmp$8 = Js_option.map(Js_boolean.to_js_boolean, divider);
  if (tmp$8) {
    tmp.divider = tmp$8[0];
  }
  var tmp$9 = Js_option.map(to_obj$49, classes);
  if (tmp$9) {
    tmp.classes = tmp$9[0];
  }
  return ReasonReact.wrapJsForReason(MenuItem.default, tmp, children);
}

var MenuItem$1 = /* module */[
  /* Classes */Classes$49,
  /* make */make$57
];

function make$58(className, onBlur, onKeyDown, component, dense, disablePadding, subheader, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, dense);
  if (tmp$2) {
    tmp.dense = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disablePadding);
  if (tmp$3) {
    tmp.disablePadding = tmp$3[0];
  }
  if (subheader) {
    tmp.subheader = subheader[0];
  }
  return ReasonReact.wrapJsForReason(MenuList.default, tmp, children);
}

var MenuList$1 = /* module */[/* make */make$58];

function transitionDurationShapeToJs$3(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs$3(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

var jsMapperConstantArray$41 = /* array */[/* tuple */[
    726666127,
    "auto"
  ]];

function transitionDurationToJs(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$41);
}

function transitionDurationFromJs(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$41, param);
}

function anchorOriginShapeToJs(param) {
  return {
          horizontal: param[/* horizontal */0],
          vertical: param[/* vertical */1]
        };
}

function anchorOriginShapeFromJs(param) {
  return /* record */[
          /* horizontal */param.horizontal,
          /* vertical */param.vertical
        ];
}

function anchorPositionShapeToJs(param) {
  return {
          top: param[/* top */0],
          left: param[/* left */1]
        };
}

function anchorPositionShapeFromJs(param) {
  return /* record */[
          /* top */param.top,
          /* left */param.left
        ];
}

var jsMapperConstantArray$42 = /* array */[
  /* tuple */[
    580003934,
    "anchorPosition"
  ],
  /* tuple */[
    616462940,
    "anchorEl"
  ]
];

function anchorReferenceToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$42);
}

function anchorReferenceFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$42, param);
}

function transformOriginShapeToJs(param) {
  return {
          horizontal: param[/* horizontal */0],
          vertical: param[/* vertical */1]
        };
}

function transformOriginShapeFromJs(param) {
  return /* record */[
          /* horizontal */param.horizontal,
          /* vertical */param.vertical
        ];
}

function to_string$50() {
  return "paper";
}

function to_obj$50(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["paper"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$50 = /* module */[
  /* to_string */to_string$50,
  /* to_obj */to_obj$50
];

function make$59(anchorEl, menuListProps, onClose, onEnter, onEntered, onEntering, onExit, onExited, onExiting, _open, paperProps, popoverClasses, theme, transitionDuration, action, anchorOrigin, anchorPosition, anchorReference, container, elevation, getContentAnchorEl, marginThreshold, role, transformOrigin, transition, classes, children) {
  var tmp = {
    open: Js_boolean.to_js_boolean(_open),
    theme: theme
  };
  if (anchorEl) {
    tmp.anchorEl = anchorEl[0];
  }
  if (menuListProps) {
    tmp.menuListProps = menuListProps[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (onExited) {
    tmp.onExited = onExited[0];
  }
  if (onExiting) {
    tmp.onExiting = onExiting[0];
  }
  if (paperProps) {
    tmp.paperProps = paperProps[0];
  }
  if (popoverClasses) {
    tmp.popoverClasses = popoverClasses[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          if (typeof v === "number") {
            return unwrapValue(v);
          } else {
            var variant = v[0];
            if (variant !== -908856609) {
              if (variant !== 770676513) {
                return unwrapValue(v);
              } else {
                return unwrapValue(/* `String */[
                            -976970511,
                            Js_mapperRt.binarySearch(1, v[1], jsMapperConstantArray$41)
                          ]);
              }
            } else {
              return unwrapValue(/* `Element */[
                          -744106340,
                          transitionDurationShapeToJs$3(v[1])
                        ]);
            }
          }
        }), transitionDuration);
  if (tmp$1) {
    tmp.transitionDuration = tmp$1[0];
  }
  if (action) {
    tmp.action = action[0];
  }
  var tmp$2 = Js_option.map(anchorOriginShapeToJs, anchorOrigin);
  if (tmp$2) {
    tmp.anchorOrigin = tmp$2[0];
  }
  var tmp$3 = Js_option.map(anchorPositionShapeToJs, anchorPosition);
  if (tmp$3) {
    tmp.anchorPosition = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$42);
        }), anchorReference);
  if (tmp$4) {
    tmp.anchorReference = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, container);
  if (tmp$5) {
    tmp.container = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, elevation);
  if (tmp$6) {
    tmp.elevation = tmp$6[0];
  }
  if (getContentAnchorEl) {
    tmp.getContentAnchorEl = getContentAnchorEl[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, marginThreshold);
  if (tmp$7) {
    tmp.marginThreshold = tmp$7[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$8 = Js_option.map(transformOriginShapeToJs, transformOrigin);
  if (tmp$8) {
    tmp.transformOrigin = tmp$8[0];
  }
  var tmp$9 = Js_option.map(unwrapValue, transition);
  if (tmp$9) {
    tmp.transition = tmp$9[0];
  }
  var tmp$10 = Js_option.map(to_obj$50, classes);
  if (tmp$10) {
    tmp.classes = tmp$10[0];
  }
  return ReasonReact.wrapJsForReason(Menu.default, tmp, children);
}

var Menu$1 = /* module */[
  /* transitionDurationShapeToJs */transitionDurationShapeToJs$3,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs$3,
  /* transitionDurationToJs */transitionDurationToJs,
  /* transitionDurationFromJs */transitionDurationFromJs,
  /* anchorOriginShapeToJs */anchorOriginShapeToJs,
  /* anchorOriginShapeFromJs */anchorOriginShapeFromJs,
  /* anchorPositionShapeToJs */anchorPositionShapeToJs,
  /* anchorPositionShapeFromJs */anchorPositionShapeFromJs,
  /* anchorReferenceToJs */anchorReferenceToJs,
  /* anchorReferenceFromJs */anchorReferenceFromJs,
  /* transformOriginShapeToJs */transformOriginShapeToJs,
  /* transformOriginShapeFromJs */transformOriginShapeFromJs,
  /* Classes */Classes$50,
  /* make */make$59
];

var jsMapperConstantArray$43 = /* array */[
  /* tuple */[
    4202101,
    "top"
  ],
  /* tuple */[
    437082891,
    "bottom"
  ],
  /* tuple */[
    982536398,
    "static"
  ]
];

function positionToJs$2(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$43);
}

function positionFromJs$2(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$43, param);
}

var jsMapperConstantArray$44 = /* array */[
  /* tuple */[
    -539184179,
    "progress"
  ],
  /* tuple */[
    759636458,
    "dots"
  ],
  /* tuple */[
    936573133,
    "text"
  ]
];

function variantToJs$4(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$44);
}

function variantFromJs$4(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$44, param);
}

function to_string$51(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "positionBottom";
    case 2 : 
        return "positionTop";
    case 3 : 
        return "positionStatic";
    case 4 : 
        return "dots";
    case 5 : 
        return "dot";
    case 6 : 
        return "dotActive";
    case 7 : 
        return "progress";
    
  }
}

function to_obj$51(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$51(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$51 = /* module */[
  /* to_string */to_string$51,
  /* to_obj */to_obj$51
];

function make$60(activeStep, backButton, className, nextButton, position, steps, variant, component, elevation, square, classes, children) {
  var tmp = {
    steps: unwrapValue(steps)
  };
  var tmp$1 = Js_option.map(unwrapValue, activeStep);
  if (tmp$1) {
    tmp.activeStep = tmp$1[0];
  }
  if (backButton) {
    tmp.backButton = backButton[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (nextButton) {
    tmp.nextButton = nextButton[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$43);
        }), position);
  if (tmp$2) {
    tmp.position = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$44);
        }), variant);
  if (tmp$3) {
    tmp.variant = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, component);
  if (tmp$4) {
    tmp.component = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, elevation);
  if (tmp$5) {
    tmp.elevation = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$6) {
    tmp.square = tmp$6[0];
  }
  var tmp$7 = Js_option.map(to_obj$51, classes);
  if (tmp$7) {
    tmp.classes = tmp$7[0];
  }
  return ReasonReact.wrapJsForReason(MobileStepper.default, tmp, children);
}

var MobileStepper$1 = /* module */[
  /* positionToJs */positionToJs$2,
  /* positionFromJs */positionFromJs$2,
  /* variantToJs */variantToJs$4,
  /* variantFromJs */variantFromJs$4,
  /* Classes */Classes$51,
  /* make */make$60
];

function to_string$52(param) {
  if (param.tag) {
    return "hidden";
  } else {
    return "root";
  }
}

function to_obj$52(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$52(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$52 = /* module */[
  /* to_string */to_string$52,
  /* to_obj */to_obj$52
];

function make$61(backdropComponent, backdropProps, className, container, disableAutoFocus, disableBackdropClick, disableEnforceFocus, disableEscapeKeyDown, disableRestoreFocus, hideBackdrop, keepMounted, manager, onBackdropClick, onClose, onEscapeKeyDown, onRendered, _open, classes, children) {
  var tmp = {
    open: Js_boolean.to_js_boolean(_open)
  };
  var tmp$1 = Js_option.map(unwrapValue, backdropComponent);
  if (tmp$1) {
    tmp.backdropComponent = tmp$1[0];
  }
  if (backdropProps) {
    tmp.backdropProps = backdropProps[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, container);
  if (tmp$2) {
    tmp.container = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disableAutoFocus);
  if (tmp$3) {
    tmp.disableAutoFocus = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disableBackdropClick);
  if (tmp$4) {
    tmp.disableBackdropClick = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disableEnforceFocus);
  if (tmp$5) {
    tmp.disableEnforceFocus = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, disableEscapeKeyDown);
  if (tmp$6) {
    tmp.disableEscapeKeyDown = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, disableRestoreFocus);
  if (tmp$7) {
    tmp.disableRestoreFocus = tmp$7[0];
  }
  var tmp$8 = Js_option.map(Js_boolean.to_js_boolean, hideBackdrop);
  if (tmp$8) {
    tmp.hideBackdrop = tmp$8[0];
  }
  var tmp$9 = Js_option.map(Js_boolean.to_js_boolean, keepMounted);
  if (tmp$9) {
    tmp.keepMounted = tmp$9[0];
  }
  if (manager) {
    tmp.manager = manager[0];
  }
  if (onBackdropClick) {
    tmp.onBackdropClick = onBackdropClick[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onEscapeKeyDown) {
    tmp.onEscapeKeyDown = onEscapeKeyDown[0];
  }
  if (onRendered) {
    tmp.onRendered = onRendered[0];
  }
  var tmp$10 = Js_option.map(to_obj$52, classes);
  if (tmp$10) {
    tmp.classes = tmp$10[0];
  }
  return ReasonReact.wrapJsForReason(Modal.default, tmp, children);
}

var Modal$1 = /* module */[
  /* Classes */Classes$52,
  /* make */make$61
];

function make$62(disableStylesGeneration, sheetsManager, theme, children) {
  var tmp = {
    theme: unwrapValue(theme)
  };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableStylesGeneration);
  if (tmp$1) {
    tmp.disableStylesGeneration = tmp$1[0];
  }
  if (sheetsManager) {
    tmp.sheetsManager = sheetsManager[0];
  }
  return ReasonReact.wrapJsForReason(MuiThemeProvider.default, tmp, children);
}

var MuiThemeProvider$1 = /* module */[/* make */make$62];

function to_string$53(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "rounded";
    case 2 : 
        return "elevation0";
    case 3 : 
        return "elevation1";
    case 4 : 
        return "elevation2";
    case 5 : 
        return "elevation3";
    case 6 : 
        return "elevation4";
    case 7 : 
        return "elevation5";
    case 8 : 
        return "elevation6";
    case 9 : 
        return "elevation7";
    case 10 : 
        return "elevation8";
    case 11 : 
        return "elevation9";
    case 12 : 
        return "elevation10";
    case 13 : 
        return "elevation11";
    case 14 : 
        return "elevation12";
    case 15 : 
        return "elevation13";
    case 16 : 
        return "elevation14";
    case 17 : 
        return "elevation15";
    case 18 : 
        return "elevation16";
    case 19 : 
        return "elevation17";
    case 20 : 
        return "elevation18";
    case 21 : 
        return "elevation19";
    case 22 : 
        return "elevation20";
    case 23 : 
        return "elevation21";
    case 24 : 
        return "elevation22";
    case 25 : 
        return "elevation23";
    case 26 : 
        return "elevation24";
    
  }
}

function to_obj$53(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$53(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$53 = /* module */[
  /* to_string */to_string$53,
  /* to_obj */to_obj$53
];

function make$63(className, component, elevation, square, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, elevation);
  if (tmp$2) {
    tmp.elevation = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$3) {
    tmp.square = tmp$3[0];
  }
  var tmp$4 = Js_option.map(to_obj$53, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(Paper.default, tmp, children);
}

var Paper$1 = /* module */[
  /* Classes */Classes$53,
  /* make */make$63
];

function anchorOriginShapeToJs$1(param) {
  return {
          horizontal: param[/* horizontal */0],
          vertical: param[/* vertical */1]
        };
}

function anchorOriginShapeFromJs$1(param) {
  return /* record */[
          /* horizontal */param.horizontal,
          /* vertical */param.vertical
        ];
}

function anchorPositionShapeToJs$1(param) {
  return {
          top: param[/* top */0],
          left: param[/* left */1]
        };
}

function anchorPositionShapeFromJs$1(param) {
  return /* record */[
          /* top */param.top,
          /* left */param.left
        ];
}

var jsMapperConstantArray$45 = /* array */[
  /* tuple */[
    580003934,
    "anchorPosition"
  ],
  /* tuple */[
    616462940,
    "anchorEl"
  ]
];

function anchorReferenceToJs$1(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$45);
}

function anchorReferenceFromJs$1(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$45, param);
}

function transformOriginShapeToJs$1(param) {
  return {
          horizontal: param[/* horizontal */0],
          vertical: param[/* vertical */1]
        };
}

function transformOriginShapeFromJs$1(param) {
  return /* record */[
          /* horizontal */param.horizontal,
          /* vertical */param.vertical
        ];
}

function transitionDurationShapeToJs$4(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs$4(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

var jsMapperConstantArray$46 = /* array */[/* tuple */[
    726666127,
    "auto"
  ]];

function transitionDurationToJs$1(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$46);
}

function transitionDurationFromJs$1(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$46, param);
}

function to_string$54() {
  return "paper";
}

function to_obj$54(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["paper"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$54 = /* module */[
  /* to_string */to_string$54,
  /* to_obj */to_obj$54
];

function make$64(action, anchorEl, anchorOrigin, anchorPosition, anchorReference, container, elevation, getContentAnchorEl, marginThreshold, onClose, onEnter, onEntered, onEntering, onExit, onExited, onExiting, _open, paperProps, role, transformOrigin, transition, transitionDuration, backdropComponent, backdropProps, className, disableAutoFocus, disableBackdropClick, disableEnforceFocus, disableEscapeKeyDown, disableRestoreFocus, hideBackdrop, keepMounted, manager, onBackdropClick, onEscapeKeyDown, onRendered, classes, children) {
  var tmp = {
    open: Js_boolean.to_js_boolean(_open)
  };
  if (action) {
    tmp.action = action[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, anchorEl);
  if (tmp$1) {
    tmp.anchorEl = tmp$1[0];
  }
  var tmp$2 = Js_option.map(anchorOriginShapeToJs$1, anchorOrigin);
  if (tmp$2) {
    tmp.anchorOrigin = tmp$2[0];
  }
  var tmp$3 = Js_option.map(anchorPositionShapeToJs$1, anchorPosition);
  if (tmp$3) {
    tmp.anchorPosition = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$45);
        }), anchorReference);
  if (tmp$4) {
    tmp.anchorReference = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, container);
  if (tmp$5) {
    tmp.container = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, elevation);
  if (tmp$6) {
    tmp.elevation = tmp$6[0];
  }
  if (getContentAnchorEl) {
    tmp.getContentAnchorEl = getContentAnchorEl[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, marginThreshold);
  if (tmp$7) {
    tmp.marginThreshold = tmp$7[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (onExited) {
    tmp.onExited = onExited[0];
  }
  if (onExiting) {
    tmp.onExiting = onExiting[0];
  }
  if (paperProps) {
    tmp.paperProps = paperProps[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$8 = Js_option.map(transformOriginShapeToJs$1, transformOrigin);
  if (tmp$8) {
    tmp.transformOrigin = tmp$8[0];
  }
  var tmp$9 = Js_option.map(unwrapValue, transition);
  if (tmp$9) {
    tmp.transition = tmp$9[0];
  }
  var tmp$10 = Js_option.map((function (v) {
          if (typeof v === "number") {
            return unwrapValue(v);
          } else {
            var variant = v[0];
            if (variant !== -908856609) {
              if (variant !== 770676513) {
                return unwrapValue(v);
              } else {
                return unwrapValue(/* `String */[
                            -976970511,
                            Js_mapperRt.binarySearch(1, v[1], jsMapperConstantArray$46)
                          ]);
              }
            } else {
              return unwrapValue(/* `Element */[
                          -744106340,
                          transitionDurationShapeToJs$4(v[1])
                        ]);
            }
          }
        }), transitionDuration);
  if (tmp$10) {
    tmp.transitionDuration = tmp$10[0];
  }
  var tmp$11 = Js_option.map(unwrapValue, backdropComponent);
  if (tmp$11) {
    tmp.backdropComponent = tmp$11[0];
  }
  if (backdropProps) {
    tmp.backdropProps = backdropProps[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$12 = Js_option.map(Js_boolean.to_js_boolean, disableAutoFocus);
  if (tmp$12) {
    tmp.disableAutoFocus = tmp$12[0];
  }
  var tmp$13 = Js_option.map(Js_boolean.to_js_boolean, disableBackdropClick);
  if (tmp$13) {
    tmp.disableBackdropClick = tmp$13[0];
  }
  var tmp$14 = Js_option.map(Js_boolean.to_js_boolean, disableEnforceFocus);
  if (tmp$14) {
    tmp.disableEnforceFocus = tmp$14[0];
  }
  var tmp$15 = Js_option.map(Js_boolean.to_js_boolean, disableEscapeKeyDown);
  if (tmp$15) {
    tmp.disableEscapeKeyDown = tmp$15[0];
  }
  var tmp$16 = Js_option.map(Js_boolean.to_js_boolean, disableRestoreFocus);
  if (tmp$16) {
    tmp.disableRestoreFocus = tmp$16[0];
  }
  var tmp$17 = Js_option.map(Js_boolean.to_js_boolean, hideBackdrop);
  if (tmp$17) {
    tmp.hideBackdrop = tmp$17[0];
  }
  var tmp$18 = Js_option.map(Js_boolean.to_js_boolean, keepMounted);
  if (tmp$18) {
    tmp.keepMounted = tmp$18[0];
  }
  if (manager) {
    tmp.manager = manager[0];
  }
  if (onBackdropClick) {
    tmp.onBackdropClick = onBackdropClick[0];
  }
  if (onEscapeKeyDown) {
    tmp.onEscapeKeyDown = onEscapeKeyDown[0];
  }
  if (onRendered) {
    tmp.onRendered = onRendered[0];
  }
  var tmp$19 = Js_option.map(to_obj$54, classes);
  if (tmp$19) {
    tmp.classes = tmp$19[0];
  }
  return ReasonReact.wrapJsForReason(Popover.default, tmp, children);
}

var Popover$1 = /* module */[
  /* anchorOriginShapeToJs */anchorOriginShapeToJs$1,
  /* anchorOriginShapeFromJs */anchorOriginShapeFromJs$1,
  /* anchorPositionShapeToJs */anchorPositionShapeToJs$1,
  /* anchorPositionShapeFromJs */anchorPositionShapeFromJs$1,
  /* anchorReferenceToJs */anchorReferenceToJs$1,
  /* anchorReferenceFromJs */anchorReferenceFromJs$1,
  /* transformOriginShapeToJs */transformOriginShapeToJs$1,
  /* transformOriginShapeFromJs */transformOriginShapeFromJs$1,
  /* transitionDurationShapeToJs */transitionDurationShapeToJs$4,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs$4,
  /* transitionDurationToJs */transitionDurationToJs$1,
  /* transitionDurationFromJs */transitionDurationFromJs$1,
  /* Classes */Classes$54,
  /* make */make$64
];

function make$65(container, onRendered, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, container);
  if (tmp$1) {
    tmp.container = tmp$1[0];
  }
  if (onRendered) {
    tmp.onRendered = onRendered[0];
  }
  return ReasonReact.wrapJsForReason(Portal.default, tmp, children);
}

var Portal$1 = /* module */[/* make */make$65];

function make$66(name, onBlur, onChange, onKeyDown, value, className, row, children) {
  var tmp = { };
  if (name) {
    tmp.name = name[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, row);
  if (tmp$1) {
    tmp.row = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(RadioGroup.default, tmp, children);
}

var RadioGroup$1 = /* module */[/* make */make$66];

var jsMapperConstantArray$47 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$9(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$47);
}

function colorFromJs$9(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$47, param);
}

function to_string$55(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "default";
    case 1 : 
        return "checked";
    case 2 : 
        return "checkedPrimary";
    case 3 : 
        return "checkedSecondary";
    case 4 : 
        return "disabled";
    
  }
}

function to_obj$55(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$55(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$55 = /* module */[
  /* to_string */to_string$55,
  /* to_obj */to_obj$55
];

function make$67(checked, checkedIcon, color, disabled, disableRipple, icon, id, inputProps, inputRef, onChange, _type, value, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, checked);
  if (tmp$1) {
    tmp.checked = tmp$1[0];
  }
  if (checkedIcon) {
    tmp.checkedIcon = checkedIcon[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$47);
        }), color);
  if (tmp$2) {
    tmp.color = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$3) {
    tmp.disabled = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$4) {
    tmp.disableRipple = tmp$4[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (inputProps) {
    tmp.inputProps = inputProps[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  var tmp$5 = Js_option.map(to_obj$55, classes);
  if (tmp$5) {
    tmp.classes = tmp$5[0];
  }
  return ReasonReact.wrapJsForReason(Radio.default, tmp, children);
}

var Radio$1 = /* module */[
  /* colorToJs */colorToJs$9,
  /* colorFromJs */colorFromJs$9,
  /* Classes */Classes$55,
  /* make */make$67
];

var jsMapperConstantArray$48 = /* array */[
  /* tuple */[
    -363472001,
    "dense"
  ],
  /* tuple */[
    870530776,
    "none"
  ]
];

function marginToJs$4(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$48);
}

function marginFromJs$4(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$48, param);
}

function to_string$56(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "select";
    case 2 : 
        return "selectMenu";
    case 3 : 
        return "disabled";
    case 4 : 
        return "icon";
    
  }
}

function to_obj$56(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$56(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$56 = /* module */[
  /* to_string */to_string$56,
  /* to_obj */to_obj$56
];

function make$68(autoWidth, displayEmpty, input, inputProps, menuProps, multiple, $$native, onChange, onClose, onOpen, _open, renderValue, selectDisplayProps, value, autoComplete, autoFocus, className, defaultValue, disabled, disableUnderline, endAdornment, error, fullWidth, id, inputComponent, inputRef, margin, multiline, name, onBlur, onClean, onDirty, onFocus, onKeyDown, onKeyUp, placeholder, readOnly, rows, rowsMax, startAdornment, _type, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, autoWidth);
  if (tmp$1) {
    tmp.autoWidth = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, displayEmpty);
  if (tmp$2) {
    tmp.displayEmpty = tmp$2[0];
  }
  if (input) {
    tmp.input = input[0];
  }
  if (inputProps) {
    tmp.inputProps = inputProps[0];
  }
  if (menuProps) {
    tmp.menuProps = menuProps[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, multiple);
  if (tmp$3) {
    tmp.multiple = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, $$native);
  if (tmp$4) {
    tmp.native = tmp$4[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onOpen) {
    tmp.onOpen = onOpen[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, _open);
  if (tmp$5) {
    tmp.open = tmp$5[0];
  }
  if (renderValue) {
    tmp.renderValue = renderValue[0];
  }
  if (selectDisplayProps) {
    tmp.selectDisplayProps = selectDisplayProps[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, value);
  if (tmp$6) {
    tmp.value = tmp$6[0];
  }
  if (autoComplete) {
    tmp.autoComplete = autoComplete[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, autoFocus);
  if (tmp$7) {
    tmp.autoFocus = tmp$7[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, defaultValue);
  if (tmp$8) {
    tmp.defaultValue = tmp$8[0];
  }
  var tmp$9 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$9) {
    tmp.disabled = tmp$9[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, disableUnderline);
  if (tmp$10) {
    tmp.disableUnderline = tmp$10[0];
  }
  if (endAdornment) {
    tmp.endAdornment = endAdornment[0];
  }
  var tmp$11 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$11) {
    tmp.error = tmp$11[0];
  }
  var tmp$12 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$12) {
    tmp.fullWidth = tmp$12[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  var tmp$13 = Js_option.map(unwrapValue, inputComponent);
  if (tmp$13) {
    tmp.inputComponent = tmp$13[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  var tmp$14 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$48);
        }), margin);
  if (tmp$14) {
    tmp.margin = tmp$14[0];
  }
  var tmp$15 = Js_option.map(Js_boolean.to_js_boolean, multiline);
  if (tmp$15) {
    tmp.multiline = tmp$15[0];
  }
  if (name) {
    tmp.name = name[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onClean) {
    tmp.onClean = onClean[0];
  }
  if (onDirty) {
    tmp.onDirty = onDirty[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (placeholder) {
    tmp.placeholder = placeholder[0];
  }
  var tmp$16 = Js_option.map(Js_boolean.to_js_boolean, readOnly);
  if (tmp$16) {
    tmp.readOnly = tmp$16[0];
  }
  var tmp$17 = Js_option.map(unwrapValue, rows);
  if (tmp$17) {
    tmp.rows = tmp$17[0];
  }
  var tmp$18 = Js_option.map(unwrapValue, rowsMax);
  if (tmp$18) {
    tmp.rowsMax = tmp$18[0];
  }
  if (startAdornment) {
    tmp.startAdornment = startAdornment[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$19 = Js_option.map(to_obj$56, classes);
  if (tmp$19) {
    tmp.classes = tmp$19[0];
  }
  return ReasonReact.wrapJsForReason(Select.default, tmp, children);
}

var Select$1 = /* module */[
  /* marginToJs */marginToJs$4,
  /* marginFromJs */marginFromJs$4,
  /* Classes */Classes$56,
  /* make */make$68
];

var jsMapperConstantArray$49 = /* array */[
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    19067,
    "up"
  ],
  /* tuple */[
    759637122,
    "down"
  ],
  /* tuple */[
    847852583,
    "left"
  ]
];

function directionToJs$1(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$49);
}

function directionFromJs$1(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$49, param);
}

function timeoutShapeToJs$3(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function timeoutShapeFromJs$3(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

function make$69(direction, _in, onEnter, onEntered, onEntering, onExit, onExited, onExiting, style, theme, timeout, children) {
  var tmp = {
    theme: theme
  };
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$49);
        }), direction);
  if (tmp$1) {
    tmp.direction = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, _in);
  if (tmp$2) {
    tmp.in = tmp$2[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (onExited) {
    tmp.onExited = onExited[0];
  }
  if (onExiting) {
    tmp.onExiting = onExiting[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        timeoutShapeToJs$3(v[1])
                      ]);
          }
        }), timeout);
  if (tmp$3) {
    tmp.timeout = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(Slide.default, tmp, children);
}

var Slide$1 = /* module */[
  /* directionToJs */directionToJs$1,
  /* directionFromJs */directionFromJs$1,
  /* timeoutShapeToJs */timeoutShapeToJs$3,
  /* timeoutShapeFromJs */timeoutShapeFromJs$3,
  /* make */make$69
];

function to_string$57(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "message";
    case 2 : 
        return "action";
    
  }
}

function to_obj$57(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$57(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$57 = /* module */[
  /* to_string */to_string$57,
  /* to_obj */to_obj$57
];

function make$70(action, className, message, component, elevation, square, classes, children) {
  var tmp = { };
  if (action) {
    tmp.action = action[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (message) {
    tmp.message = message[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, elevation);
  if (tmp$2) {
    tmp.elevation = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$3) {
    tmp.square = tmp$3[0];
  }
  var tmp$4 = Js_option.map(to_obj$57, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(SnackbarContent.default, tmp, children);
}

var SnackbarContent$1 = /* module */[
  /* Classes */Classes$57,
  /* make */make$70
];

function anchorOriginShapeToJs$2(param) {
  return {
          horizontal: param[/* horizontal */0],
          vertical: param[/* vertical */1]
        };
}

function anchorOriginShapeFromJs$2(param) {
  return /* record */[
          /* horizontal */param.horizontal,
          /* vertical */param.vertical
        ];
}

function transitionDurationShapeToJs$5(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs$5(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

function to_string$58(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "anchorOriginTopCenter";
    case 2 : 
        return "anchorOriginBottomCenter";
    case 3 : 
        return "anchorOriginTopRight";
    case 4 : 
        return "anchorOriginBottomRight";
    case 5 : 
        return "anchorOriginTopLeft";
    case 6 : 
        return "anchorOriginBottomLeft";
    
  }
}

function to_obj$58(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$58(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$58 = /* module */[
  /* to_string */to_string$58,
  /* to_obj */to_obj$58
];

function make$71(action, anchorOrigin, autoHideDuration, className, disableWindowBlurListener, key, message, onClose, onEnter, onEntered, onEntering, onExit, onExited, onExiting, onMouseEnter, onMouseLeave, _open, resumeHideDuration, snackbarContentProps, transition, transitionDuration, classes, children) {
  var tmp = { };
  if (action) {
    tmp.action = action[0];
  }
  var tmp$1 = Js_option.map(anchorOriginShapeToJs$2, anchorOrigin);
  if (tmp$1) {
    tmp.anchorOrigin = tmp$1[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, autoHideDuration);
  if (tmp$2) {
    tmp.autoHideDuration = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disableWindowBlurListener);
  if (tmp$3) {
    tmp.disableWindowBlurListener = tmp$3[0];
  }
  if (key) {
    tmp.key = key[0];
  }
  if (message) {
    tmp.message = message[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onEntered) {
    tmp.onEntered = onEntered[0];
  }
  if (onEntering) {
    tmp.onEntering = onEntering[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (onExited) {
    tmp.onExited = onExited[0];
  }
  if (onExiting) {
    tmp.onExiting = onExiting[0];
  }
  if (onMouseEnter) {
    tmp.onMouseEnter = onMouseEnter[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, _open);
  if (tmp$4) {
    tmp.open = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, resumeHideDuration);
  if (tmp$5) {
    tmp.resumeHideDuration = tmp$5[0];
  }
  if (snackbarContentProps) {
    tmp.snackbarContentProps = snackbarContentProps[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, transition);
  if (tmp$6) {
    tmp.transition = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        transitionDurationShapeToJs$5(v[1])
                      ]);
          }
        }), transitionDuration);
  if (tmp$7) {
    tmp.transitionDuration = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$58, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(Snackbar.default, tmp, children);
}

var Snackbar$1 = /* module */[
  /* anchorOriginShapeToJs */anchorOriginShapeToJs$2,
  /* anchorOriginShapeFromJs */anchorOriginShapeFromJs$2,
  /* transitionDurationShapeToJs */transitionDurationShapeToJs$5,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs$5,
  /* Classes */Classes$58,
  /* make */make$71
];

var jsMapperConstantArray$50 = /* array */[
  /* tuple */[
    -1010337642,
    "vertical"
  ],
  /* tuple */[
    208994564,
    "horizontal"
  ]
];

function orientationToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$50);
}

function orientationFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$50, param);
}

function to_string$59() {
  return "root";
}

function to_obj$59(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$59 = /* module */[
  /* to_string */to_string$59,
  /* to_obj */to_obj$59
];

function make$72(active, alternativeLabel, className, completed, disabled, icon, last, optional, orientation, buttonRef, centerRipple, component, disableRipple, focusRipple, onBlur, onClick, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, active);
  if (tmp$1) {
    tmp.active = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, alternativeLabel);
  if (tmp$2) {
    tmp.alternativeLabel = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, completed);
  if (tmp$3) {
    tmp.completed = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$4) {
    tmp.disabled = tmp$4[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, last);
  if (tmp$5) {
    tmp.last = tmp$5[0];
  }
  if (optional) {
    tmp.optional = optional[0];
  }
  var tmp$6 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$50);
        }), orientation);
  if (tmp$6) {
    tmp.orientation = tmp$6[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$7) {
    tmp.centerRipple = tmp$7[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, component);
  if (tmp$8) {
    tmp.component = tmp$8[0];
  }
  var tmp$9 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$9) {
    tmp.disableRipple = tmp$9[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$10) {
    tmp.focusRipple = tmp$10[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$11 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$11) {
    tmp.tabIndex = tmp$11[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$12 = Js_option.map(to_obj$59, classes);
  if (tmp$12) {
    tmp.classes = tmp$12[0];
  }
  return ReasonReact.wrapJsForReason(StepButton.default, tmp, children);
}

var StepButton$1 = /* module */[
  /* orientationToJs */orientationToJs,
  /* orientationFromJs */orientationFromJs,
  /* Classes */Classes$59,
  /* make */make$72
];

var jsMapperConstantArray$51 = /* array */[
  /* tuple */[
    -1010337642,
    "vertical"
  ],
  /* tuple */[
    208994564,
    "horizontal"
  ]
];

function orientationToJs$1(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$51);
}

function orientationFromJs$1(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$51, param);
}

function transitionDurationShapeToJs$6(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function transitionDurationShapeFromJs$6(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

var jsMapperConstantArray$52 = /* array */[/* tuple */[
    726666127,
    "auto"
  ]];

function transitionDurationToJs$2(param) {
  return Js_mapperRt.binarySearch(1, param, jsMapperConstantArray$52);
}

function transitionDurationFromJs$2(param) {
  return Js_mapperRt.revSearch(1, jsMapperConstantArray$52, param);
}

function to_string$60(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "last";
    case 2 : 
        return "transition";
    
  }
}

function to_obj$60(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$60(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$60 = /* module */[
  /* to_string */to_string$60,
  /* to_obj */to_obj$60
];

function make$73(active, alternativeLabel, className, completed, last, optional, orientation, transition, transitionDuration, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, active);
  if (tmp$1) {
    tmp.active = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, alternativeLabel);
  if (tmp$2) {
    tmp.alternativeLabel = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, completed);
  if (tmp$3) {
    tmp.completed = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, last);
  if (tmp$4) {
    tmp.last = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, optional);
  if (tmp$5) {
    tmp.optional = tmp$5[0];
  }
  var tmp$6 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$51);
        }), orientation);
  if (tmp$6) {
    tmp.orientation = tmp$6[0];
  }
  if (transition) {
    tmp.transition = transition[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          if (typeof v === "number") {
            return unwrapValue(v);
          } else {
            var variant = v[0];
            if (variant !== -908856609) {
              if (variant !== 770676513) {
                return unwrapValue(v);
              } else {
                return unwrapValue(/* `String */[
                            -976970511,
                            Js_mapperRt.binarySearch(1, v[1], jsMapperConstantArray$52)
                          ]);
              }
            } else {
              return unwrapValue(/* `Element */[
                          -744106340,
                          transitionDurationShapeToJs$6(v[1])
                        ]);
            }
          }
        }), transitionDuration);
  if (tmp$7) {
    tmp.transitionDuration = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$60, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(StepContent.default, tmp, children);
}

var StepContent$1 = /* module */[
  /* orientationToJs */orientationToJs$1,
  /* orientationFromJs */orientationFromJs$1,
  /* transitionDurationShapeToJs */transitionDurationShapeToJs$6,
  /* transitionDurationShapeFromJs */transitionDurationShapeFromJs$6,
  /* transitionDurationToJs */transitionDurationToJs$2,
  /* transitionDurationFromJs */transitionDurationFromJs$2,
  /* Classes */Classes$60,
  /* make */make$73
];

function to_string$61(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "active";
    case 2 : 
        return "completed";
    
  }
}

function to_obj$61(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$61(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$61 = /* module */[
  /* to_string */to_string$61,
  /* to_obj */to_obj$61
];

function make$74(active, completed, icon, classes, children) {
  var tmp = {
    icon: icon
  };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, active);
  if (tmp$1) {
    tmp.active = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, completed);
  if (tmp$2) {
    tmp.completed = tmp$2[0];
  }
  var tmp$3 = Js_option.map(to_obj$61, classes);
  if (tmp$3) {
    tmp.classes = tmp$3[0];
  }
  return ReasonReact.wrapJsForReason(StepIcon.default, tmp, children);
}

var StepIcon$1 = /* module */[
  /* Classes */Classes$61,
  /* make */make$74
];

var jsMapperConstantArray$53 = /* array */[
  /* tuple */[
    -1010337642,
    "vertical"
  ],
  /* tuple */[
    208994564,
    "horizontal"
  ]
];

function orientationToJs$2(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$53);
}

function orientationFromJs$2(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$53, param);
}

function to_string$62(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "horizontal";
    case 2 : 
        return "vertical";
    case 3 : 
        return "alternativeLabel";
    case 4 : 
        return "disabled";
    case 5 : 
        return "label";
    case 6 : 
        return "labelActive";
    case 7 : 
        return "labelCompleted";
    case 8 : 
        return "labelAlternativeLabel";
    case 9 : 
        return "iconContainer";
    case 10 : 
        return "iconContainerAlternativeLabel";
    case 11 : 
        return "labelContainer";
    
  }
}

function to_obj$62(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$62(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$62 = /* module */[
  /* to_string */to_string$62,
  /* to_obj */to_obj$62
];

function make$75(active, alternativeLabel, className, completed, disabled, icon, last, optional, orientation, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, active);
  if (tmp$1) {
    tmp.active = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, alternativeLabel);
  if (tmp$2) {
    tmp.alternativeLabel = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, completed);
  if (tmp$3) {
    tmp.completed = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$4) {
    tmp.disabled = tmp$4[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, last);
  if (tmp$5) {
    tmp.last = tmp$5[0];
  }
  if (optional) {
    tmp.optional = optional[0];
  }
  var tmp$6 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$53);
        }), orientation);
  if (tmp$6) {
    tmp.orientation = tmp$6[0];
  }
  var tmp$7 = Js_option.map(to_obj$62, classes);
  if (tmp$7) {
    tmp.classes = tmp$7[0];
  }
  return ReasonReact.wrapJsForReason(StepLabel.default, tmp, children);
}

var StepLabel$1 = /* module */[
  /* orientationToJs */orientationToJs$2,
  /* orientationFromJs */orientationFromJs$2,
  /* Classes */Classes$62,
  /* make */make$75
];

var jsMapperConstantArray$54 = /* array */[
  /* tuple */[
    -1010337642,
    "vertical"
  ],
  /* tuple */[
    208994564,
    "horizontal"
  ]
];

function orientationToJs$3(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$54);
}

function orientationFromJs$3(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$54, param);
}

function to_string$63(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "horizontal";
    case 2 : 
        return "vertical";
    case 3 : 
        return "alternativeLabel";
    
  }
}

function to_obj$63(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$63(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$63 = /* module */[
  /* to_string */to_string$63,
  /* to_obj */to_obj$63
];

function make$76(active, alternativeLabel, className, completed, connector, disabled, index, last, orientation, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, active);
  if (tmp$1) {
    tmp.active = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, alternativeLabel);
  if (tmp$2) {
    tmp.alternativeLabel = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, completed);
  if (tmp$3) {
    tmp.completed = tmp$3[0];
  }
  if (connector) {
    tmp.connector = connector[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$4) {
    tmp.disabled = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, index);
  if (tmp$5) {
    tmp.index = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, last);
  if (tmp$6) {
    tmp.last = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$54);
        }), orientation);
  if (tmp$7) {
    tmp.orientation = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$63, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(Step.default, tmp, children);
}

var Step$1 = /* module */[
  /* orientationToJs */orientationToJs$3,
  /* orientationFromJs */orientationFromJs$3,
  /* Classes */Classes$63,
  /* make */make$76
];

var jsMapperConstantArray$55 = /* array */[
  /* tuple */[
    -1010337642,
    "vertical"
  ],
  /* tuple */[
    208994564,
    "horizontal"
  ]
];

function orientationToJs$4(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$55);
}

function orientationFromJs$4(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$55, param);
}

function to_string$64(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "horizontal";
    case 2 : 
        return "vertical";
    case 3 : 
        return "alternativeLabel";
    
  }
}

function to_obj$64(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$64(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$64 = /* module */[
  /* to_string */to_string$64,
  /* to_obj */to_obj$64
];

function make$77(activeStep, alternativeLabel, className, connector, nonLinear, orientation, component, elevation, square, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, activeStep);
  if (tmp$1) {
    tmp.activeStep = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, alternativeLabel);
  if (tmp$2) {
    tmp.alternativeLabel = tmp$2[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (connector) {
    tmp.connector = connector[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, nonLinear);
  if (tmp$3) {
    tmp.nonLinear = tmp$3[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$55);
        }), orientation);
  if (tmp$4) {
    tmp.orientation = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, component);
  if (tmp$5) {
    tmp.component = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, elevation);
  if (tmp$6) {
    tmp.elevation = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, square);
  if (tmp$7) {
    tmp.square = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$64, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(Stepper.default, tmp, children);
}

var Stepper$1 = /* module */[
  /* orientationToJs */orientationToJs$4,
  /* orientationFromJs */orientationFromJs$4,
  /* Classes */Classes$64,
  /* make */make$77
];

var jsMapperConstantArray$56 = /* array */[
  /* tuple */[
    -891637802,
    "action"
  ],
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -709493348,
    "disabled"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ],
  /* tuple */[
    106380200,
    "error"
  ]
];

function colorToJs$10(param) {
  return Js_mapperRt.binarySearch(6, param, jsMapperConstantArray$56);
}

function colorFromJs$10(param) {
  return Js_mapperRt.revSearch(6, jsMapperConstantArray$56, param);
}

function to_string$65(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "colorPrimary";
    case 2 : 
        return "colorSecondary";
    case 3 : 
        return "colorAction";
    case 4 : 
        return "colorDisabled";
    case 5 : 
        return "colorError";
    
  }
}

function to_obj$65(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$65(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$65 = /* module */[
  /* to_string */to_string$65,
  /* to_obj */to_obj$65
];

function make$78(className, color, nativeColor, titleAccess, viewBox, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(6, v, jsMapperConstantArray$56);
        }), color);
  if (tmp$1) {
    tmp.color = tmp$1[0];
  }
  if (nativeColor) {
    tmp.nativeColor = nativeColor[0];
  }
  if (titleAccess) {
    tmp.titleAccess = titleAccess[0];
  }
  if (viewBox) {
    tmp.viewBox = viewBox[0];
  }
  var tmp$2 = Js_option.map(to_obj$65, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(SvgIcon.default, tmp, children);
}

var SvgIcon$1 = /* module */[
  /* colorToJs */colorToJs$10,
  /* colorFromJs */colorFromJs$10,
  /* Classes */Classes$65,
  /* make */make$78
];

var jsMapperConstantArray$57 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function colorToJs$11(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$57);
}

function colorFromJs$11(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$57, param);
}

function to_string$66(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "bar";
    case 2 : 
        return "icon";
    case 3 : 
        return "iconChecked";
    case 4 : 
        return "default";
    case 5 : 
        return "checked";
    case 6 : 
        return "checkedPrimary";
    case 7 : 
        return "checkedSecondary";
    case 8 : 
        return "disabled";
    
  }
}

function to_obj$66(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$66(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$66 = /* module */[
  /* to_string */to_string$66,
  /* to_obj */to_obj$66
];

function make$79(checked, checkedIcon, className, color, defaultChecked, disabled, disableRipple, icon, id, inputProps, inputRef, onChange, _type, value, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, checked);
  if (tmp$1) {
    tmp.checked = tmp$1[0];
  }
  if (checkedIcon) {
    tmp.checkedIcon = checkedIcon[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$57);
        }), color);
  if (tmp$2) {
    tmp.color = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, defaultChecked);
  if (tmp$3) {
    tmp.defaultChecked = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$4) {
    tmp.disabled = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$5) {
    tmp.disableRipple = tmp$5[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (inputProps) {
    tmp.inputProps = inputProps[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  var tmp$6 = Js_option.map(to_obj$66, classes);
  if (tmp$6) {
    tmp.classes = tmp$6[0];
  }
  return ReasonReact.wrapJsForReason(Switch.default, tmp, children);
}

var Switch$1 = /* module */[
  /* colorToJs */colorToJs$11,
  /* colorFromJs */colorFromJs$11,
  /* Classes */Classes$66,
  /* make */make$79
];

var jsMapperConstantArray$58 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function textColorToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$58);
}

function textColorFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$58, param);
}

function to_string$67(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "labelIcon";
    case 2 : 
        return "textColorInherit";
    case 3 : 
        return "textColorPrimary";
    case 4 : 
        return "textColorPrimarySelected";
    case 5 : 
        return "textColorPrimaryDisabled";
    case 6 : 
        return "textColorSecondary";
    case 7 : 
        return "textColorSecondarySelected";
    case 8 : 
        return "textColorSecondaryDisabled";
    case 9 : 
        return "textColorInheritSelected";
    case 10 : 
        return "textColorInheritDisabled";
    case 11 : 
        return "fullWidth";
    case 12 : 
        return "wrapper";
    case 13 : 
        return "labelContainer";
    case 14 : 
        return "label";
    case 15 : 
        return "labelWrapped";
    
  }
}

function to_obj$67(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$67(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$67 = /* module */[
  /* to_string */to_string$67,
  /* to_obj */to_obj$67
];

function make$80(className, disabled, fullWidth, icon, indicator, label, onChange, onClick, selected, style, textColor, value, buttonRef, centerRipple, component, disableRipple, focusRipple, onBlur, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$1) {
    tmp.disabled = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$2) {
    tmp.fullWidth = tmp$2[0];
  }
  if (icon) {
    tmp.icon = icon[0];
  }
  if (indicator) {
    tmp.indicator = indicator[0];
  }
  if (label) {
    tmp.label = label[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, selected);
  if (tmp$3) {
    tmp.selected = tmp$3[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== 770676513) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `String */[
                        -976970511,
                        Js_mapperRt.binarySearch(3, v[1], jsMapperConstantArray$58)
                      ]);
          }
        }), textColor);
  if (tmp$4) {
    tmp.textColor = tmp$4[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$5) {
    tmp.centerRipple = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, component);
  if (tmp$6) {
    tmp.component = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$7) {
    tmp.disableRipple = tmp$7[0];
  }
  var tmp$8 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$8) {
    tmp.focusRipple = tmp$8[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$9 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$9) {
    tmp.tabIndex = tmp$9[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$10 = Js_option.map(to_obj$67, classes);
  if (tmp$10) {
    tmp.classes = tmp$10[0];
  }
  return ReasonReact.wrapJsForReason(Tab.default, tmp, children);
}

var Tab$1 = /* module */[
  /* textColorToJs */textColorToJs,
  /* textColorFromJs */textColorFromJs,
  /* Classes */Classes$67,
  /* make */make$80
];

function make$81(className, component, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(TableBody.default, tmp, children);
}

var TableBody$1 = /* module */[/* make */make$81];

var jsMapperConstantArray$59 = /* array */[
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -363472001,
    "dense"
  ],
  /* tuple */[
    111644259,
    "checkbox"
  ],
  /* tuple */[
    870530776,
    "none"
  ]
];

function paddingToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$59);
}

function paddingFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$59, param);
}

var jsMapperConstantArray$60 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    243049859,
    "0"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function sortDirectionToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$60);
}

function sortDirectionFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$60, param);
}

var jsMapperConstantArray$61 = /* array */[
  /* tuple */[
    737453762,
    "body"
  ],
  /* tuple */[
    803493184,
    "head"
  ],
  /* tuple */[
    808235707,
    "footer"
  ]
];

function variantToJs$5(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$61);
}

function variantFromJs$5(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$61, param);
}

function to_string$68(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "head";
    case 2 : 
        return "body";
    case 3 : 
        return "footer";
    case 4 : 
        return "numeric";
    case 5 : 
        return "paddingDense";
    case 6 : 
        return "paddingCheckbox";
    case 7 : 
        return "paddingNone";
    
  }
}

function to_obj$68(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$68(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$68 = /* module */[
  /* to_string */to_string$68,
  /* to_obj */to_obj$68
];

function make$82(className, component, numeric, padding, scope, sortDirection, variant, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, numeric);
  if (tmp$2) {
    tmp.numeric = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$59);
        }), padding);
  if (tmp$3) {
    tmp.padding = tmp$3[0];
  }
  if (scope) {
    tmp.scope = scope[0];
  }
  var tmp$4 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$60);
        }), sortDirection);
  if (tmp$4) {
    tmp.sortDirection = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$61);
        }), variant);
  if (tmp$5) {
    tmp.variant = tmp$5[0];
  }
  var tmp$6 = Js_option.map(to_obj$68, classes);
  if (tmp$6) {
    tmp.classes = tmp$6[0];
  }
  return ReasonReact.wrapJsForReason(TableCell.default, tmp, children);
}

var TableCell$1 = /* module */[
  /* paddingToJs */paddingToJs,
  /* paddingFromJs */paddingFromJs,
  /* sortDirectionToJs */sortDirectionToJs,
  /* sortDirectionFromJs */sortDirectionFromJs,
  /* variantToJs */variantToJs$5,
  /* variantFromJs */variantFromJs$5,
  /* Classes */Classes$68,
  /* make */make$82
];

function make$83(component, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(TableFooter.default, tmp, children);
}

var TableFooter$1 = /* module */[/* make */make$83];

function make$84(className, component, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  return ReasonReact.wrapJsForReason(TableHead.default, tmp, children);
}

var TableHead$1 = /* module */[/* make */make$84];

var jsMapperConstantArray$62 = /* array */[
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -363472001,
    "dense"
  ],
  /* tuple */[
    111644259,
    "checkbox"
  ],
  /* tuple */[
    870530776,
    "none"
  ]
];

function paddingToJs$1(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray$62);
}

function paddingFromJs$1(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray$62, param);
}

var jsMapperConstantArray$63 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    243049859,
    "0"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function sortDirectionToJs$1(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$63);
}

function sortDirectionFromJs$1(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$63, param);
}

var jsMapperConstantArray$64 = /* array */[
  /* tuple */[
    737453762,
    "body"
  ],
  /* tuple */[
    803493184,
    "head"
  ],
  /* tuple */[
    808235707,
    "footer"
  ]
];

function variantToJs$6(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$64);
}

function variantFromJs$6(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$64, param);
}

function to_string$69(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "toolbar";
    case 2 : 
        return "spacer";
    case 3 : 
        return "caption";
    case 4 : 
        return "input";
    case 5 : 
        return "selectRoot";
    case 6 : 
        return "select";
    case 7 : 
        return "selectIcon";
    case 8 : 
        return "actions";
    
  }
}

function to_obj$69(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$69(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$69 = /* module */[
  /* to_string */to_string$69,
  /* to_obj */to_obj$69
];

function make$85(actions, backIconButtonProps, colSpan, component, count, labelDisplayedRows, labelRowsPerPage, nextIconButtonProps, onChangePage, onChangeRowsPerPage, page, rowsPerPage, rowsPerPageOptions, className, numeric, padding, scope, sortDirection, variant, classes, children) {
  var tmp = {
    count: unwrapValue(count),
    onChangePage: onChangePage,
    page: unwrapValue(page),
    rowsPerPage: unwrapValue(rowsPerPage)
  };
  var tmp$1 = Js_option.map(unwrapValue, actions);
  if (tmp$1) {
    tmp.actions = tmp$1[0];
  }
  if (backIconButtonProps) {
    tmp.backIconButtonProps = backIconButtonProps[0];
  }
  var tmp$2 = Js_option.map(unwrapValue, colSpan);
  if (tmp$2) {
    tmp.colSpan = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, component);
  if (tmp$3) {
    tmp.component = tmp$3[0];
  }
  if (labelDisplayedRows) {
    tmp.labelDisplayedRows = labelDisplayedRows[0];
  }
  if (labelRowsPerPage) {
    tmp.labelRowsPerPage = labelRowsPerPage[0];
  }
  if (nextIconButtonProps) {
    tmp.nextIconButtonProps = nextIconButtonProps[0];
  }
  if (onChangeRowsPerPage) {
    tmp.onChangeRowsPerPage = onChangeRowsPerPage[0];
  }
  if (rowsPerPageOptions) {
    tmp.rowsPerPageOptions = rowsPerPageOptions[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, numeric);
  if (tmp$4) {
    tmp.numeric = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(4, v, jsMapperConstantArray$62);
        }), padding);
  if (tmp$5) {
    tmp.padding = tmp$5[0];
  }
  if (scope) {
    tmp.scope = scope[0];
  }
  var tmp$6 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$63);
        }), sortDirection);
  if (tmp$6) {
    tmp.sortDirection = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$64);
        }), variant);
  if (tmp$7) {
    tmp.variant = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$69, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(TablePagination.default, tmp, children);
}

var TablePagination$1 = /* module */[
  /* paddingToJs */paddingToJs$1,
  /* paddingFromJs */paddingFromJs$1,
  /* sortDirectionToJs */sortDirectionToJs$1,
  /* sortDirectionFromJs */sortDirectionFromJs$1,
  /* variantToJs */variantToJs$6,
  /* variantFromJs */variantFromJs$6,
  /* Classes */Classes$69,
  /* make */make$85
];

function to_string$70(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "head";
    case 2 : 
        return "footer";
    case 3 : 
        return "selected";
    case 4 : 
        return "hover";
    
  }
}

function to_obj$70(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$70(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$70 = /* module */[
  /* to_string */to_string$70,
  /* to_obj */to_obj$70
];

function make$86(className, component, hover, selected, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, hover);
  if (tmp$2) {
    tmp.hover = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, selected);
  if (tmp$3) {
    tmp.selected = tmp$3[0];
  }
  var tmp$4 = Js_option.map(to_obj$70, classes);
  if (tmp$4) {
    tmp.classes = tmp$4[0];
  }
  return ReasonReact.wrapJsForReason(TableRow.default, tmp, children);
}

var TableRow$1 = /* module */[
  /* Classes */Classes$70,
  /* make */make$86
];

var jsMapperConstantArray$65 = /* array */[
  /* tuple */[
    3258129,
    "asc"
  ],
  /* tuple */[
    759138929,
    "desc"
  ]
];

function directionToJs$2(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$65);
}

function directionFromJs$2(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$65, param);
}

function to_string$71(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "active";
    case 2 : 
        return "icon";
    case 3 : 
        return "iconDirectionDesc";
    case 4 : 
        return "iconDirectionAsc";
    
  }
}

function to_obj$71(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$71(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$71 = /* module */[
  /* to_string */to_string$71,
  /* to_obj */to_obj$71
];

function make$87(active, className, direction, buttonRef, centerRipple, component, disabled, disableRipple, focusRipple, onBlur, onClick, onFocus, onKeyboardFocus, onKeyDown, onKeyUp, onMouseDown, onMouseLeave, onMouseUp, onTouchEnd, onTouchMove, onTouchStart, role, tabIndex, touchRippleProps, _type, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, active);
  if (tmp$1) {
    tmp.active = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(2, v, jsMapperConstantArray$65);
        }), direction);
  if (tmp$2) {
    tmp.direction = tmp$2[0];
  }
  if (buttonRef) {
    tmp.buttonRef = buttonRef[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, centerRipple);
  if (tmp$3) {
    tmp.centerRipple = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, component);
  if (tmp$4) {
    tmp.component = tmp$4[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$5) {
    tmp.disabled = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, disableRipple);
  if (tmp$6) {
    tmp.disableRipple = tmp$6[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, focusRipple);
  if (tmp$7) {
    tmp.focusRipple = tmp$7[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onClick) {
    tmp.onClick = onClick[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  if (onKeyboardFocus) {
    tmp.onKeyboardFocus = onKeyboardFocus[0];
  }
  if (onKeyDown) {
    tmp.onKeyDown = onKeyDown[0];
  }
  if (onKeyUp) {
    tmp.onKeyUp = onKeyUp[0];
  }
  if (onMouseDown) {
    tmp.onMouseDown = onMouseDown[0];
  }
  if (onMouseLeave) {
    tmp.onMouseLeave = onMouseLeave[0];
  }
  if (onMouseUp) {
    tmp.onMouseUp = onMouseUp[0];
  }
  if (onTouchEnd) {
    tmp.onTouchEnd = onTouchEnd[0];
  }
  if (onTouchMove) {
    tmp.onTouchMove = onTouchMove[0];
  }
  if (onTouchStart) {
    tmp.onTouchStart = onTouchStart[0];
  }
  if (role) {
    tmp.role = role[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, tabIndex);
  if (tmp$8) {
    tmp.tabIndex = tmp$8[0];
  }
  if (touchRippleProps) {
    tmp.touchRippleProps = touchRippleProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$9 = Js_option.map(to_obj$71, classes);
  if (tmp$9) {
    tmp.classes = tmp$9[0];
  }
  return ReasonReact.wrapJsForReason(TableSortLabel.default, tmp, children);
}

var TableSortLabel$1 = /* module */[
  /* directionToJs */directionToJs$2,
  /* directionFromJs */directionFromJs$2,
  /* Classes */Classes$71,
  /* make */make$87
];

function to_string$72() {
  return "root";
}

function to_obj$72(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj["root"] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$72 = /* module */[
  /* to_string */to_string$72,
  /* to_obj */to_obj$72
];

function make$88(className, component, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(unwrapValue, component);
  if (tmp$1) {
    tmp.component = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$72, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Table.default, tmp, children);
}

var Table$1 = /* module */[
  /* Classes */Classes$72,
  /* make */make$88
];

var jsMapperConstantArray$66 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function indicatorColorToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$66);
}

function indicatorColorFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$66, param);
}

var jsMapperConstantArray$67 = /* array */[
  /* tuple */[
    17727,
    "on"
  ],
  /* tuple */[
    3951439,
    "off"
  ],
  /* tuple */[
    726666127,
    "auto"
  ]
];

function scrollButtonsToJs(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$67);
}

function scrollButtonsFromJs(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$67, param);
}

var jsMapperConstantArray$68 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ]
];

function textColorToJs$1(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$68);
}

function textColorFromJs$1(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$68, param);
}

function to_string$73(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "flexContainer";
    case 2 : 
        return "scroller";
    case 3 : 
        return "fixed";
    case 4 : 
        return "scrollable";
    case 5 : 
        return "centered";
    case 6 : 
        return "scrollButtons";
    case 7 : 
        return "scrollButtonsAuto";
    case 8 : 
        return "indicator";
    
  }
}

function to_obj$73(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$73(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$73 = /* module */[
  /* to_string */to_string$73,
  /* to_obj */to_obj$73
];

function make$89(action, centered, className, fullWidth, indicatorColor, onChange, scrollable, scrollButtons, tabScrollButton, textColor, theme, value, classes, children) {
  var tmp = {
    theme: theme
  };
  if (action) {
    tmp.action = action[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, centered);
  if (tmp$1) {
    tmp.centered = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$2) {
    tmp.fullWidth = tmp$2[0];
  }
  var tmp$3 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== 770676513) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `String */[
                        -976970511,
                        Js_mapperRt.binarySearch(2, v[1], jsMapperConstantArray$66)
                      ]);
          }
        }), indicatorColor);
  if (tmp$3) {
    tmp.indicatorColor = tmp$3[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, scrollable);
  if (tmp$4) {
    tmp.scrollable = tmp$4[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$67);
        }), scrollButtons);
  if (tmp$5) {
    tmp.scrollButtons = tmp$5[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, tabScrollButton);
  if (tmp$6) {
    tmp.tabScrollButton = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$68);
        }), textColor);
  if (tmp$7) {
    tmp.textColor = tmp$7[0];
  }
  if (value) {
    tmp.value = value[0];
  }
  var tmp$8 = Js_option.map(to_obj$73, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(Tabs.default, tmp, children);
}

var Tabs$1 = /* module */[
  /* indicatorColorToJs */indicatorColorToJs,
  /* indicatorColorFromJs */indicatorColorFromJs,
  /* scrollButtonsToJs */scrollButtonsToJs,
  /* scrollButtonsFromJs */scrollButtonsFromJs,
  /* textColorToJs */textColorToJs$1,
  /* textColorFromJs */textColorFromJs$1,
  /* Classes */Classes$73,
  /* make */make$89
];

var jsMapperConstantArray$69 = /* array */[
  /* tuple */[
    -453122489,
    "normal"
  ],
  /* tuple */[
    -363472001,
    "dense"
  ],
  /* tuple */[
    870530776,
    "none"
  ]
];

function marginToJs$5(param) {
  return Js_mapperRt.binarySearch(3, param, jsMapperConstantArray$69);
}

function marginFromJs$5(param) {
  return Js_mapperRt.revSearch(3, jsMapperConstantArray$69, param);
}

function make$90(autoComplete, autoFocus, className, defaultValue, disabled, error, formHelperTextProps, fullWidth, helperText, id, inputLabelProps, inputProps2, inputProps, inputRef, label, margin, multiline, name, onChange, placeholder, required, rows, rowsMax, select, selectProps, _type, value, component, onBlur, onFocus, children) {
  var tmp = { };
  if (autoComplete) {
    tmp.autoComplete = autoComplete[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, autoFocus);
  if (tmp$1) {
    tmp.autoFocus = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  if (defaultValue) {
    tmp.defaultValue = defaultValue[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disabled);
  if (tmp$2) {
    tmp.disabled = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, error);
  if (tmp$3) {
    tmp.error = tmp$3[0];
  }
  if (formHelperTextProps) {
    tmp.formHelperTextProps = formHelperTextProps[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, fullWidth);
  if (tmp$4) {
    tmp.fullWidth = tmp$4[0];
  }
  if (helperText) {
    tmp.helperText = helperText[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  if (inputLabelProps) {
    tmp.inputLabelProps = inputLabelProps[0];
  }
  if (inputProps2) {
    tmp.inputProps2 = inputProps2[0];
  }
  if (inputProps) {
    tmp.inputProps = inputProps[0];
  }
  if (inputRef) {
    tmp.inputRef = inputRef[0];
  }
  if (label) {
    tmp.label = label[0];
  }
  var tmp$5 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(3, v, jsMapperConstantArray$69);
        }), margin);
  if (tmp$5) {
    tmp.margin = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, multiline);
  if (tmp$6) {
    tmp.multiline = tmp$6[0];
  }
  if (name) {
    tmp.name = name[0];
  }
  if (onChange) {
    tmp.onChange = onChange[0];
  }
  if (placeholder) {
    tmp.placeholder = placeholder[0];
  }
  var tmp$7 = Js_option.map(Js_boolean.to_js_boolean, required);
  if (tmp$7) {
    tmp.required = tmp$7[0];
  }
  var tmp$8 = Js_option.map(unwrapValue, rows);
  if (tmp$8) {
    tmp.rows = tmp$8[0];
  }
  var tmp$9 = Js_option.map(unwrapValue, rowsMax);
  if (tmp$9) {
    tmp.rowsMax = tmp$9[0];
  }
  var tmp$10 = Js_option.map(Js_boolean.to_js_boolean, select);
  if (tmp$10) {
    tmp.select = tmp$10[0];
  }
  if (selectProps) {
    tmp.selectProps = selectProps[0];
  }
  if (_type) {
    tmp.type = _type[0];
  }
  var tmp$11 = Js_option.map(unwrapValue, value);
  if (tmp$11) {
    tmp.value = tmp$11[0];
  }
  var tmp$12 = Js_option.map(unwrapValue, component);
  if (tmp$12) {
    tmp.component = tmp$12[0];
  }
  if (onBlur) {
    tmp.onBlur = onBlur[0];
  }
  if (onFocus) {
    tmp.onFocus = onFocus[0];
  }
  return ReasonReact.wrapJsForReason(TextField.default, tmp, children);
}

var TextField$1 = /* module */[
  /* marginToJs */marginToJs$5,
  /* marginFromJs */marginFromJs$5,
  /* make */make$90
];

function to_string$74(param) {
  if (param.tag) {
    return "gutters";
  } else {
    return "root";
  }
}

function to_obj$74(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$74(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$74 = /* module */[
  /* to_string */to_string$74,
  /* to_obj */to_obj$74
];

function make$91(className, disableGutters, classes, children) {
  var tmp = { };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableGutters);
  if (tmp$1) {
    tmp.disableGutters = tmp$1[0];
  }
  var tmp$2 = Js_option.map(to_obj$74, classes);
  if (tmp$2) {
    tmp.classes = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Toolbar.default, tmp, children);
}

var Toolbar$1 = /* module */[
  /* Classes */Classes$74,
  /* make */make$91
];

var jsMapperConstantArray$70 = /* array */[
  /* tuple */[
    -1031209551,
    "top-end"
  ],
  /* tuple */[
    -929427528,
    "top-start"
  ],
  /* tuple */[
    -524285320,
    "right-end"
  ],
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    4202101,
    "top"
  ],
  /* tuple */[
    72185578,
    "left-start"
  ],
  /* tuple */[
    437082891,
    "bottom"
  ],
  /* tuple */[
    529522894,
    "bottom-start"
  ],
  /* tuple */[
    742595647,
    "right-start"
  ],
  /* tuple */[
    801062215,
    "bottom-end"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    886297699,
    "left-end"
  ]
];

function placementToJs(param) {
  return Js_mapperRt.binarySearch(12, param, jsMapperConstantArray$70);
}

function placementFromJs(param) {
  return Js_mapperRt.revSearch(12, jsMapperConstantArray$70, param);
}

function to_string$75(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "popper";
    case 2 : 
        return "popperClose";
    case 3 : 
        return "tooltip";
    case 4 : 
        return "tooltipPlacementLeft";
    case 5 : 
        return "tooltipPlacementRight";
    case 6 : 
        return "tooltipPlacementTop";
    case 7 : 
        return "tooltipPlacementBottom";
    case 8 : 
        return "tooltipOpen";
    
  }
}

function to_obj$75(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$75(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$75 = /* module */[
  /* to_string */to_string$75,
  /* to_obj */to_obj$75
];

function make$92(className, disableTriggerFocus, disableTriggerHover, disableTriggerTouch, enterDelay, enterTouchDelay, id, leaveDelay, leaveTouchDelay, onClose, onOpen, _open, placement, popperProps, theme, title, classes, children) {
  var tmp = {
    theme: theme,
    title: title
  };
  if (className) {
    tmp.className = className[0];
  }
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, disableTriggerFocus);
  if (tmp$1) {
    tmp.disableTriggerFocus = tmp$1[0];
  }
  var tmp$2 = Js_option.map(Js_boolean.to_js_boolean, disableTriggerHover);
  if (tmp$2) {
    tmp.disableTriggerHover = tmp$2[0];
  }
  var tmp$3 = Js_option.map(Js_boolean.to_js_boolean, disableTriggerTouch);
  if (tmp$3) {
    tmp.disableTriggerTouch = tmp$3[0];
  }
  var tmp$4 = Js_option.map(unwrapValue, enterDelay);
  if (tmp$4) {
    tmp.enterDelay = tmp$4[0];
  }
  var tmp$5 = Js_option.map(unwrapValue, enterTouchDelay);
  if (tmp$5) {
    tmp.enterTouchDelay = tmp$5[0];
  }
  if (id) {
    tmp.id = id[0];
  }
  var tmp$6 = Js_option.map(unwrapValue, leaveDelay);
  if (tmp$6) {
    tmp.leaveDelay = tmp$6[0];
  }
  var tmp$7 = Js_option.map(unwrapValue, leaveTouchDelay);
  if (tmp$7) {
    tmp.leaveTouchDelay = tmp$7[0];
  }
  if (onClose) {
    tmp.onClose = onClose[0];
  }
  if (onOpen) {
    tmp.onOpen = onOpen[0];
  }
  var tmp$8 = Js_option.map(Js_boolean.to_js_boolean, _open);
  if (tmp$8) {
    tmp.open = tmp$8[0];
  }
  var tmp$9 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(12, v, jsMapperConstantArray$70);
        }), placement);
  if (tmp$9) {
    tmp.placement = tmp$9[0];
  }
  if (popperProps) {
    tmp.popperProps = popperProps[0];
  }
  var tmp$10 = Js_option.map(to_obj$75, classes);
  if (tmp$10) {
    tmp.classes = tmp$10[0];
  }
  return ReasonReact.wrapJsForReason(Tooltip.default, tmp, children);
}

var Tooltip$1 = /* module */[
  /* placementToJs */placementToJs,
  /* placementFromJs */placementFromJs,
  /* Classes */Classes$75,
  /* make */make$92
];

var jsMapperConstantArray$71 = /* array */[
  /* tuple */[
    -788068560,
    "justify"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    -57574468,
    "right"
  ],
  /* tuple */[
    847852583,
    "left"
  ],
  /* tuple */[
    980392437,
    "center"
  ]
];

function alignToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$71);
}

function alignFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$71, param);
}

var jsMapperConstantArray$72 = /* array */[
  /* tuple */[
    -791844958,
    "primary"
  ],
  /* tuple */[
    -507693849,
    "textSecondary"
  ],
  /* tuple */[
    -384499551,
    "default"
  ],
  /* tuple */[
    -72987685,
    "inherit"
  ],
  /* tuple */[
    67972948,
    "secondary"
  ],
  /* tuple */[
    106380200,
    "error"
  ]
];

function colorToJs$12(param) {
  return Js_mapperRt.binarySearch(6, param, jsMapperConstantArray$72);
}

function colorFromJs$12(param) {
  return Js_mapperRt.revSearch(6, jsMapperConstantArray$72, param);
}

var jsMapperConstantArray$73 = /* array */[
  /* tuple */[
    -904051921,
    "body1"
  ],
  /* tuple */[
    -904051920,
    "body2"
  ],
  /* tuple */[
    -191243578,
    "caption"
  ],
  /* tuple */[
    -11760689,
    "display1"
  ],
  /* tuple */[
    -11760688,
    "display2"
  ],
  /* tuple */[
    -11760687,
    "display3"
  ],
  /* tuple */[
    -11760686,
    "display4"
  ],
  /* tuple */[
    148169314,
    "subheading"
  ],
  /* tuple */[
    242538002,
    "button"
  ],
  /* tuple */[
    579538228,
    "headline"
  ],
  /* tuple */[
    594052472,
    "title"
  ]
];

function variantToJs$7(param) {
  return Js_mapperRt.binarySearch(11, param, jsMapperConstantArray$73);
}

function variantFromJs$7(param) {
  return Js_mapperRt.revSearch(11, jsMapperConstantArray$73, param);
}

function to_string$76(param) {
  switch (param.tag | 0) {
    case 0 : 
        return "root";
    case 1 : 
        return "display4";
    case 2 : 
        return "display3";
    case 3 : 
        return "display2";
    case 4 : 
        return "display1";
    case 5 : 
        return "headline";
    case 6 : 
        return "title";
    case 7 : 
        return "subheading";
    case 8 : 
        return "body2";
    case 9 : 
        return "body1";
    case 10 : 
        return "caption";
    case 11 : 
        return "button";
    case 12 : 
        return "alignLeft";
    case 13 : 
        return "alignCenter";
    case 14 : 
        return "alignRight";
    case 15 : 
        return "alignJustify";
    case 16 : 
        return "noWrap";
    case 17 : 
        return "gutterBottom";
    case 18 : 
        return "paragraph";
    case 19 : 
        return "colorInherit";
    case 20 : 
        return "colorPrimary";
    case 21 : 
        return "colorSecondary";
    case 22 : 
        return "colorTextSecondary";
    case 23 : 
        return "colorError";
    
  }
}

function to_obj$76(listOfClasses) {
  return ListLabels.fold_left((function (obj, classType) {
                obj[to_string$76(classType)] = classType[0];
                return obj;
              }), { }, listOfClasses);
}

var Classes$76 = /* module */[
  /* to_string */to_string$76,
  /* to_obj */to_obj$76
];

function make$93(align, className, color, component, gutterBottom, headlineMapping, noWrap, paragraph, variant, classes, children) {
  var tmp = { };
  var tmp$1 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(5, v, jsMapperConstantArray$71);
        }), align);
  if (tmp$1) {
    tmp.align = tmp$1[0];
  }
  if (className) {
    tmp.className = className[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(6, v, jsMapperConstantArray$72);
        }), color);
  if (tmp$2) {
    tmp.color = tmp$2[0];
  }
  var tmp$3 = Js_option.map(unwrapValue, component);
  if (tmp$3) {
    tmp.component = tmp$3[0];
  }
  var tmp$4 = Js_option.map(Js_boolean.to_js_boolean, gutterBottom);
  if (tmp$4) {
    tmp.gutterBottom = tmp$4[0];
  }
  if (headlineMapping) {
    tmp.headlineMapping = headlineMapping[0];
  }
  var tmp$5 = Js_option.map(Js_boolean.to_js_boolean, noWrap);
  if (tmp$5) {
    tmp.noWrap = tmp$5[0];
  }
  var tmp$6 = Js_option.map(Js_boolean.to_js_boolean, paragraph);
  if (tmp$6) {
    tmp.paragraph = tmp$6[0];
  }
  var tmp$7 = Js_option.map((function (v) {
          return Js_mapperRt.binarySearch(11, v, jsMapperConstantArray$73);
        }), variant);
  if (tmp$7) {
    tmp.variant = tmp$7[0];
  }
  var tmp$8 = Js_option.map(to_obj$76, classes);
  if (tmp$8) {
    tmp.classes = tmp$8[0];
  }
  return ReasonReact.wrapJsForReason(Typography.default, tmp, children);
}

var Typography$1 = /* module */[
  /* alignToJs */alignToJs,
  /* alignFromJs */alignFromJs,
  /* colorToJs */colorToJs$12,
  /* colorFromJs */colorFromJs$12,
  /* variantToJs */variantToJs$7,
  /* variantFromJs */variantFromJs$7,
  /* Classes */Classes$76,
  /* make */make$93
];

function timeoutShapeToJs$4(param) {
  return {
          enter: param[/* enter */0],
          exit: param[/* exit */1]
        };
}

function timeoutShapeFromJs$4(param) {
  return /* record */[
          /* enter */param.enter,
          /* exit */param.exit
        ];
}

function make$94(_in, onEnter, onExit, style, theme, timeout, children) {
  var tmp = {
    theme: theme
  };
  var tmp$1 = Js_option.map(Js_boolean.to_js_boolean, _in);
  if (tmp$1) {
    tmp.in = tmp$1[0];
  }
  if (onEnter) {
    tmp.onEnter = onEnter[0];
  }
  if (onExit) {
    tmp.onExit = onExit[0];
  }
  if (style) {
    tmp.style = style[0];
  }
  var tmp$2 = Js_option.map((function (v) {
          if (typeof v === "number" || v[0] !== -908856609) {
            return unwrapValue(v);
          } else {
            return unwrapValue(/* `Element */[
                        -744106340,
                        timeoutShapeToJs$4(v[1])
                      ]);
          }
        }), timeout);
  if (tmp$2) {
    tmp.timeout = tmp$2[0];
  }
  return ReasonReact.wrapJsForReason(Zoom.default, tmp, children);
}

var Zoom$1 = /* module */[
  /* timeoutShapeToJs */timeoutShapeToJs$4,
  /* timeoutShapeFromJs */timeoutShapeFromJs$4,
  /* make */make$94
];

exports.unwrapValue = unwrapValue;
exports.MuiTheme = MuiTheme;
exports.WithStylesSafe = WithStylesSafe;
exports.WithStyles = WithStyles;
exports.Colors = Colors;
exports.AppBar = AppBar$1;
exports.Avatar = Avatar$1;
exports.Backdrop = Backdrop$1;
exports.Badge = Badge$1;
exports.BottomNavigationAction = BottomNavigationAction$1;
exports.BottomNavigation = BottomNavigation$1;
exports.ButtonBase = ButtonBase$1;
exports.Button = Button$1;
exports.CardActions = CardActions$1;
exports.CardContent = CardContent$1;
exports.CardHeader = CardHeader$1;
exports.CardMedia = CardMedia$1;
exports.Card = Card$1;
exports.Checkbox = Checkbox$1;
exports.Chip = Chip$1;
exports.CircularProgress = CircularProgress$1;
exports.ClickAwayListener = ClickAwayListener$1;
exports.Collapse = Collapse$1;
exports.CssBaseline = CssBaseline$1;
exports.DialogActions = DialogActions$1;
exports.DialogContentText = DialogContentText$1;
exports.DialogContent = DialogContent$1;
exports.DialogTitle = DialogTitle$1;
exports.Dialog = Dialog$1;
exports.Divider = Divider$1;
exports.Drawer = Drawer$1;
exports.ExpansionPanelActions = ExpansionPanelActions$1;
exports.ExpansionPanelDetails = ExpansionPanelDetails$1;
exports.ExpansionPanelSummary = ExpansionPanelSummary$1;
exports.ExpansionPanel = ExpansionPanel$1;
exports.Fade = Fade$1;
exports.FormControlLabel = FormControlLabel$1;
exports.FormControl = FormControl$1;
exports.FormGroup = FormGroup$1;
exports.FormHelperText = FormHelperText$1;
exports.FormLabel = FormLabel$1;
exports.GridListTileBar = GridListTileBar$1;
exports.GridListTile = GridListTile$1;
exports.GridList = GridList$1;
exports.Grid = Grid$1;
exports.Grow = Grow$1;
exports.Hidden = Hidden$1;
exports.IconButton = IconButton$1;
exports.Icon = Icon$1;
exports.InputAdornment = InputAdornment$1;
exports.InputLabel = InputLabel$1;
exports.Input = Input$1;
exports.LinearProgress = LinearProgress$1;
exports.ListItemAvatar = ListItemAvatar$1;
exports.ListItemIcon = ListItemIcon$1;
exports.ListItemSecondaryAction = ListItemSecondaryAction$1;
exports.ListItemText = ListItemText$1;
exports.ListItem = ListItem$1;
exports.ListSubheader = ListSubheader$1;
exports.List = List$1;
exports.MenuItem = MenuItem$1;
exports.MenuList = MenuList$1;
exports.Menu = Menu$1;
exports.MobileStepper = MobileStepper$1;
exports.Modal = Modal$1;
exports.MuiThemeProvider = MuiThemeProvider$1;
exports.Paper = Paper$1;
exports.Popover = Popover$1;
exports.Portal = Portal$1;
exports.RadioGroup = RadioGroup$1;
exports.Radio = Radio$1;
exports.Select = Select$1;
exports.Slide = Slide$1;
exports.SnackbarContent = SnackbarContent$1;
exports.Snackbar = Snackbar$1;
exports.StepButton = StepButton$1;
exports.StepContent = StepContent$1;
exports.StepIcon = StepIcon$1;
exports.StepLabel = StepLabel$1;
exports.Step = Step$1;
exports.Stepper = Stepper$1;
exports.SvgIcon = SvgIcon$1;
exports.Switch = Switch$1;
exports.Tab = Tab$1;
exports.TableBody = TableBody$1;
exports.TableCell = TableCell$1;
exports.TableFooter = TableFooter$1;
exports.TableHead = TableHead$1;
exports.TablePagination = TablePagination$1;
exports.TableRow = TableRow$1;
exports.TableSortLabel = TableSortLabel$1;
exports.Table = Table$1;
exports.Tabs = Tabs$1;
exports.TextField = TextField$1;
exports.Toolbar = Toolbar$1;
exports.Tooltip = Tooltip$1;
exports.Typography = Typography$1;
exports.Zoom = Zoom$1;
/* innerComponent Not a pure module */
